<para>
  Lizenz: Creative Commons CC-BY-SA
</para>
<sect1 id="einleitung">
  <title>Einleitung</title>
  <para>
    Dieses Dokument enthält die Spezifikation des OParl
    Schnittstellen-Standards für parlamentarische
    Informationssysteme<footnote>
      <para>
        In Deutschland hat sich auf kommunaler Ebene der Begriff
        &quot;Ratsinformationssystem&quot; etabliert. OParl ist in
        seiner Anwendung jedoch nicht auf Gemeinderäte eingeschränkt und
        verwendet daher den Begriff &quot;parlamentarisches
        Informationssystem&quot;.
      </para>
    </footnote> darstellen. Es dient damit als Grundlage für die
    Implementierung von OParl-konformen Server- und Clientanwendungen.
  </para>
  <sect2 id="was-ist-oparl-in-kürze">
    <title>Was ist OParl in Kürze?</title>
    <para>
      OParl ist die Gruppierung, die Initiator und Herausgeber der
      vorliegenden Spezifikation ist. An OParl wirken Verbände,
      Zivilgesellschaftliche Organisationen und Initiativen und
      Software-Anbieter sowie interessierte Einzelpersonen mit.
    </para>
    <para>
      Die vorliegende Spezifikation beschreibt den OParl-Standard.
      Dieser definiert eine Webservice-Schnittstelle, die den anonymen
      und lesenden Zugriff auf öffentliche Inhalte aus parlamentarischen
      Informationssystemen ermöglicht. Wie der Name
      &quot;Webservice&quot; ausdrückt, setzt diese Schnittstelle auf
      dem World Wide Web auf. Sie ermöglicht, dass parlamentarische
      Informationen maschinenlesbar als Offene Daten (Open Data)
      veröffentlicht werden.
    </para>
    <para>
      Die vorliegende Version ist die erste verabschiedete Version der
      Spezifikaiton zum OParl-Standard.
    </para>
  </sect2>
  <sect2 id="zielsetzung-von-oparl">
    <title>Zielsetzung von OParl</title>
    <para>
      OParl richtet sich an verschiedene Nutzergruppen und Stakeholder:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Verwaltung und politische Gremien in Gebietskörperschaften
        </para>
      </listitem>
      <listitem>
        <para>
          Bürger, politische Parteien und Organisationen
        </para>
      </listitem>
      <listitem>
        <para>
          Open-Data-Initiativen
        </para>
      </listitem>
      <listitem>
        <para>
          Wissenschaftler
        </para>
      </listitem>
      <listitem>
        <para>
          Anbieter von Server- und Softwareprodukten
        </para>
      </listitem>
      <listitem>
        <para>
          Anbieter von Linked-Data-Plattformen oder -Services
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Die Gründe, warum Betreiber von parlamentarischen
      Informationssystemen den Zugriff darauf über eine standardisierte
      Schnittstelle ermöglichen sollten oder möchten, können vielfältig
      sein und je nach Nutzergruppe unterschiedlich.
    </para>
    <para>
      Ein zentrales Argument für Verwaltung und politische Gremieni, sei
      es in Gebietskörperschaften oder auf Landes- oder Bundesebene, ist
      die Verpflichtung der Parlamente gegenüber der Bevölkerung, diese
      über die Fortschritte der parlamentarischen Arbeit zu informieren
      und auf dem Laufenden zu halten. Ein erster Schritt, der
      Bevölkerung Einblicke in die Arbeit und Zugriff auf Dokumente zu
      gewähren, ist vielerorts in den letzten Jahren durch Einführung
      von Ratsinformationssystemen mit anonymem, lesenden Zugriff über
      das World Wide Web gemacht worden.
    </para>
    <para>
      Die damit eingeschlagene Richtung konsequent weiter zu gehen,
      bedeutet, die Daten der parlamentarischen Informationssystemen
      gänzlich offen zu legen, sofern die Inhalte es erlauben. Es
      bedeutet, die Daten und Inhalte so universell weiterverwendbar und
      so barrierearm wie möglich anzubieten, dass jegliche weitere
      Verwendung durch Dritte technisch möglich ist. Der seit einiger
      Zeit etablierte Begriff für dieses Prinzip heißt &quot;Open
      Data&quot;.
    </para>
    <para>
      Open-Data-Initiativen können unter Rückgriff auf RIS mit
      OParl-Schnittstelle einfacher Dokumente und Daten aus
      unterschiedlichen Gebietskörperschaften in Open-Data-Katalogen
      verzeichnen und so einfacher auffindbar machen für die
      Weiterverwendung durch Dritte.
    </para>
    <para>
      Bürgerinnen und Bürger, politische Parteien und
      zivilgesellschaftliche Organisationen können einfacher auf Inhalte
      parlamentarischer Informationssysteme zugreifen und diese
      entsprechend ihren Interessen aufbereiten. Dies können
      beispielsweise Visualisierungen von enthaltenen Daten, die
      Anreicherung von Informationsangeboten für spezielle Nutzergruppen
      oder die Schaffung von Benutzeroberflächen mit besonderen
      Funktionen für verschiedene Endgeräte sein.
    </para>
    <para>
      Das Interesse an parlamentarischen Informationen und an
      Anwendungen, die diese nutzbar und auswertbar machen, ist
      offensichtlich vorhanden. Die Entwickler der alternativen
      Ratsinformationssysteme wie Frankfurt Gestalten<footnote>
        <para>
          Frankfurt Gestalten:
          <ulink url="http://www.frankfurt-gestalten.de/">http://www.frankfurt-gestalten.de/</ulink>
        </para>
      </footnote>, Offenes Köln<footnote>
        <para>
          Offenes Köln:
          <ulink url="http://offeneskoeln.de/">http://offeneskoeln.de/</ulink>
        </para>
      </footnote> oder der OpenRuhr:RIS-Instanzen<footnote>
        <para>
          OpenRuhr:RIS:
          <ulink url="http://openruhr.de/openruhrris/">http://openruhr.de/openruhrris/</ulink>
        </para>
      </footnote> wissen zu berichten, wie viel Interesse den Projekten
      gerade aus Orten entgegen gebracht wird, in denen derartige
      Systeme noch nicht verfügbar sind.
    </para>
    <para>
      Die Anwendungsmöglichkeiten für parlamentarische Informationen,
      wenn sie über eine Schnittstelle schnell und einfach abgerufen
      werden können, sind vielfältig. Beispiele sind:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Apps für den Abruf auf mobilen Endgeräten
        </para>
      </listitem>
      <listitem>
        <para>
          Möglichkeiten zur Wiedergabe für Nutzerinnen und Nutzer mit
          Beeinträchtigung des Sehvermögens
        </para>
      </listitem>
      <listitem>
        <para>
          Alternative und erweiterte Suchmöglichkeiten in Inhalten
        </para>
      </listitem>
      <listitem>
        <para>
          Auswertung und Analyse von Themen, Inhalten, Sprache etc.
        </para>
      </listitem>
      <listitem>
        <para>
          Benachrichtigungsfunktionen beim Erscheinen bestimmte Inhalte
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Die Standardisierung dieses Zugriffs über die Grenzen einzelner
      Systeme hinweg erlaubt zudem, diese Entwicklungen
      grenzüberschreitend zu denken. Damit steigt nicht nur die
      potenzielle Nutzerschaft einzelner Entwicklungen. Auch das
      Potenzial für Kooperationen zwischen Anwendungsentwicklern wächst.
    </para>
    <para>
      Für Wissenschaftler, die z. B. an vergleichenden Untersuchungen zu
      Vorgängen in verschiedenen Gebietskörperschaften interessiert
      sind, ergeben sich ebenso vielfältige Möglichkeiten über mehrere
      RIS-Instanzen hinweg auf entsprechende Informationen zuzugreifen
      und diese so einfacher in ihre Analysen einzubeziehen.
    </para>
    <para>
      Darüber hinaus sind auch Motivationen innerhalb von Organisationen
      und Körperschaften erkennbar. So sollen parlamentarische
      Informationssysteme vielerorts in verschiedenste Prozesse und
      heterogene Systemlandschaften integriert werden. Durch eine
      einheitliche Schnittstelle bieten sich effiziente Möglichkeiten
      zur Integration der Daten in anderen Systeme, wie beispielsweise
      Web-Portale.
    </para>
    <para>
      Anbieter von Server- und Softwareprodukten, die RIS-Lösungen
      anbieten, können mit der Implementation der OParl-Schnittstelle
      ihren Kunden eine entsprechende einheitliche Schnittstelle
      anbieten. Für Anbieter von Linked-Data-Plattformen ergeben sich u.
      a. Möglichkeiten zur vereinfachten Zusammenführung und
      Anreicherung von Inhalten parlamentarischer Informationssysteme.
    </para>
    <para>
      Ausführlichere Beschreibungen einiger möglicher
      Anwendungsszenarien finden sich im Kapitel
      <link linkend="nutzungsszenarien">Nutzungsszenarien</link>.
    </para>
  </sect2>
  <sect2 id="transparenz-und-beteiligung-durch-open-data">
    <title>Transparenz und Beteiligung durch Open Data</title>
    <para>
      Öffentliche Stellen verfügen über vielfältige Informationen und
      Daten. Seit einigen Jahren sind zivilgesellschaftliche
      Organisationen sowie Politik und Verwaltung unter dem Schlagwort
      <emphasis>Open Data</emphasis> international und auch in
      Deutschland in unterschiedlichem Maße um eine stärkere Öffnung
      dieser Daten bemüht<footnote>
        <para>
          Eine weltweite Übersicht zu Open-Data-Projekten bietet z. B.
          der Open-Data-Showroom
          <ulink url="http://opendata-showroom.org/de/">http://opendata-showroom.org/de/</ulink>
        </para>
      </footnote>. Bei dem Ansatz Open Data<footnote>
        <para>
          vgl.
          <ulink url="https://de.wikipedia.org/wiki/Open_data">https://de.wikipedia.org/wiki/Open_data</ulink>
        </para>
      </footnote> geht es darum, diese Daten so bereitzustellen, dass
      Dritte diese einfacher finden und weiterverwenden können.
    </para>
    <para>
      Die zehn Open-Data-Prinzipien der Sunlight-Foundation<footnote>
        <para>
          Ten Principles for Opening Up Open Government Information,
          <ulink url="https://sunlightfoundation.com/policy/documents/ten-open-data-principles">https://sunlightfoundation.com/policy/documents/ten-open-data-principles</ulink>
        </para>
      </footnote> beschreiben die Offenheit von Datensätzen. Wesentlich
      dabei sind vor allem die einfache rechtliche und die technische
      Offenheit. Bei ersterer geht es darum, dass Datensätze unter
      Nutzungsbestimmungen bereitgestellt werden, die kurz und
      verständlich formuliert sind und mindestens jegliche weitere
      Verwendung inklusive der kommerziellen erlauben, unter der
      Voraussetzung, dass bei der Weiterverwendung die Quelle benannt
      wird. Bei der technischen Offenheit steht die Bereitstellung von
      Datensätzen in möglichst maschinenlesbaren Formaten im
      Vordergrund. Dies bedeutet, stärker strukturierte Datensätze sind
      in der Bereitstellung zu bevorzugen. Liegen Daten innerhalb einer
      Organisation in einer Datenbank vor, so bietet es sich an, diese
      soweit möglich über eine Programmierschnittstelle (API) für
      Außenstehende bereitzustellen.
    </para>
    <para>
      Die Erfüllung dieser rechtlichen und technischen Offenheit erlaubt
      es Dritten, dies können Bürgerinnen und Bürger, Unternehmen,
      Forschungseinrichtungen oder auch andere Verwaltungseinheiten
      sein, die Verwaltungsdaten wesentlich unkomplizierter für eigene
      Vorhaben wie Anwendungen oder Visualisierungen einzusetzen. Mit
      dem Ansatz offener Verwaltungsdaten soll so erstens mehr
      Transparenz über Prozesse und Entscheidungen in Politik und
      Verwaltung erreicht werden. Zweitens können Dritte auf Grundlage
      dieser Daten leichter eigene Geschäftsmodelle verfeinern oder neue
      entwickeln. Drittens wird es auch öffentlichen Stellen selbst
      leichter bereits im öffentlichen Sektor existierende Daten zu
      finden und weiterzuverwenden.
    </para>
    <para>
      Das Prinzip offener Daten bzw. offener Verwaltungsdaten über die
      Minimalprinzipien rechtlicher und technischer Offenheit hinaus in
      die Tat umzusetzen, erfordert im Einzelfall häufig eine
      Zusammenarbeit von Datenbereitstellern und potentiellen
      Datennutzern. Die bloße Bereitstellung einer OParl-konformen API
      wird weder die Einhaltung der technischen Prinzipien, noch der
      weiteren Open-Data-Prinzipien vollständig garantieren. Viele
      Bestandteile der OParl-Spezifikation, die einen weitgehend
      barrierearmen Zugang zu Informationen ermöglichen, sind optional
      (Beispiel: Volltexte von Dokumenten über die API abrufbar machen).
      Andere Bestandteile, die von Interesse wären, sind noch gar nicht
      von OParl abgedeckt (Beispiel: Abstimmungsergebnisse). Grund dafür
      ist, dass sich OParl in einem frühen Stadium befindet und primär
      am Status Quo der parlamentarischen Informationssysteme
      ausgerichtet ist. Es liegt also auch weiterhin an Verwaltung und
      Politik, durch einen verantwortungsvollen Umgang mit den Systemen
      die maximal erreichbare Transparenz zu bieten. Das fängt bei
      Dokumentenformaten an (ein PDF mit digitalem Text weist weit
      weniger Barrieren auf, als ein gescannter Brief, der ebenfalls als
      PDF gespeichert wurde) und hört bei der verwendeten Sprache
      auf.<footnote>
        <para>
          Weitere generelle Informationen zur Bereitstellung offener
          Verwaltungsdaten bieten bspw.
        </para>
        <itemizedlist spacing="compact">
          <listitem>
            <para>
              Praktische Informationen: Open-Data-Handbook der Open
              Knowledge Foundation
              <ulink url="http://opendatahandbook.org/de/how-to-open-up-data/index.html">http://opendatahandbook.org/de/how-to-open-up-data/index.html</ulink>
            </para>
          </listitem>
          <listitem>
            <para>
              Grundsätzliche Informationen: Die vom Bundesministerium
              des Innern beauftragte Studie &quot;Open Government Data
              Deutschland&quot;
              <ulink url="http://www.bmi.bund.de/SharedDocs/Downloads/DE/Themen/OED_Verwaltung/ModerneVerwaltung/opengovernment.pdf">http://www.bmi.bund.de/SharedDocs/Downloads/DE/Themen/OED_Verwaltung/ModerneVerwaltung/opengovernment.pdf</ulink>
            </para>
          </listitem>
        </itemizedlist>
      </footnote>
    </para>
  </sect2>
  <sect2 id="werdegang-von-oparl-1.0">
    <title>Werdegang von OParl 1.0</title>
    <para>
      Die Vorüberlegungen für die Erarbeitung eines offenen Standards
      für parlamentarische Informationssysteme, die letztlich zu OParl
      geführt haben, begannen auf einer Veranstaltung der Open Knowledge
      Foundation (OKF) Deutschland am 17. und 18. November 2012. Unter
      dem Titel &quot;Stadt Land Code&quot; lud die OKF Entwicklerinnen
      von Anwendungen ein, die das Ziel haben, einen gesellschaftlichen
      Nutzen zu schaffen. Die Veranstaltung in den Räumen der
      Heinrich-Böll-Stiftung wurde unter anderem von VITAKO, der
      Bundesarbeitsgemeinschaft der kommunalen IT-Dienstleister,
      gesponsort. Die Geschäftsführerin, Dr. Marianne Wulff, war selbst
      anwesend. Marian Steinbach, Entwickler von Offenes Köln, war
      eingeladen, um über die Erfahrungen mit seinem Projekt zu
      berichten und sprach dabei auch über die Problematik, das Prinzip
      der offenen Ratsinformationen für die BürgerInnen aller Kommunen
      nutzbar zu machen. Es kam zum Austausch zwischen Marianne Wulff
      und Marian Steinbach über Möglichkeiten, dies gemeinsam voran zu
      treiben.
    </para>
    <para>
      Im Rahmen einer Anhörung des Landtags von Nordrhein-Westfalen zu
      einem Antrag der Regierungskoalition zum Thema Open Government und
      Open Data waren am 6. Dezember 2012 sowohl Jens Klessmann
      (Fraunhofer FOKUS) und Marian Steinbach als Sachverständige
      eingeladen. Sie beschließen, die Bemühungen um eine
      Standardisierung offener Ratsinformationen gemeinsam mit
      Unterstützung von VITAKO voranzutreiben. Im selben Monat beginnen
      Marianne Wulff, Jens Klessmann und Marian Steinbach mit der
      Planung eines initialen Workshops mit Vertreterinnen und
      Vertretern von Kommunen, kommunalen IT-Dienstleistern,
      RIS-Anbietern und Zivilgesellschaft. Ziel: Die Bereitschaft zur
      Zusammenarbeit an einem gemeinsamen Standard ermitteln.
      Unterdessen beginnt Marian Steinbach mit der Formulierung eines
      Standard-Entwurfs als Diskussionsgrundlage. Der Entwurf wird von
      Beginn an öffentlich auf GitHub.com bereit gestellt.
    </para>
    <para>
      Insgesamt 30 Teilnehmer versammeln sich am 17. April 2013 zum
      ersten Workshop in Köln, um sich über Ziele und Chancen einer
      Standardisierung für offene Ratsinformationen auszutauschen. Als
      Ergebnis wird ein großes Interesse an der weiteren Zusammenarbeit
      auf Basis des vorliegenden Standardentwurfs festgestellt. Als
      Termin für die Fertigstellung der ersten Version der Spezifikation
      wird der 30. Juni 2013 festgelegt. Die Initiatoren präsentieren
      den Anwesenden hier erstmals den Namen OParl, der künftig als Name
      für die Bemühungen der Gruppe stehen soll.
    </para>
    <para>
      Die verteilte Arbeit am Standard-Entwurf läuft nach dem Workshop
      in Köln nur schleppend; der ursprünglich gesetzte Termin kann
      nicht gehalten werden. Für den 22. Januar 2014 laden die
      Initiatoren zu einem eintägigen OParl-Workshop in Bielefeld ein,
      um die Spezifikation in intensiver Zusammenarbeit vor Ort so weit
      wie möglich voran zu treiben und eine baldige Fertigstellung zu
      ermöglichen. Am 26. Januar 2014 findet in Düsseldorf ein weiterer
      technischer Workshop zur Arbeit an der Spezifikation statt.
    </para>
    <para>
      TODO: April bis Juni 2014: Verfeinerung des Vokabular-Teils durch
      Andreas Kuckartz, finanziert durch das FP7-Projekt Fusepool aus
      Mitteln der Europäischen Union.
    </para>
    <para>
      Am 19. Mai 2014 wurde mit einem Redaktionsschluss für die
      Spezifikation der Beginn der Review-Phase eingeleitet.
      Interessierte waren bis Mitte Juni eingeladen, den vorliegenden
      Entwurf bis Ende Mai zu kommentieren.
    </para>
    <para>
      TODO: Ende Mai 2014: Telefonkonferenz zum eingegangenen Feedback
      aus der Review-Phase
    </para>
    <para>
      TODO: KW 23 (2. bis 6. Juni): Geplante Veröffentlichung der
      Spezifikation 1.0
    </para>
  </sect2>
  <sect2 id="zukunft-von-oparl">
    <title>Zukunft von OParl</title>
    <para>
      Die vorliegende Version 1.0 der OParl-Spezifikation erhebt
      keineswegs den Anspruch, ein aktuell und für die ferne Zukunft
      vollständige Lösung alle Problemstellungen rund um die
      Veröffentlichung parlamentarischer Informationen zu sein. Viele
      Funktionen, die denkbar und bestimmt sinnvoll wären, sind aus
      verschiedensten Gründen in dieser Version noch nicht
      berücksichtigt. Einige der Gründe, die dazu führten, ein Thema
      nicht auszuspezifizieren, waren:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Zu wenig detaillierte Anforderungen aus der Praxis
        </para>
      </listitem>
      <listitem>
        <para>
          Zu großer Arbeitsaufwand für die Spezifikations-Entwicklung
        </para>
      </listitem>
      <listitem>
        <para>
          Hohe Aufwände bei den Server-Implementierern
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Zu den Themen, die in zukünftigen Versionen adressiert werden
      können, zählen:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Loslösung von der kommunalen Ebene: Es ist möglich, dass OParl
          mit nur geringfügigen Änderungen oder Erweiterungen auch für
          die Ebene von Bundesländern (Landtage) oder des Bundes
          (Bundestag, Bundesrat) nutzbar wäre.
        </para>
      </listitem>
      <listitem>
        <para>
          Flexible Abfragemöglichkeiten für Objekte: Aufgrund der
          unklaren Anforderungslage sowie dem Bestreben möglichst wenige
          spezielle Lösungen nur für OParl zu schaffen sind in Version
          1.0 nur sehr beschränkte Möglichkeiten vorgesehen, Listen von
          Drucksachen etc. nach bestimmten Kriterien einzuschränken.
          Zukünftig könnten hier weitere Möglichkeiten definiert werden,
          bis hin zur Suche nach Stichworten in Volltexten. Ein
          möglicher Ansatz hierfür wäre die Verwendung von Linked Data
          Fragements<footnote>
            <para>
              http://linkeddatafragments.org/
            </para>
          </footnote>. Diese ermöglichen Clients mächtige Abfragen, ohne
          dabei zu übermäßiger Last auf Serverseite zu führen.
        </para>
      </listitem>
      <listitem>
        <para>
          Detaillierte Wiedergabe von Abstimmungen: Das Thema ist vom
          Datenmodell/Schema der vorliegenden Version noch nicht
          abgedeckt, da es vielerorts nicht üblich ist, Abstimmungen
          über die Fraktionsebene genau zu erfassen. Zukünftig könnte es
          ein Ziel sein, das Abstimmungsverhalten einzelner
          Parlamentarier und Fraktionen genau zu dokumentieren.
        </para>
      </listitem>
      <listitem>
        <para>
          Strukturierte Protokolle: Während Protokolle in der Praxis in
          der Regel als unstrukturierte Fließtexte angelegt werden,
          könnte eine Strukturierung der Inhalte die Nachvollziehbarkeit
          des parlamentarischen Geschehens deutlich verbessern.
        </para>
      </listitem>
      <listitem>
        <para>
          Vokabular für Drucksachentypen: In der Praxis wird eine
          Vielzahl von Drucksachentypen genutzt. Um eine
          Vergleichbarkeit, beispielsweise zwischen Anträgen, innerhalb
          der Parlamente zu schaffen, könnte zukünftig eine Erweiterung
          des OParl-Vokabulars im Sinne von Linked Data angestrebt
          werden.<footnote>
            <para>
              Das gesagte lässt sich auch auf viele andere
              Informationen, nicht nur auf Drucksachen, anwenden.
            </para>
          </footnote>
        </para>
      </listitem>
      <listitem>
        <para>
          Weitere externe Standards, insbesondere zu Paginierung: Teile
          der Spezifikation beziehen sich auf technische Anforderungen
          die nicht nur für OParl relevant sind. Das betrifft
          insbesondere die Paginierung-Mechanismen. Idealerweise sollte
          OParl hierfür externe Standards verwenden. Deshalb werden
          entsprechende Standardisierungsvorhaben wie Linked Data
          Platform Paging<footnote>
            <para>
              https://dvcs.w3.org/hg/ldpwg/raw-file/default/ldp-paging.html
            </para>
          </footnote> des W3C und das Hydra Core Vocabulary<footnote>
            <para>
              http://hydra-cg.com/spec/latest/core/#collections
            </para>
          </footnote> beobachtet.
        </para>
      </listitem>
      <listitem>
        <para>
          Mehrsprachigkeit: Die Unterstützung von mehrsprachigen
          Inhalten.
        </para>
      </listitem>
      <listitem>
        <para>
          Schreibender Zugriff: Denkbar ist auch, dass OParl von der
          derzeitigen Ausrichtung auf den reinen lesenden
          Informationszugriff um die Möglichkeit, Inhalte anzulegen, zu
          verändern und zu entfernen sowie um das Konzept von
          authentifizierten Nutzern erweitert wird.
        </para>
      </listitem>
      <listitem>
        <para>
          Internationalisierung: Es gibt in sehr vielen Ländern
          Gebietskörperschaften mit politischen Gremien, deren Prozesse
          ähnlich strukturiert sind, wie diejenigen in Deutschland. Auch
          dort besteht Bedarf an standardisierten Vokabularen zur
          Veröffentlichung parlamentarischer Informationen. Deshalb sind
          – teilweise noch vor OParl – auch weitere entsprechende
          Initiativen entstanden.<footnote>
            <para>
              Vgl. dazu beispielsweise
              <ulink url="http://popoloproject.com/">http://popoloproject.com/</ulink>,
              TODO: UK, KB Niederlande, Italienisches Parlament:
              <ulink url="http://data.camera.it/data/en/">http://data.camera.it/data/en/</ulink>
            </para>
          </footnote> Eine Zusammenarbeit mit derartigen Initiativen mit
          dem Ziel der Wiederverwendung von Arbeitsergebnissen ist
          vorstellbar.
        </para>
      </listitem>
      <listitem>
        <para>
          IT-Planungsrat: Dieser kann die Verbindlichkeit von Standards
          wie OParl für Deutschland beschliessen. Der &quot;Vertrag über
          die Errichtung des IT-Planungsrats und über die Grundlagen der
          Zusammenarbeit beim Einsatz der Informationstechnologie in den
          Verwaltungen von Bund und Ländern – Vertrag zur Ausführung von
          Artikel 91c GG&quot;<footnote>
            <para>
              http://www.it-planungsrat.de/SharedDocs/Downloads/DE/ITPlanungsrat/Staatsvertrag/Staatsvertrag.html
            </para>
          </footnote> enthält in § 3 Absatz 2 diese Aussage:
          &quot;Beschlüsse über Standards im Sinne des Absatz 1 werden
          vom IT-Planungsrat ... gefasst, soweit dies zum
          bund-länderübergreifenden Datenaustausch oder zur
          Vereinheitlichung des Datenaustauschs der öffentlichen
          Verwaltung mit Bürgern und Wirtschaft notwendig ist.&quot;
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Generell gilt auch für OParl: &quot;Completion is a state that a
      good specification never reaches before it's
      irrelevant.&quot;<footnote>
        <para>
          OGCWG - Lessons Learned:
          <ulink url="http://www.w3.org/community/oilgaschem/wiki/OGCWG_-_Lessons_Learned">http://www.w3.org/community/oilgaschem/wiki/OGCWG_-_Lessons_Learned</ulink>
        </para>
      </footnote> - Ian Hickson
    </para>
  </sect2>
  <sect2 id="nomenklatur-der-spezifikation-und-satzkonventionen">
    <title>Nomenklatur der Spezifikation und Satzkonventionen</title>
    <sect3 id="muss_soll_darf">
      <title>Zwingende, empfohlene und optionale Anforderungen</title>
      <para>
        Dieses Spezifikationsdokument nutzt die Modalverben
        <emphasis>müssen</emphasis>, <emphasis>können</emphasis> und
        <emphasis>sollen</emphasis> in einer Art und Weise, die
        bestimmte Anforderungen unmissverständlich in drei verschiedene
        Abstufung einteilen lässt. Um ihre normative Bedeutung zu
        unterstreichen, werden diese Wörter grundsätzlich in
        Großbuchstaben gesetzt.
      </para>
      <para>
        Diese Konvention ist angelehnt an die Definitionen der Begriffe
        MUST, SHOULD und MAY (bzw. MUST NOT, SHOULD NOT und MAY NOT) aus
        RFC2119.<footnote>
          <para>
            RFC2119
            <ulink url="http://tools.ietf.org/html/rfc2119">http://tools.ietf.org/html/rfc2119</ulink>
          </para>
        </footnote>
      </para>
      <para>
        Die Bedeutung im Einzelnen:
      </para>
      <variablelist>
        <varlistentry>
          <term>
            MÜSSEN/MUSS bzw. ZWINGEND:
          </term>
          <listitem>
            <para>
              Die Erfüllung einer Anforderung, die explizit vom
              Modalverb MÜSSEN bzw. MUSS Gebrauch macht, ist zwingend
              erforderlich.
            </para>
            <para>
              Die Entsprechung in RFC2119 lautet &quot;MUST&quot;,
              &quot;REQUIRED&quot; oder &quot;SHALL&quot;.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            NICHT DÜRFEN/DARF NICHT:
          </term>
          <listitem>
            <para>
              Dieses Stichwort kennzeichnet ein absolutes Verbot.
            </para>
            <para>
              Die Entsprechung in RFC2119 lautet &quot;MUST NOT&quot;
              oder &quot;SHALL NOT&quot;.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            SOLLEN/SOLL bzw. EMPFOHLEN:
          </term>
          <listitem>
            <para>
              Mit dem Wort SOLLEN bzw. SOLL sind empfohlene
              Anforderungen gekennzeichnet, die von jeder
              Implementierung erfüllt werden sollen. Eine Nichterfüllung
              ist als Nachteil zu verstehen, beispielsweise weil die
              Nutzerfreundlichkeit dadurch Einbußen erleidet, und sollte
              daher sorgfältig abgewogen werden.
            </para>
            <para>
              Die Entsprechung in RFC2119 lautet &quot;SHOULD&quot; oder
              &quot;RECOMMENDED&quot;.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            NICHT SOLLEN/SOLL NICHT bzw. NICHT EMPFOHLEN:
          </term>
          <listitem>
            <para>
              Diese Formulierung wird verwendet, wenn unter gewissen
              Umständen Gründe existieren können, die ein bestimmtes
              Verhalten akzeptabel oder sogar nützlich erscheinen
              lassen, jedoch die Auswirkung des Verhaltens vor einer
              entsprechenden Implementierung verstanden und abgewogen
              werden sollen.
            </para>
            <para>
              Die Entsprechung in RFC2119 lautet &quot;SHOULD NOT&quot;
              oder &quot;NOT RECOMMENDED&quot;.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            DÜRFEN/DARF bzw. OPTIONAL:
          </term>
          <listitem>
            <para>
              Mit dem Wort DÜRFEN bzw. DARF oder OPTIONAL sind optionale
              Bestandteile gekennzeichnet. Ein Anbieter könnte sich
              entscheiden, den entsprechenden Bestandteil aufgrund
              besonderer Kundenanforderungen zu unterstützen, während
              andere diesen Bestandteil ignorieren könnten.
              Implementierer von Clients oder Servern DÜRFEN in solchen
              Fällen NICHT davon ausgehen, dass der jeweilige
              Kommunikationspartner den entsprechenden, optionalen
              Anteil unterstützt.
            </para>
            <para>
              Die Entsprechung in RFC2119 lautet &quot;MAY&quot; oder
              &quot;OPTIONAL&quot;.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect3>
    <sect3 id="geschlechterspezifische-begrifflichkeiten">
      <title>Geschlechterspezifische Begrifflichkeiten</title>
      <para>
        Um bei Begriffen wie Nutzer, Anwender, Betreiber etc. die sonst
        übliche Dominanz der männlichen Variante zu vermeiden, werden in
        diesem Dokument männliche oder weibliche Varianten gemischt. Es
        wird also beispielsweise mal von einer Nutzerin gesprochen und
        mal von einem Nutzer. Gemeint sind in allen Fällen Personen
        jeglichen Geschlechts.
      </para>
    </sect3>
    <sect3 id="codebeispiele">
      <title>Codebeispiele</title>
      <para>
        Die in diesem Dokument aufgeführten Codebeispiele dienen der
        Veranschaulichung der beschriebenen Prinzipien. Es handelt sich
        in der Regel um frei erfundene Daten.
      </para>
      <para>
        Codebeispiele erheben insbesondere bei JSON-Code nicht den
        Anspruch auf hundertprozentige syntaktische Korrektheit.
        Insbesondere können in Codebeispielen Auslassungen vorkommen,
        die mit <literal>...</literal> gekennzeichnet werden. Darüber
        hinaus werden zugunsten der einfacheren Lesbarkeit Umlaute
        verwendet, obwohl OParl grundsätzlichlich die Verwendung von
        Unicode-Zeichneketten vorsieht.
      </para>
    </sect3>
  </sect2>
  <sect2 id="initiatoren">
    <title>Initiatoren</title>
    <para>
      OParl wurde initiiert von Marian Steinbach<footnote>
        <para>
          <ulink url="http://www.sendung.de/">http://www.sendung.de/</ulink>
        </para>
      </footnote>, Jens Klessmann<footnote>
        <para>
          <ulink url="http://www.fokus.fraunhofer.de/">http://www.fokus.fraunhofer.de/</ulink>
        </para>
      </footnote>, Marianne Wulff und Christine Siegfried<footnote>
        <para>
          beide Vitako
          <ulink url="http://www.vitako.de/">http://www.vitako.de/</ulink>
        </para>
      </footnote>.
    </para>
  </sect2>
  <sect2 id="unterstützer">
    <title>Unterstützer</title>
    <para>
      Die folgenden Organisationen und Unternehmen zählen zu den
      Unterstützern von OParl:
    </para>
    <informaltable>
      <tgroup cols="2">
        <colspec align="left" />
        <colspec align="left" />
        <thead>
          <row>
            <entry>
              Organisation/Firma
            </entry>
            <entry>
              Kategorie
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <ulink url="http://www.cc-egov.de/">CC e-Gov GmbH</ulink>
            </entry>
            <entry>
              RIS-Hersteller
            </entry>
          </row>
          <row>
            <entry>
              <ulink url="http://www.citeq.de/">Citeq</ulink> (Münster)
            </entry>
            <entry>
              Kommunale Dienstleister
            </entry>
          </row>
          <row>
            <entry>
              <ulink url="http://www.itdz-berlin.de/">ITDZ
              Berlin</ulink>
            </entry>
            <entry>
              Kommunale Dienstleister
            </entry>
          </row>
          <row>
            <entry>
              <ulink url="http://www.rz-kiru.de/">Kiru</ulink> (Ulm)
            </entry>
            <entry>
              Kommunale Dienstleister
            </entry>
          </row>
          <row>
            <entry>
              <ulink url="http://www.kdvz-frechen.de/">KDVZ
              Rhein-Erft-Rur</ulink>
            </entry>
            <entry>
              Kommunale Dienstleister
            </entry>
          </row>
          <row>
            <entry>
              <ulink url="http://www.krzn.de/">KRZN</ulink>
            </entry>
            <entry>
              Kommunale Dienstleister
            </entry>
          </row>
          <row>
            <entry>
              <ulink url="http://okfn.de/">Open Knowledge Foundation e.
              V.</ulink>
            </entry>
            <entry>
              Initiativen
            </entry>
          </row>
          <row>
            <entry>
              <ulink url="http://openruhr.de/">OpenRuhr</ulink>
            </entry>
            <entry>
              Initiativen
            </entry>
          </row>
          <row>
            <entry>
              <ulink url="http://www.abgeordnetenwatch.de/">Parlamentwatch
              e. V.</ulink>
            </entry>
            <entry>
              Initiativen
            </entry>
          </row>
          <row>
            <entry>
              <ulink url="http://www.piratenpartei.de/">Piratenpartei</ulink>
            </entry>
            <entry>
              Initiativen
            </entry>
          </row>
          <row>
            <entry>
              <ulink url="http://www.provox.de/">PROVOX Systemplanung
              GmbH</ulink>
            </entry>
            <entry>
              RIS-Hersteller
            </entry>
          </row>
          <row>
            <entry>
              <ulink url="http://www.quinscape.de/">QuinScape
              GmbH</ulink>
            </entry>
            <entry>
              RIS-Hersteller
            </entry>
          </row>
          <row>
            <entry>
              <ulink url="http://www.regioit-aachen.de/">regioIT</ulink>
              (Aachen)
            </entry>
            <entry>
              Kommunale Dienstleister
            </entry>
          </row>
          <row>
            <entry>
              <ulink url="http://www.somacos.de/">Somacos GmbH und Co.
              KG</ulink>
            </entry>
            <entry>
              RIS-Hersteller
            </entry>
          </row>
          <row>
            <entry>
              <ulink url="http://www.bonn.de/">Stadt Bonn</ulink>
            </entry>
            <entry>
              Kommune
            </entry>
          </row>
          <row>
            <entry>
              <ulink url="http://www.stadt-koeln.de/">Stadt Köln</ulink>
            </entry>
            <entry>
              Kommune
            </entry>
          </row>
          <row>
            <entry>
              <ulink url="http://www.moers.de/">Stadt Moers</ulink>
            </entry>
            <entry>
              Kommune
            </entry>
          </row>
          <row>
            <entry>
              <ulink url="http://www.sitzungsdienst.net/">Sternberg
              Software-Technik GmbH</ulink>
            </entry>
            <entry>
              RIS-Hersteller
            </entry>
          </row>
          <row>
            <entry>
              <ulink url="http://www.wikimedia.de/">Wikimedia
              Deutschland</ulink>
            </entry>
            <entry>
              Initiativen
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </sect2>
  <sect2 id="autoren">
    <title>Autoren</title>
    <para>
      An diesem Dokument haben mitgewirkt:
    </para>
    <para>
      Jayan Areekadan, Felix Ebert, Jan Erhardt, Jens Klessmann, Andreas
      Kuckartz, Babett Schalitz, Ralph Sternberg, Marian Steinbach,
      Bernd Thiem, Thomas Tursics, Jakob Voss
    </para>
  </sect2>
</sect1>
<sect1 id="architektur">
  <title>Architektur</title>
  <para>
    In diesem Abschnitt werden grundlegenden Konzepte, die von OParl
    abgedeckt werden, erläutert. Die Erläuterungen sind nicht im engeren
    Sinne Teil der Spezifikation, sondern dienen dazu, die
    Anwendungsbereiche von OParl und die Funktionen einer
    OParl-konformen API verständlicher und konkreter beschreiben zu
    können.
  </para>
  <para>
    Da die Architektur auf der generellen Architektur des World Wide Web
    (WWW) aufbaut, sind einzelne Konzepte direkt den Begriffen der
    Architekturbeschreibung des W3-Konsortiums entlehnt.<footnote>
      <para>
        Architecture of the World Wide Web, Volume One.
        <ulink url="http://www.w3.org/TR/webarch/">http://www.w3.org/TR/webarch/</ulink>
      </para>
    </footnote>
  </para>
  <sect2 id="überblick">
    <title>Überblick</title>
    <figure>
      <title>Architekturdiagramm</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/architektur-ueberblick.png" />
        </imageobject>
        <textobject><phrase>Architekturdiagramm</phrase></textobject>
      </mediaobject>
    </figure>
  </sect2>
  <sect2 id="parlamentarisches_infosystem">
    <title>Parlamentarisches Informationssystem</title>
    <para>
      Parlamentarische Informationssysteme sind Software-Systeme, die
      von verschiedensten Körperschaften eingesetzt werden, um die
      Zusammenarbeit von Parlamenten zu organisieren, zu dokumentieren
      und öffentlich nachvollziehbar zu machen. Zu den Körperschaften
      können beispielsweise Kommunen, Landkreise, Regierungsbezirke und
      Zweckverbände gehören.
    </para>
    <para>
      Diese Systeme unterstützen in der Regel mehrere der folgenden
      Funktionen:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Das Erzeugen, Bearbeiten und Darstellen von Sitzungen und
          deren Tagesordnung
        </para>
      </listitem>
      <listitem>
        <para>
          Das Erzeugen und Abrufen von Sitzungsprotokollen
        </para>
      </listitem>
      <listitem>
        <para>
          Das Erzeugen, Bearbeiten und Anzeigen von Drucksachen
        </para>
      </listitem>
      <listitem>
        <para>
          Das Erzeugen, Bearbeiten und Anzeigen von Gremien und deren
          Mitgliedern
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Funktionen, die die Eingabe und Bearbeitung von Daten betreffen,
      sind in der Regel einem geschlossenen Nutzerkreis vorbehalten. Die
      Darstellung und der Abruf von Informationen und Dokumenten
      hingegen ist in vielen Fällen für die Öffentlichkeit freigegeben.
    </para>
    <para>
      Die OParl-Spezifikation beschreibt eine Schnittstelle, die den
      maschinellen, lesenden Zugriff auf derartige Informationen
      ermöglicht.
    </para>
  </sect2>
  <sect2 id="server">
    <title>Server</title>
    <para>
      Der Server im Sinne dieser Spezifikation ist ein Software-Dienst,
      der auf einem mit dem Internet verbundenen Rechnersystem läuft.
      Dieser Dienst ist eine spezielle Form eines WWW- bzw.
      HTTP(S)-Servers. Entsprechend beantwortet der Server
      HTTP-Anfragen, die an ihn auf einem bestimmten TCP-Port gestellt
      werden.
    </para>
    <para>
      Der Server ist als Bestandteil des parlamentarischen
      Informationssystems zu verstehen. Der Betrieb des Servers steht
      damit üblicherweise in der Verantwortung desjenigen, der das
      parlamentarischen Informationssystem betreibt.
    </para>
    <para>
      Von einem Server, der die OParl-Spezifikation erfüllt, wird
      erwartet, dass er bestimmte parlamentarische Informationen in
      einem bestimmten Format zur Verfügung stellt und auf bestimmte
      Anfragen von so genannten Clients über die OParl-API entsprechend
      dieser Spezifikation reagiert.
    </para>
  </sect2>
  <sect2 id="api">
    <title>API</title>
    <para>
      Der Begriff API steht in diesem Dokument für die
      Webservice-Schnittstelle, die der Server anbietet. Die
      Schnittstelle basiert auf dem HTTP-Protokoll. Mittels HTTPS ist
      die verschlüsselte Nutzung der API möglich, sofern Server dies
      unterstützen.
    </para>
    <para>
      Die API steht im Mittelpunkt dieser Spezifikation. Server und
      Clients sind als Kommunikationspartner zu verstehen, die über das
      Internet als Kommunikationskanal mit einander kommunizieren
      können. Die API-Spezifikation stellt dabei die nötige Grammatik
      und das Vokabular bereit, anhand dessen eine sinnvolle
      Kommunikation erfolgen kann.
    </para>
  </sect2>
  <sect2 id="client">
    <title>Client</title>
    <para>
      Der Begriff &quot;Client&quot; steht für eine Software, die über
      die OParl-API mit dem Server kommuniziert. Da die API auf dem
      HTTP-Protokoll aufbaut, handelt es sich bei dem Client um eine
      spezielle Form eines HTTP-Clients.
    </para>
  </sect2>
  <sect2 id="cache">
    <title>Cache</title>
    <para>
      Ein Cache ist ein Speicher, der einem Client dazu dienen kann, von
      einem Server abgerufene Informationen längerfristig vorzuhalten.
      Dies kann beispielsweise dazu dienen, mehrfache Anfragen der
      selben Informationen zu vermeiden, wodurch sowohl Ressourcen auf
      Seite des Servers geschont als auch die Nutzung von
      Netzwerkbandbreite reduziert werden kann. Die Nutzung eines Cache
      kann auch zur Verbesserung der Nutzerfreundlichkeit eines Clients
      beitragen, indem Wartezeiten zur Bereitstellung einer Ressource
      verkürzt werden.
    </para>
  </sect2>
  <sect2 id="nutzerin">
    <title>Nutzerin oder Nutzer</title>
    <para>
      Mit einer Nutzerin oder einem Nutzer ist in diesem Fall eine
      natürliche Person gemeint, die mittels eines OParl-Clients auf
      parlamentarische Informationen zugreift.
    </para>
  </sect2>
  <sect2 id="objekt">
    <title>Objekt</title>
    <para>
      Der Server beantwortet Anfragen eines Clients im Regelfall, indem
      bestimmte Objekte ausgegeben werden. Objekte sind im Fall einer
      OParl-konformen API JSON-Objekte, die das Schema einhalten, das in
      der vorliegenden Spezifikation beschrieben wird. Antworten des
      Servers können einzelne Objekte, Listen von Objekten oder Listen
      von URLs von Objekten enthalten.
    </para>
  </sect2>
</sect1>
<sect1 id="nutzungsszenarien">
  <title>Nutzungsszenarien</title>
  <para>
    Die nachfolgenden Nutzungsszenarien dienen dazu, die Architektur und
    die Anwendungsmöglichkeiten anhand konkreter Beispiele zu
    verdeutlichen. Sie erheben keinen Anspruch auf Vollständigkeit.
  </para>
  <para>
    Überblick der Szenarien:
  </para>
  <orderedlist numeration="arabic" spacing="compact">
    <listitem>
      <para>
        Mobile Client-Anwendung
      </para>
    </listitem>
    <listitem>
      <para>
        Integration in Web-Portal
      </para>
    </listitem>
    <listitem>
      <para>
        Meta-Suche
      </para>
    </listitem>
    <listitem>
      <para>
        Forschungsprojekt Themen- und Sprachanalyse
      </para>
    </listitem>
  </orderedlist>
  <sect2 id="szenario_mobile_client">
    <title>Szenario 1: Mobile Client-Anwendung</title>
    <para>
      Eine <link linkend="client">Client</link>-Anwendung für mobile
      Endgeräte wie Smartphones und Tablets, nachfolgend &quot;App&quot;
      genannt, könnte das Ziel verfolgen, Nutzern unterwegs sowie
      abseits vom Desktop-PC auf die Gegebenheiten mobiler Endgeräte
      optimierten Lesezugriff auf Dokumente aus parlamentarischen
      Informationssystemen zu bieten. Die möglichen Kontexte und
      Nutzungsmotivationen sind vielfältig:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Teilnehmer einer Sitzung greifen während der Sitzung auf die
          Einladung dieser Sitzung und die zur Tagesordnung der Sitzung
          gehörenden Drucksachen zu, außerdem auf die Protokolle
          vorheriger Sitzungen.
        </para>
      </listitem>
      <listitem>
        <para>
          Eine Redakteurin der Lokalpresse geht unterwegs die Themen der
          nächsten Sitzungen bestimmter Gremien, für die sie sich
          besonders interessiert, durch.
        </para>
      </listitem>
      <listitem>
        <para>
          Eine Gruppe von Studierenden erkundet zusammen mit ihrem
          Dozenten die lokalpolitischen Aktivitäten des Viertels rund um
          ihre Hochschule. Dazu nutzen sie die GPS-Lokalisierung ihrer
          Smartphones in Verbindung mit den Geodaten, die an vielen
          Drucksachen des lokalen RIS zu finden sind. Direkt vor Ort an
          einer Baustelle öffnen sie Beschlüsse, Pläne und Eingaben aus
          dem Planfeststellungsverfahren, die dieser Baustelle voran
          gegangen sind.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Zur Realisierung derartiger Szenarien können die Fähigkeiten von
      OParl-kompatiblen Servern mit den besonderen Eigenschaften der
      mobilen Endgeräte verknüpft werden.
    </para>
    <para>
      Smartphones und Tablets verfügen beispielsweise, je nach
      Aufenthaltsort, über sehr unterschiedlich gute Internetanbindung.
      In einem Büro oder zuhause können Nutzer über ein WLAN Daten mit
      hoher Bandbreite austauschen, in Mobilfunknetzen vor allem
      außerhalb der Ballungsgebiete jedoch sinken die Bandbreiten
      deutlich. Einige Tablets werden sogar ohne Möglichkeit zur
      Mobilfunk-Datenübertragung genutzt. In solchen Fällen kann ein
      <link linkend="cache">Cache</link> auf dem Endgerät dazu dienen,
      Inhalte vorzuhalten, die dann auch bei langsamer oder fehlender
      Internetverbindung zur Verfügung stehen. Sobald dann wieder eine
      Verbindung mit hoher Bandbreite bereit steht, kann die App im
      Hintergrund, entweder über die <link linkend="feeds">Feeds</link>
      der OParl API oder über den einzelnen Abruf von Objekten, die
      gecachten Inhalte aktualisieren.
    </para>
    <para>
      Eine Stärke eines mobilen Clients ist auch die Möglichkeit der
      Personalisierung, also der Anpassung auf die Bedürfnisse und
      Interessen der Nutzerin oder des Nutzers. Es wäre beispielsweise
      denkbar, dass eine Nutzerin die parlamentarischen
      Informationssysteme, für die sie sich interessiert, dauerhaft in
      der App einrichtet und eine Favoritenliste der Gremien, die ihre
      bevorzugten Themengebiete behandeln, hinterlegt. Die App könnte
      aufgrund dieser Favoritenliste eigenständig über die API nach
      neuen Sitzungsterminen, Tagesordnungspunkten, Drucksachen und
      Dokumente suchen. Taucht dabei ein neues Objekt auf, wird die
      Nutzerin darüber benachrichtigt. Sie kann dann beispielsweise
      entscheiden, Dokumente direkt zu öffnen oder für den späteren
      Offline-Zugriff zu speichern.
    </para>
    <para>
      Einem derartigen Szenario kommt das Graph-orientierte Datenmodell
      der OParl-API entgegen. Ausgehend von einer Sitzung eines
      bestimmten Gremiums beispielsweise ist es damit einfach möglich,
      die in Verbindung stehenden Mitglieder des Gremiums, Teilnehmer
      der Sitzung, Tagesordnungspunkte der Sitzung oder Drucksachen zu
      den Tagesordnungspunkten und letztlich Dokumente zu Drucksachen
      und Sitzung abzurufen.
    </para>
    <para>
      Für die Nutzer einer mobilen Client-Anwendung könnte es sich als
      besonders hilfreich erweisen, wenn Dokumente auf dem Server in
      verschiedenen Formaten zur Verfügung gestellt werden. Denn nicht
      jedes Endgerät mit kleinem Bildschirm bietet eine
      nutzerfreundliche Möglichkeit, beispielsweise Dokumente im weit
      verbreiteten PDF-Format darzustellen. Hier könnte schon der
      Entwickler der mobilen App Mechanismen vorsehen, die, sofern
      vorhanden, besser geeignete Formate wie z. B. HTML abrufen.
    </para>
    <para>
      Neben dem kleinen Display kann für einige mobile Endgeräte auch
      die im Vergleich zu einem zeitgemäßen Desktop-PC geringere
      CPU-Leistung eine Einschränkung darstellen. Solchen Geräten kommt
      es besonders entgegen, wenn der Server zu allen Dokumenten auch
      den reinen Textinhalt abrufbar macht, der dann beispielsweise für
      eine Volltextsuche auf dem Endgerät indexiert werden kann. So
      wiederum kann auf dem Client eine Suchfunktion realisiert werden,
      welche die OParl-API selbst nicht zur Verfügung stellt.
    </para>
    <para>
      Eine solche Suchfunktion kann auch über die reine Volltextsuche
      und über die Suche mittels Text- oder Spracheingabe hinaus gehen.
      Denn ein Client könnte von einem
      <link linkend="server">Server</link>-System, das Drucksachen mit
      Geoinformationen anbietet, diese abrufen und räumlich indexieren.
      Anhand der Position des Geräts, die mittels GPS genau bestimmt
      werden kann, könnte so der lokale Cache nach Objekten in der
      Umgebung durchsucht werden. Das Ergebnis könnte auf einer Karte
      dargestellt oder in einer Ergebnisliste angezeigt werden, die z.
      B. nach Distanz zum Objekt sortiert werden kann.
    </para>
  </sect2>
  <sect2 id="szenario_web_portal">
    <title>Szenario 2: Integration in Web-Portal</title>
    <para>
      Portallösungen bieten den Betreibern die Möglichkeit, Inhalte auf
      einer einheitlichen Weboberfläche zu veröffentlichen, die aus
      verschiedensten Quellen und Plattformen bereitgestellt werden.
      Inhalte werden dabei häufig als sogenannte &quot;Portlets&quot; in
      Seiten integriert.
    </para>
    <para>
      Ein Beispiel für die Realisierung eines solchen
      Integrations-Ansatzes wäre eine Kommune, die für ihre allgemeine
      Website eine Portallösung einsetzt und hier auch Inhalte aus dem
      kommunalen Ratsinformationssystem einspeisen und darstellen
      möchte. Die Inhalte könnten als Module mit anderen Inhalten,
      beispielsweise aus einem Web Content Management System (WCMS),
      gemeinsam auf einer Seite dargestellt werden.
    </para>
    <para>
      Eine Seite über den Gemeinderat beispielsweise könnte durch ein
      Portlet ergänzt werden, in dem die nächsten Sitzungstermine des
      Gemeinderats aufgelistet werden. Eine Pressemeldung über ein
      bestimmtes Bauvorhaben, in dem ein Beschluss erwähnt wird, könnte
      direkt ein Portlet mit einer Detailansicht der entsprechenden
      Drucksache einbinden.
    </para>
    <para>
      Die Portlets, die von einem Portalserver zur Verfügung gestellt
      werden, stellen damit im Sinne der OParl-Architektur Clients dar.
      Je nach Performanz und Anforderungen im Einzelfall könnten diese
      Client mit eigenen Caches arbeiten oder aber direkt auf den
      jeweiligen OParl-Server zugreifen.
    </para>
    <para>
      Vorteil einer solchen Einbindung, also der kontextbezogenen
      Darstellung von parlamentarischen Informationen im Gegensatz zu
      einem monolitischen parlamentarischen Informationssystem könnte
      sein, dass Nutzer in einer gewohnten und akzeptierten Oberfläche
      jeweils die relevanten Informationen erhalten, ohne sich an die
      ungewohnte Umgebung eines parlamentarischen Informationssystems
      gewöhnen zu müssen.
    </para>
    <para>
      Die denkbaren Szenarien einer solchen Integration beschränken sich
      nicht auf anonyme Nutzer von öffentlichen Websites. In einem
      authentifizierten Umfeld wie beispielsweise einem kommunalen
      Intranet oder Extranet lassen sich weitere Arten von Portlets und
      damit Mehrwerte für die Nutzer realisieren. So könnte
      beispielsweise eine eingeloggte Nutzerin eine personalisierte
      Liste der Sitzungstermine, zu der sie eingeladen ist, angezeigt
      bekommen.
    </para>
    <para>
      Die Standardisierung durch OParl sorgt im Rahmen der
      Portal-Szenarios dazu, dass Portlets, die für ein bestimmtes
      parlamentarisches Informationssystem entwickelt wurden, leichter
      auf andere Systeme – auch verschiedener Anbieter – ausgeweitet
      werden können, sofern diese ebenfalls OParl-konform sind. Dies
      ermöglicht es beispielsweise verschiedenen Kommunen, bei der
      Entwicklung von Portlets zusammenzuarbeiten und ihre Ergebnisse
      auszutauschen. Denkbar sind auch Portlet-Entwicklungen als
      Open-Source-Projekte.
    </para>
  </sect2>
  <sect2 id="szenario_meta_suche">
    <title>Szenario 3: Meta-Suche</title>
    <para>
      Die Ermöglichung einer nutzerfreundlichen Suche, die damit
      verbundene Indexierung von verschiedensten Dokumenteninhalten und
      die Kategorisierung von Inhalten kann eine sowohl konzeptionell
      als auch technisch anspruchsvolle Aufgabe sein. Auch im Hinblick
      auf die Server-Ressourcen sind damit nennenswerte Aufwände
      verbunden. Andererseits liegt auf der Hand, dass die effiziente
      Arbeit mit großen Informationsmengen nach intelligenten
      Möglichkeiten der Einschränkung von Informationsmengen auf jeweils
      im Anwendungsfall relevante Treffer verlangt. Beispiel wäre ein
      Nutzer, der sich für alle Dokumente zum Thema Kreisverkehre
      interessiert. Die OParl-Spezifikation sieht keine Methoden vor,
      wie die Ausgabe des Servers schon bei der Anfrage von Dokumenten
      derart beschränkt werden können. Damit ist die Realisation von
      Such- und Filtermechanismen im OParl-Umfeld eine Aufgabe, die bis
      auf weiteres lediglich auf Seite der Clients angeboten werden
      kann.
    </para>
    <para>
      Angelehnt an das seit den Anfängen des Webs etablierte Modell der
      externen Web-Suchmaschine sind spezielle Suchmaschinen für
      OParl-konforme parlamentarische Informationssysteme denkbar. Diese
      können auch von dritten, beispielsweise zivilgesellschaftlichen
      Organisationen betrieben werden, die nicht Betreiber des
      Server-Systems sind. Solche Plattformen treten gegenüber dem
      OParl-Server als Client auf und rufen bestimmte oder sämtliche
      Informationen, die das System bereit hält, ab. Vorbild sind die
      Robots oder Spider von Web-Suchmaschinen. Die abgerufenen
      Informationen können dann indexiert und je nach Anforderungen für
      eine gezielte Suche weiterverarbeitet werden.
    </para>
    <para>
      Dieses Modell ist grundsätzlich nicht auf einzelne OParl-Server
      oder einzelne Körperschaften beschränkt. Vielmehr könnte der
      Betreiber einer solchen Suchmaschine sich entschließen, die
      Informationen aus mehreren OParl-konformen Systemen zu indexieren.
      Nutzern könnte entweder angeboten werden, die Suche auf bestimmte
      Körperschaften, beispielsweise auf eine bestimmte Kommune, zu
      beschränken, oder ohne Beschränkung über alle angebotenen
      Körperschaften zu suchen.<footnote>
        <para>
          Daher der Begriff Meta-Suche
        </para>
      </footnote>
    </para>
    <para>
      Daraus ergeben sich vielfältige Anwendungsszenarien, die hier
      beispielhaft beschrieben werden:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Eine Mitarbeiterin eines regionalen Zweckverbands hat die
          Aufgabe, Ratsvorgänge in den Mitgliedskommunen mit Relevanz
          für die Aufgaben des Verbandes im Blick zu behalten. Sie nutzt
          dafür ein regionales Internetportal, in dem die Inhalte der
          OParl-konformen parlamentarischen Informationssysteme der
          Mitgliedskommunen durchsuchbar sind. Um die Suche zu
          vereinfachen, hat sie einzelne Schlagwörter abonniert, zu
          denen sie automatisch über neue Vorgänge informiert wird.
        </para>
      </listitem>
      <listitem>
        <para>
          Ein Einwohner eines Ballungsraums will sich über aktuelle
          Vorgänge rund um seine Mietwohnung in Stadt A, sein
          Gartengrundstück in einer Kleingartenkolonie in der
          Nachbarstadt B und seinen Arbeitsplatz in Stadt C auf dem
          Laufenden halten. Dazu abonniert er im regionalen
          Meta-Such-Portal parlamentarische Vorgänge mit räumlichem
          Bezug zu diesen drei Standorten und wird so automatisch über
          neue Aktivitäten informiert, die Relevanz für ihn haben
          könnten.
        </para>
      </listitem>
      <listitem>
        <para>
          Eine Landespolitikerin möchte einfacher über die politischen
          Aktivitäten ihrer Parteikollegen in den Rathäusern des
          Bundeslandes informiert werden. Dazu nutzt sie ein
          Internetportal, in dem die Informationen aus den
          parlamentarischen Informationssystemen mit OParl-Schnittstelle
          im Land zusammengeführt werden. Dort hat sie sich Abonnements
          zu einzelnen Lokalpolitikern eingerichtet und wird automatisch
          über ihre Teilnahme an Gremiensitzungen und die Themen dieser
          Sitzungen informiert.
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
  <sect2 id="szenario_forschung">
    <title>Szenario 4: Forschungsprojekt Themen- und
    Sprachanalyse</title>
    <para>
      In einem Forschungsprojekt sollen Pro- und Contra-Argumentationen
      bei Ratsdiskussionen zum Ausbau von Stromtrassen identifiziert
      werden. Über die Analyse in mehreren Gebietskörperschaften sollen
      die gefundenen Argumentationen zu wiederkehrenden Mustern
      verdichtet werden und festgestellt werden, wie diese Muster
      regional abweichen.
    </para>
    <para>
      Dazu nutzen die Mitarbeitenden des Forschungsprojektes die
      OParl-Schnittstellen der parlamentarischen Informationssysteme
      aller Kommunen entlang der geplanten überregionalen Trassen. Über
      diese einheitlichen Schnittstellen können sie insbesondere die
      relevanten Wortprotokolle abrufen und zum Beispiel in einem
      Werkzeug zur qualitativen Datenanalyse lokal verarbeiten. Im
      Ergebnis ließe sich auch erkennen, wie ähnlich oder wie
      unterschiedlich die Argumente in rhetorischer Hinsicht vorgetragen
      werden.
    </para>
  </sect2>
</sect1>
<sect1 id="prinzipien-und-funktionen-des-schnittstelle">
  <title>Prinzipien und Funktionen des Schnittstelle</title>
  <para>
    In diesem Kapitel werden grundlegende Funktionsprinzipien einer
    OParl-Schnittstelle beschrieben.
  </para>
  <sect2 id="designprinzipien">
    <title>Designprinzipien</title>
    <sect3 id="aufbauen-auf-gängiger-praxis">
      <title>Aufbauen auf gängiger Praxis</title>
      <para>
        Grundlage für die Erarbeitung der OParl-Spezifikation in der
        vorliegenden Version ist eine Analyse von aktuell (2012 bis
        2014) in Deutschland etablierten parlamentarischen
        Informationssystemen und ihrer Nutzung. Erklärtes Ziel für diese
        erste Version ist es, mit möglichst geringem Entwicklungsaufwand
        auf Seite der Softwareanbieter und Migrationsaufwand auf Seite
        der Betreiber zu einer Bereitstellung von parlamentarischen
        Informationen über eine OParl-API zu gelangen. Hierbei war es
        von entscheidender Bedeutung, dass sich die Informationsmodelle
        der einschlägigen Softwareprodukte stark ähneln. Für die
        OParl-Spezifikation wurde sozusagen ein Datenmodell als
        &quot;gemeinsamer Nenner&quot; auf Basis der gängigen Praxis
        beschrieben.
      </para>
    </sect3>
    <sect3 id="verbesserung-gegenüber-dem-status-quo-wo-möglich">
      <title>Verbesserung gegenüber dem Status Quo wo möglich</title>
      <para>
        Dort, wo es dem Ziel der einfachen Implementierbarkeit und der
        einfachen Migration nicht im Weg steht, erlauben sich die
        Autoren dieser Spezifikation, auch Funktionen aufzunehmen, die
        noch nicht als gängige Praxis im Bereich der
        Ratsinformationssysteme bezeichnet werden können oder welche nur
        von einzelnen Systemen unterstützt werden. Solche Funktionen
        sind dann so integriert, dass sie nicht als zwingende
        Anforderung gelten.
      </para>
      <para>
        Ein Beispiel für eine derartige Funktion ist die Abbildung von
        Geodaten im Kontext von Drucksachen
        (<literal>oparl:Paper</literal>), um beispielsweise die Lage
        eines Bauvorhabens, das in einer Beschlussvorlage behandelt
        wird, zu beschreiben. Zwar ist den Autoren nur ein einziges
        parlamentarisches Informationssystem<footnote>
          <para>
            Das Ratsinformationssystem BoRis, eine Eigenentwicklung der
            Stadt Bonn
            <ulink url="http://www2.bonn.de/bo_ris/ris_sql/agm_index.asp">http://www2.bonn.de/bo_ris/ris_sql/agm_index.asp</ulink>
          </para>
        </footnote> in Deutschland bekannt, das Geoinformationen – und
        zwar in Form von Punktdaten, also einer Kombination aus Längen-
        und Breitengradangaben – mit Dokumenten verknüpft. Der Vorteil
        dieser Funktion ist jedoch anhand zahlreicher
        Anwendungsszenarien belegbar. Somit ist der vorliegenden
        OParl-Spezifikation die Möglichkeit beschrieben,
        Geodaten-Objekte einzubetten.
      </para>
      <para>
        Die Angabe eines einzelnen Punktes ist dabei nur ein einfacher
        Sonderfall. Die Spezifikation erlaubt auch die Kodierung von
        mehreren Objekten, die Punkte, Linien oder Polygone
        repräsentieren können. Vgl. dazu
        <literal>oparl:Location</literal>.
      </para>
      <para>
        Auch die Ausgabe einer Nur-Text-Version im Kontext des Dokuments
        (<literal>oparl:File</literal>), das den barrierefreien Zugriff
        auf Inhalte oder Indexierung für Volltextsuchfunktionen deutlich
        vereinfacht, ist eine Möglichkeit, die in der gängigen Praxis
        noch nicht zu finden ist. Ebenso die Möglichkeit, Beziehungen
        zwischen einzelnen Dokumenten herzustellen, um so von einem
        Dokument zu anderen Dokumenten mit identischem Inhalt, aber in
        anderen technischen Formaten zu verweisen, etwa von einer
        ODT-Datei zu einer PDF-Version.
      </para>
    </sect3>
    <sect3 id="restful">
      <title>RESTful</title>
      <para>
        Die Bezeichnung &quot;REST&quot; (für &quot;Representational
        State Transfer&quot;) wurde im Jahr 2000 von Roy Fielding
        eingeführt<footnote>
          <para>
            Fielding, Roy: Architectural Styles and the Design of
            Network-based Software Architectures,
            <ulink url="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm</ulink>
          </para>
        </footnote>. Die Definition von Fielding reicht sehr weit und
        berührt viele Details. In der Praxis wird der Begriff häufig
        genutzt, um eine Schnittstelle zu beschreiben,
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            die auf WWW-Technologie aufbaut, insbesondere dem
            HTTP-Protokoll
          </para>
        </listitem>
        <listitem>
          <para>
            die darauf beruht, dass mittels URL einzelne Ressourcen oder
            Zustände vom Client abgerufen werden können.
          </para>
        </listitem>
        <listitem>
          <para>
            die zustandslos ist. Das bedeutet, die Anfrage eines Clients
            an den Server enthält alle Informationen, die notwendig
            sind, um die Anfrage zu verarbeiten. Auf dem Server wird
            kein Speicher zur Verfügung gestellt, um beispielsweise den
            Zustand einer Session zu speichern.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Diese Prinzipien macht sich auch OParl zunutze. Damit gilt
        prinzipiell, dass eine OParl-konforme Server-Schnittstelle auch
        als &quot;RESTful&quot; gelten darf.
      </para>
    </sect3>
    <sect3 id="selbstbeschreibungsfähigkeit">
      <title>Selbstbeschreibungsfähigkeit</title>
      <para>
        Ausgaben des Servers sollten so beschaffen sein, dass sie für
        menschliche Nutzerinnen weitgehend selbsterklärend sein können.
        Dies betrifft besonders die Benennung von Objekten und
        Objekteigenschaften.
      </para>
      <para>
        Aber auch für die maschinelle Verarbeitung der Daten durch
        Clients kann die Selbstbeschreibung wichtig sein. Dies stellt
        allerdings erhöhte Anforderungen an die verwendeten
        Datenformate, da dafür formalisierte semantische Informationen
        enthalten sein müssen.
      </para>
      <para>
        Um den Kreis der Entwicklerinnen und Entwickler, die mit einer
        OParl-API arbeiten können, nicht unnötig einzuschränken, wird
        hierbei grundsätzlich auf englischsprachige Begrifflichkeiten
        gesetzt.
      </para>
    </sect3>
    <sect3 id="erweiterbarkeit">
      <title>Erweiterbarkeit</title>
      <para>
        Implementierer sollen in der Lage sein, über eine OParl-konforme
        Schnittstelle auch solche Informationen auszugeben, die nicht im
        Rahmen des OParl-Schemas abgebildet werden können. Dies bedeutet
        zum einen, dass ein System Objekttypen unterstützen und
        ausliefern darf, die nicht (oder noch nicht) im OParl-Schema
        beschrieben sind. Das bedeutet auch, dass Objekttypen so um
        eigene Eigenschaften erweitert werden können, die nicht im OParl
        Schema beschrieben sind.
      </para>
      <para>
        Ein weiterer Aspekt betrifft die Abwärtskompatibilität, also die
        Kompatibilität von OParl-Clients mit zukünftigen Schnittstellen.
        So können beispielsweise zukünftige Erweiterungen des
        OParl-Schemas, etwa um neue Objekttypen, genau so durchgeführt
        werden, wie die Erweiterungen um herstellerspezifische
        Objekttypen. Ein Client muss diese Anteile nicht auswerten,
        sofern sie nicht für die Aufgabe des Clients relevant sind.
      </para>
    </sect3>
    <sect3 id="browseability_verlinkung">
      <title>Browseability/Verlinkung</title>
      <para>
        Klassische Webservice-Schnittstellen erfordern von den
        Entwicklern vollständige Kenntnis der angebotenen
        Einstiegspunkte und Zugriffsmethoden, gepaart mit sämtlichen
        unterstützten URL-Parametern, um den vollen Funktionsumfang der
        Schnittstelle ausschöpfen zu können.
      </para>
      <para>
        Parlamentarische Informationen sind weitgehend in Form von
        Graphen aufgebaut. Das bedeutet, dass Objekte häufig mit einer
        Vielzahl anderer Objekte verknüpft sind. So ist eine Person
        beispielsweise Mitglied in mehreren Gremien, das Gremium hat
        mehrere Sitzungen abgehalten und zu diesen Sitzungen gibt es
        jeweils zahlreiche Drucksachen, die ihrerseits wieder zahlreiche
        Dokumente enthalten.
      </para>
      <para>
        Eine OParl-Schnittstelle gibt jedem einzelnen Objekt eine
        eindeutige Adresse, eine URL. Somit kann die Schnittstelle den
        Verweis von einem Objekt, beispielsweise einem Gremium, auf ein
        anderes Objekt, etwa ein Mitglied des Gremiums, dadurch
        ausgeben, dass im Kontext des Gremiums die URL des Mitglieds
        ausgeben wird. Der Client kann somit ausgehend von einem
        bestimmten Objekt die anderen Objekte im System finden, indem er
        einfach den angebotenen URLs folgt. Dieses Prinzip wird auch
        &quot;Follow Your Nose&quot;<footnote>
          <para>
            <ulink url="http://patterns.dataincubator.org/book/follow-your-nose.html">http://patterns.dataincubator.org/book/follow-your-nose.html</ulink>
          </para>
        </footnote> genannt.
      </para>
    </sect3>
    <sect3 id="linked_data">
      <title>Linked Data</title>
      <para>
        Der Begriff &quot;Linked Data&quot; steht für die Beschreibung
        von Daten in einer Form, die diese über ihren ursprünglichen
        Kontext hinaus verständlich macht.<footnote>
          <para>
            vgl. Bundesministerium des Innern (Herausg.): Open
            Government Data Deutschland, Seite 433f., 2012
            <ulink url="http://www.bmi.bund.de/SharedDocs/Downloads/DE/Themen/OED_Verwaltung/ModerneVerwaltung/opengovernment.pdf">http://www.bmi.bund.de/SharedDocs/Downloads/DE/Themen/OED_Verwaltung/ModerneVerwaltung/opengovernment.pdf</ulink>
          </para>
        </footnote>
      </para>
      <para>
        Kern von Linked Data ist die Möglichkeit, alle Bestandteile von
        Daten in Form von Tripeln zu beschreiben, das sind dreiteilige
        Informationseinheiten aus einem Subjekt, einem Prädikat und
        einem Objekt. Alle drei Bestandteile können in Form global
        eindeutiger &quot;Uniform Resource Identifier&quot; (URI)
        abgebildet werden.
      </para>
      <para>
        Nach dem Linked-Data-Prinzip könnte beispielsweise der Vorname
        einer Person mit dem folgenden Tripel beschrieben werden:
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            <emphasis role="strong">Subjekt</emphasis>:
            http://dbpedia.org/resource/John_Doe_(musician)
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">Prädikat</emphasis>:
            http://xmlns.com/foaf/0.1/givenName
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">Objekt</emphasis>:
            http://dbpedia.org/resource/John_(given_name)
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Hierbei macht man von der Tatsache Gebrauch, dass das Subjekt,
        also die Person, um die es geht, bereits mittels ihrer URI
        eindeutig identifiziert werden kann, und dass bestenfalls unter
        dieser URI weitere Informationen zu der Person abrufbar
        sind.<footnote>
          <para>
            Ein Aufruf der URL
            <ulink url="http://dbpedia.org/resource/John_Doe_(musician)">http://dbpedia.org/resource/John_Doe_(musician)</ulink>
            im herkömmlichen Web-Browser führt zu einer Weiterleitung
            auf die URL
            <ulink url="http://dbpedia.org/page/John_Doe_(musician)">http://dbpedia.org/page/John_Doe_(musician)</ulink>.
            Siehe dazu auch der Abschnitt
            <link linkend="content_negotiation">Content
            Negotiation</link>
          </para>
        </footnote> Auch für das Prädikat &quot;Person hat den
        Vornamen&quot; liegt bereits eine Beschreibung in einem
        gebräuchlichen Vokabular vor, auf das hier verwiesen werden
        kann. Und schließlich kann sogar der eigentliche Vorname in Form
        einer URI abgebildet werden, nämlich als Verweis auf eine
        umfangreiche Beschreibung dieses Namens.
      </para>
      <para>
        Das <emphasis role="strong">Ziel</emphasis> von OParl ist es,
        mit der vorliegenden Version 1.0 der Spezifikation, die Nutzung
        solcher allgemeingültigen Vokabulare für die Veröffentlichung
        von parlamentarischen Informationen zu begünstigen und die
        automatisierte Verarbeitung und Verknüpfung von Informationen,
        auch über die Grenzen verschiedener Informationssysteme hinweg,
        zu erleichtern.
      </para>
      <para>
        Beispiele, wo dies sinnvoll ist, sind in der Praxis leicht zu
        finden. So finden sich beispielsweise in vielen lokalen
        Parlamenten immer wieder Fraktionen der selben Parteien,
        beispielsweise CDU und SPD. Mittels Linked Data wäre es möglich,
        jede dieser Fraktionen mit einer externen URL zu
        verknüpfen<footnote>
          <para>
            beispielsweise
            <ulink url="http://dbpedia.org/resource/Christian_Democratic_Union_(Germany)">http://dbpedia.org/resource/Christian_Democratic_Union_(Germany)</ulink>
            und
            <ulink url="http://dbpedia.org/resource/Social_Democratic_Party_of_Germany">http://dbpedia.org/resource/Social_Democratic_Party_of_Germany</ulink>
          </para>
        </footnote> und somit erkennbar zu machen, zu welcher Partei
        diese Fraktion gehört. Ebenso finden sich viele inhaltliche
        Ähnlichkeiten bei Gremien wie zum Beispiel Ausschüssen (z. B.
        Hauptausschuss, Verkehrsausschuss etc.) oder bei Arten von
        Drucksachen (z. B. Anträge, Anfragen, Mitteilungen,
        Beschlussvorlagen).
      </para>
      <para>
        Mit der Möglichkeit, Objekte mit Hilfe von URLs zu
        klassifizieren (vgl.
        <link linkend="vokabulare_klassifizierung">Vokabulare zur
        Klassifizierung</link>), geht diese Version von OParl einen
        ersten Schritt in Richtung Linked Data. Die Aufgabe, ein
        übergreifend nutzbares Vokabular anhand von Anforderungen aus
        der Praxis zu erstellen, kann damit als logischer nächster
        Schritt in naher Zukunft angegangen werden.
      </para>
    </sect3>
    <sect3 id="kriterien-für-die-aufnahme-von-klassen-und-eigenschaften">
      <title>Kriterien für die Aufnahme von Klassen und
      Eigenschaften</title>
      <para>
        Bei der Erstellung des Vokabulars (Klassen und Eigenschaften)
        gab es viel Input von mehreren RIS-Herstellern und Anwendern der
        berücksichtigt werden musste.
      </para>
      <para>
        Dies ist eine keineswegs abschliessende Liste von Kriterien die
        dabei eine Rolle gespielt haben:
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            Erforderlichkeit für Formulierung relevanter Informationen
          </para>
        </listitem>
        <listitem>
          <para>
            Verständlichkeit der Semantik
          </para>
        </listitem>
        <listitem>
          <para>
            Vermeidung von Redundanzen
          </para>
        </listitem>
        <listitem>
          <para>
            Kompatibilität mit anderen Vokabularen und Spezifikationen
          </para>
        </listitem>
        <listitem>
          <para>
            Konsistenz der Benennung
          </para>
        </listitem>
        <listitem>
          <para>
            Konsistenz verwendeter Mechanismen
          </para>
        </listitem>
        <listitem>
          <para>
            Speicherbedarf auf Client-Seite (Cache)
          </para>
        </listitem>
        <listitem>
          <para>
            benötigte Netz-Bandbreite
          </para>
        </listitem>
        <listitem>
          <para>
            Anzahl http-Requests bis Client alle benötigten Daten hat
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Diese Kriterien können je nach Einsatzszenario von sehr
        unterschiedlichem Gewicht sein und sich widersprechen. Bei den
        Entscheidungen mussten deshalb regelmäßig Abwägungen vorgenommen
        werden und auch neue Lösungen entwickelt werden, die so bisher
        in keinem RIS umgesetzt sind - aber nach Überzeugung der Autoren
        mit akzeptablem Aufwand umsetzbar sind.
      </para>
      <para>
        Bei der Erstellung der Spezifikation wurde auch versucht,
        Dokumente des W3C zur Erstellung hochwertiger
        Spezifikationen<footnote>
          <para>
            QA Framework: Specification Guidelines:
            <ulink url="http://www.w3.org/TR/qaframe-spec/">http://www.w3.org/TR/qaframe-spec/</ulink>,
            W3C Manual of Style:
            <ulink url="http://www.w3.org/2001/06/manual/">http://www.w3.org/2001/06/manual/</ulink>
          </para>
        </footnote> zu berücksichtigen.
      </para>
    </sect3>
  </sect2>
  <sect2 id="zukunftssicherheit">
    <title>Zukunftssicherheit</title>
    <para>
      Wie unter <link linkend="designprinzipien">Designprinzipien</link>
      beschrieben, ist diese erste Version der OParl-Spezifikation
      bereits im Wesentlichen von den Zielen der einfachen
      Implementierbarkeit und Migration geleitet.
    </para>
    <para>
      Der Aufwand, den die Betreiber von parlamentarischen
      Informationssystemen bei der Bereitstellung von OParl-konformen
      Schnittstellen betreiben, soll auch bei der zukünftigen
      Weiterentwicklung dieser Spezifikation berücksichtigt werden.
      Ebenso soll den Entwicklern von Client-Software zukünftig entgegen
      kommen, dass ihre bestehenden Clients auch mit Servern
      kommunizieren können, die eine neuere Version der
      OParl-Spezifikation unterstützen. Dieser Wunsch ist bereits im
      Designprinzip
      <link linkend="erweiterbarkeit">Erweiterbarkeit</link>
      ausformuliert.
    </para>
    <para>
      Mit anderen Worten: die Autoren der OParl-Spezifikation
      beabsichtigen größtmögliche Zukunftssicherheit und zukünftige
      Abwärtskompatibilität. Dieses Ziel wird in Zukunft natürlich
      abgewägt werden müssen mit dem Wunsch, sich an Veränderungen und
      neue Erkenntnisse anzupassen. Eine Garantie für Zukunftssicherheit
      kann insofern niemand aussprechen.
    </para>
    <para>
      Ein fiktives Szenario soll verdeutlichen, dass es zweckmäßig ist,
      schon beim Betrieb eines OParl 1.0 Servers die zukünftige
      Entwicklung im Blick zu haben:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Die Kommune <emphasis>Beispielstadt</emphasis> betreibt ihren
          OParl-1.0-Server unter der URL
          <literal>https://oparl.example.org/1.0/</literal>.
        </para>
      </listitem>
      <listitem>
        <para>
          Verschiedene Clients, die für OParl Version 1.0 entwickelt
          wurden, kommen bei Nutzerinnen und Nutzern, die sich für den
          Stadtrat in Beispielstadt intressieren, zum Einsatz. Jeder
          Client-Nutzer hat dazu lediglich die URL
          <literal>https://oparl.example.org/1.0/</literal> des
          OParl-Servers in der Client-Konfiguration hinterlegt.
        </para>
      </listitem>
      <listitem>
        <para>
          Die OParl-Spezifikation wird aktualisiert, es erscheint
          Version 1.1. Das Schema enthält Erweiterungen gegenüber
          Version 1.0, jedes gültige Objekt aus Version 1.0 behält
          jedoch auch weiterhin seine Gültigkeit. Und Objekte, die nach
          Version 1.1 gültig sind, sind auch für Clients gültig, die für
          Version 1.0 entwickelt wurden.
        </para>
      </listitem>
      <listitem>
        <para>
          Die Firma, die den OParl-Server von Beispielstadt entwickelt
          hat, liefert ein Update.
        </para>
      </listitem>
      <listitem>
        <para>
          Der OParl-Server von Beispielstadt ist nun über eine neue URL
          <literal>https://oparl.example.org/1.1/</literal> zu
          erreichen. Alle Anfragen an
          <literal>https://oparl.example.org/1.0/...</literal> werden
          auf die entsprechende URL unter
          <literal>https://oparl.example.org/1.1/</literal> mit
          HTTP-Redirects und Status-Code 301 weiter geleitet.
        </para>
      </listitem>
      <listitem>
        <para>
          Die Nutzer der Clients, die mit dem OParl-Server von
          Beispielstadt arbeiten, können weiter arbeiten wie bisher. Sie
          erhalten vom Client höchstens einmalig eine Information, dass
          sich die Server-URL geändert hat.
        </para>
      </listitem>
      <listitem>
        <para>
          Einzelne Client-Nutzerinnen werden von den Anbietern ihrer
          Clients darauf aufmerksam gemacht, dass eine neue Version
          ihres Produkts für eine neue OParl-Version zur Verfügung
          steht. Mit dieser Version könnten die Nutzer in den Genuss der
          Vorteile von OParl-Version 1.1 kommen.
        </para>
      </listitem>
      <listitem>
        <para>
          Nach einiger Zeit erscheint eine neue Version 2.0 der
          OParl-Spezifikation. Hier haben sich größere Änderungen
          ergeben. Das Schema ist nicht kompatibel mit dem von Version
          1.0 und 1.1. Clients, die für eine Version 1.* entwickelt
          wurden, werden nicht sinnvoll mit einem Server der Version 2
          kommunizieren können.
        </para>
      </listitem>
      <listitem>
        <para>
          Der Server-Entwickler bietet das entsprechende Produkt zu
          OParl-Version 2 an, Beispielstadt entschließt sich zum Einsatz
          der neuen Version. Da das Server-Produkt gleichzeitig OParl
          1.* und OParl 2.0 bedienen kann, kann Beispielstadt
          gleichzeitig einen Endpunkt für 1.1 und einen für 2.0
          betreiben. Die URL des neuen Endpunkts lautet
          <literal>https://oparl.example.org/2.0/</literal>.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Das Szenario verdeutlicht, wie insbesondere zwei Aspekte für eine
      möglichst sanfte Migration zwischen den OParl-Versionen sorgen
      können:
    </para>
    <orderedlist numeration="arabic">
      <listitem>
        <para>
          Dedizierte API-Endpunkt-URLs für jede OParl-Version
        </para>
      </listitem>
      <listitem>
        <para>
          HTTP-Weiterleitungen auf die neue URL, sofern diese kompatibel
          mit der alten ist, erspart den Parallelbetrieb von zwei
          ähnlichen Endpunkten und kommuniziert den Clients automatisch
          den Endpunkt der neuen Version
        </para>
      </listitem>
    </orderedlist>
    <para>
      Zu der Art, wie die OParl-Version sich auf die Endpunkt-URL
      auswirkt, will diese Spezifikation keine Vorgaben machen. Die
      Pfad-Elemente im obigen Szenario sind Vorschläge, aber in keiner
      Weise bindend.
    </para>
    <para>
      Die praktische Umsetzung von HTTP-Weiterleitungen ist besonders
      dann einfach, wenn die restlichen URL-Bestandteile identisch
      bleiben. In diesem Fall können Server mit einer einfachen Regel
      von jeglicher vorherigen auf jegliche neue URL weiterleiten.
    </para>
  </sect2>
  <sect2 id="http-und-https">
    <title>HTTP und HTTPS</title>
    <para>
      OParl-Server und -Client kommunizieren miteinander über das
      HTTP-Protokoll.
    </para>
    <para>
      Hierbei SOLL eine verschlüsselte Variante des Protokolls, HTTPS,
      zum Einsatz kommen. Dabei werden auch die URLs verschlüsselt,
      deren Kenntnis möglicherweise Rückschlüsse auf Interessen von
      Nutzer ermöglicht. Alternativ kann jedoch auch unverschlüsseltes
      HTTP verwendet werden. Welche Verschlüsselungstechnologie im Fall
      von HTTPS gewählt wird, obliegt dem Betreiber bzw.
      Server-Implementierer.
    </para>
    <para>
      Die Wahl des unverschlüsselten oder verschlüsselten HTTP-Zugriffs
      hat Auswirkung auf die im System verwendeten URLs. Wie im Kapitel
      <link linkend="urls">URLs</link> beschrieben, verfolgt diese
      Spezifikation die Festlegung auf genau eine &quot;kanonische&quot;
      URL je Ressource (vgl.
      <link linkend="url_kanonisierung">URL-Kanonisierung</link>).
    </para>
    <para>
      Bei unverschlüsseltem Zugriff wird allen URLs, die auf das
      betreffende System zeigen, das Schema &quot;http://&quot; voran
      gestellt, beim verschlüsselten Zugriff stattdessen
      &quot;https://&quot;.
    </para>
    <para>
      Es ist daher ZWINGEND, dass der Server-Betreiber sich zur
      URL-Kanonisierung für nur eine von beiden Varianten entscheidet.
      Beantwortet das System regulär Anfragen über HTTPS mit der
      Auslieferung von Objekten etc., dann gilt für Anfragen an die
      entsprechende unverschlüsselte URL ZWINGEND:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          unter der URL ist kein Webserver erreichbar, oder
        </para>
      </listitem>
      <listitem>
        <para>
          der Server unter der URL beantwortet die Anfrage mit einer
          Weiterleitung an die HTTPS-URL (HTTP Status-Code 301)
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Gleiches gilt umgekehrt: hat sich der Betreiber generell für den
      Betrieb des OParl-Servers über unverschlüsseltes HTTP entscheiden,
      dann MUSS für die entsprechenden HTTPS-URLs eine der beiden
      folgenden Möglichkeiten gelten:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Entweder ist unter den entsprechenden HTTPS-URLs kein
          Webserver erreichbar
        </para>
      </listitem>
      <listitem>
        <para>
          oder Anfragen an die HTTPS-URLs werden mit Redirects auf die
          entsprechenden HTTP-URLs beantwortet (FRAGE: ist das ein
          sinnvolles Szenario?).
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
  <sect2 id="urls">
    <title>URLs, IRIs und URIs</title>
    <para>
      Den URLs (für <emphasis>Uniform Resource Locators</emphasis>)
      kommt bei einer OParl-konformen API eine besondere Bedeutung zu
      und es werden eine Reihe von Anforderungen an die Verarbeitung von
      URLs gestellt.
    </para>
    <para>
      Im Rahmen dieses Dokuments wird aus Gründen der Verständlichkeit
      generell der allgemein gebräuchliche Begriff
      <emphasis>URL</emphasis> werwendet, auch wenn damit tatsächlich
      die internationalisierte Variante nach RFC 3987<footnote>
        <para>
          RFC 3987:
          <ulink url="http://tools.ietf.org/html/rfc3987">http://tools.ietf.org/html/rfc3987</ulink>
        </para>
      </footnote>, die korrekterweise <emphasis>IRI</emphasis> bzw.
      <emphasis>Internationalized Resource Identifier</emphasis> genannt
      werden müsste, gemeint ist. Einige Quellen wiederum nutzen den
      Begriff <emphasis>URI</emphasis> bzw. <emphasis>Uniform Resource
      Identifier</emphasis>. Das vorliegende Dokumente fasst alle drei
      Konzepte mit dem Begriff <emphasis>URL</emphasis> zusammen und
      ignoriert damit die Unterschiede der einzelnen Begriffe, da diese
      im Rahmen dieser Spezifikation nicht von Bedeutung sind.
    </para>
    <para>
      Die grundsätzliche Funktionsweise von URLs ist in RFC 3986
      beschrieben<footnote>
        <para>
          RFC 3986:
          <ulink url="http://tools.ietf.org/html/rfc3986">http://tools.ietf.org/html/rfc3986</ulink>
        </para>
      </footnote>. Darauf aufbauend sind hier die Bestandteile einer
      beispielhaften URL mit den Bezeichnungen beschriftet, mit denen
      sie in diesem Dokument benannt werden:
    </para>
    <figure>
      <title>Benennung von URL-Bestandteilen</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/url.png" />
        </imageobject>
        <textobject><phrase>Benennung von
        URL-Bestandteilen</phrase></textobject>
      </mediaobject>
    </figure>
    <para>
      Der optionale <emphasis>Query-String</emphasis> besteht dabei aus
      beliebig vielen <emphasis>Query-Parametern</emphasis>, die jeweils
      einen Namen (links des Gleichheitszeichens) und einen Wert haben
      können.
    </para>
    <sect3 id="url_kanonisierung">
      <title>URL-Kanonisierung</title>
      <para>
        Absicht ist, dass jedes Objekt, das ein Server über eine
        OParl-API anbietet, über genau eine URL identifizierbar und
        abrufbar ist. Diese Vereinheitlichung der URL wird nachfolgend
        <emphasis>Kanonisierung</emphasis> genannt.
      </para>
      <para>
        Die Kanonisierung ist entscheidend, um erkennen zu können, ob
        zwei URLs das selbe Objekt repräsentieren. Sind zwei URLs
        identisch, sollen Clients daraus ableiten können, dass diese das
        selbe Objekt repräsentieren. Sind zwei URLs unterschiedlich,
        soll im Umkehrschluss die Annahme gelten, dass sie zwei
        verschiedene Objekte repräsentieren.
      </para>
      <para>
        Der OParl-konforme Server MUSS für jedes benannte Objekt eine
        kanonische URL bestimmen können.
      </para>
      <para>
        Die URL-Kanonisierung betrifft sämtliche Bestandteile der URL.
        Entsprechend beginnt diese schon beim
        <emphasis role="strong">Schema</emphasis> und bei der
        Entscheidung durch den Betreiber, ob eine OParl-API regulär über
        HTTP oder über HTTPS erreichbar sein soll (vgl.
        <link linkend="http-und-https">HTTP und HTTPS</link>).
      </para>
      <para>
        Der <emphasis role="strong">Host</emphasis>-Teil der URL wird
        ebenfalls durch die Konfiguration des Betreibers festgelegt.
        Obwohl technisch auch die Verwendung einer IP-Adresse (z.B.
        &quot;123.123.123.123&quot;) möglich wäre, SOLL der Betreiber
        einen mit Bedacht gewählten Host-Namen einsetzen. Die Vorteile
        dieser Lösung gegenüber der Verwendung einer IP-Adresse sind
        vielfältig:
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            Nutzerinnen können Host-Namen lesen und interpretieren
          </para>
        </listitem>
        <listitem>
          <para>
            In Kombination mit der richtigen Domain (oder Subdomain)
            kann der Hostname kommunizieren, wer der Betreiber ist.
          </para>
        </listitem>
        <listitem>
          <para>
            Host-Namen können zwischen verschiedenen technischen
            Systemen (bzw. von IP-Adresse zu IP-Adresse) migriert
            werden, was hilft, die Langlebigkeit der URLs zu
            gewährleisten
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Eine URL wie
      </para>
      <programlisting>
http://oparl.stadtrat.stadt-koeln.de/
</programlisting>
      <para>
        kommuniziert beispielsweise direkt die Zugehörigkeit zur Stadt
        Köln als Betreiber des Systems. Die Bezeichnung
        &quot;stadtrat&quot; in der Subdomain zeigt den Zweck des
        Systems allgemein verständlich an. Der Host-Name
        &quot;oparl.stadtrat.stadt-koeln.de&quot; deutet an, dass diese
        URL zu einer OParl-Schnittstelle zu diesem System gehört. Eine
        technische Notwendigkeit zur Verwendung einer eigenen Domain für
        OParl besteht jedoch nicht, da JSON-Dokumente und HTML-Seiten
        mittels Content Negotiation über eine gemeinsame Domain
        ausgeliefert werden können.
      </para>
      <para>
        Um die Kanonisierung zu gewährleisten, SOLLEN Betreiber alle
        Möglichkeiten ausschließen, die dazu führen können, dass eine
        Ressource neben der kanonischen URL noch über andere URLs
        abrufbar ist. Diese Faktoren können sein:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Der selbe Server antwortet nicht nur über den kanonischen
            Host-Namen, sondern auch noch über andere Host-Namen. Das
            könnte zum Beispiel der Fall sein, wenn der Host-Name als
            CNAME für einen anderen Namen konfiguriert wurde oder wenn
            ein DNS A-Record für die IP-Adresse des Servers existiert.
          </para>
        </listitem>
        <listitem>
          <para>
            Der Server ist neben dem Host-Namen auch über die IP-Adresse
            erreichbar.
          </para>
        </listitem>
        <listitem>
          <para>
            Zusätzliche Domains, die einen A-Record auf den selben
            Server besitzen
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Zu der kanonischen Beispiel-URL
        https://oparl.stadtrat.stadt-koeln.de/ wären eine Reihe von
        nicht-kanonischen URL-Varianten denkbar, die technischen auf den
        selben Server führen könnten:
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            https://83.123.89.102/
          </para>
        </listitem>
        <listitem>
          <para>
            https://oparl.stadtrat.stadtkoeln.de/
          </para>
        </listitem>
        <listitem>
          <para>
            https://risserv.stadt-koeln.de/
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Falls es aus technischen Gründen nicht möglich ist, den Zugang
        auf das OParl-System über nicht-kanonische URLs zu unterbinden,
        SOLL eine entsprechende HTTP-Anfrage mit einer Weiterleitung auf
        die entsprechende kanonische URL beantwortet werden. Dabei ist
        der HTTP-Status-Code 301 zu verwenden.
      </para>
      <para>
        Server-Implementierern wird empfohlen, hierfür den
        <literal>Host</literal>-Header der HTTP-Anfrage auszuwerten und
        mit der konfigurierten Einstellung für den kanonischen
        Host-Namen des Systems abzugleichen.
      </para>
      <para>
        Beim <emphasis role="strong">Pfad</emphasis>-Bestandteil der URL
        MÜSSEN Server-Implementierer darüber hinaus beachten, dass nur
        jeweils eine Schreibweise als die kanonische Schreibweise gelten
        kann. Dazu gehört auch die Groß- und Kleinschreibung, die Anzahl
        von Schrägstrichen als Pfad-Trennzeichen, die Anzahl von
        führenden Nullen vor numerischen URL-Bestandteilen und vieles
        mehr.
      </para>
      <para>
        Die Kanonisierung umfasst auch den
        <emphasis role="strong">Query-String</emphasis>-Bestandteil der
        URL. Wie auch beim Pfad, gilt hier, dass für jeden Parameter und
        jeden Wert im Query-String nur eine kanonische Schreibweise
        gelten MUSS.
      </para>
      <para>
        Darüber hinaus SOLL der Server-Implementierer darauf achten, bei
        Verwendung von Query-String-Parametern diese in URLs immer nach
        dem selben Prinzip zu sortieren. Ein Beispiel: die beiden URLs
      </para>
      <programlisting>
https://oparl.example.org/members?body=1&amp;committee=2
https://oparl.example.org/members?committee=2&amp;body=1
</programlisting>
      <para>
        unterscheiden sich lediglich in der Reihenfolge der
        Query-String-Parameter. Da sie jedoch nicht identisch sind,
        müssen Clients annehmen, dass beide URLs verschiedene Objekte
        repräsentieren. In der Konsequenz kann es zu vermeidbarer
        Ressourcennutzung sowohl auf Client- als auch auf Serverseite
        kommen.
      </para>
      <para>
        Von Clients wird erwartet, dass sie die URLs, die ihnen von
        Servern angeboten werden, unverändert verwenden. Clients SOLLEN
        NICHT versuchen, Schreibweisen von URLs zu ändern,
        Query-String-Parameter umzusortieren oder Ähnliches.
      </para>
    </sect3>
    <sect3 id="langlebigkeit">
      <title>Langlebigkeit</title>
      <para>
        Weiterhin ist es Absicht, dass URLs von Objekten langlebig sind,
        so dass sie, wenn sie einmal verbreitet wurden, langfristig zur
        Abfrage des dazugehörigen Objekts verwendet werden können.
      </para>
      <para>
        Um dies zu gewährleisten, wird den
        <emphasis role="strong">Betreibern</emphasis> empfohlen, die
        Wahl der Domain, eventuell der Subdomain und letztlich des
        Host-Namens sorgfältig auf seine längerfristige Verwendbarkeit
        abzuwägen.
      </para>
      <para>
        <emphasis role="strong">Server-Implementierer</emphasis> SOLLEN
        darüber hinaus dafür sorgen, dass der Pfad-Bestandteil der URLs
        die Langlebigkeit der URLs unterstützt. Es gelten die folgenden
        Empfehlungen, die jedoch keinen Anspruch auf Vollständigkeit
        erheben:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="strong">Veränderliche Objekt-Eigenschaften
            nicht als URL-Bestandteil nutzen.</emphasis> In URLs sollten
            nur Eigenschaften des Objekts aufgenommen werden, die keinen
            Veränderungen unterliegen. Ändert sich beispielsweise die
            Kennung einer Drucksache im Verlauf ihrer Existenz, dann
            scheidet sie für die Bildung der URL aus.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">Technische Eigenschaften der
            Implementierung verbergen.</emphasis> Ist ein OParl-Server
            beispielsweise in PHP implementiert, sollte dies nicht dazu
            führen, dass im Pfad ein Bestandteil wie
            &quot;oparl.php/&quot; erscheint. Erfahrungsgemäß überdauern
            solche URLs nur kurz.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Weitere Empfehlungen für langlebige URLs liefern Tim
        Berners-Lee<footnote>
          <para>
            Berners-Lee, Tim: Cool URIs don't change.
            <ulink url="http://www.w3.org/Provider/Style/URI.html">http://www.w3.org/Provider/Style/URI.html</ulink>
          </para>
        </footnote> sowie die Europäische Kommission<footnote>
          <para>
            Study on persistent URIs, with identification of best
            practices and recommendations on the topic for the MSs and
            the EC. (PDF)
            <ulink url="https://joinup.ec.europa.eu/sites/default/files/D7.1.3%20-%20Study%20on%20persistent%20URIs.pdf">https://joinup.ec.europa.eu/sites/default/files/D7.1.3%20-%20Study%20on%20persistent%20URIs.pdf</ulink>
          </para>
        </footnote>.
      </para>
    </sect3>
  </sect2>
  <sect2 id="serialisierung-mittels-json-und-jsonp">
    <title>Serialisierung mittels JSON und JSONP</title>
    <para>
      Eine OParl-konforme API gibt Objekte in Form von JSON aus. Auf
      Anforderung des Clients wird darüber hinaus JSONP unterstützt.
    </para>
    <sect3 id="json">
      <title>JSON</title>
      <para>
        Die Abkürzung JSON steht für &quot;JavaScript Object
        Notation&quot;. Das JSON-Format ist in RFC4627<footnote>
          <para>
            RFC4627:
            <ulink url="https://tools.ietf.org/html/rfc4627">https://tools.ietf.org/html/rfc4627</ulink>
          </para>
        </footnote> beschrieben. Nachfolgend werden nur die wichtigsten
        Definitionen übernommen, um eine Terminologie zur weiteren
        Verwendung in diesem Dokument zu etablieren.
      </para>
      <para>
        Das JSON-Format unterstützt die Ausgabe von vier verschiedenen
        primitiven Datentypen:
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            <emphasis>Zeichenkette</emphasis> (Unicode)
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>Zahl</emphasis> (sowohl Ganzzahlen als auch
            Fließkommazahlen)
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>Wahrheitswert</emphasis> (<literal>true</literal>
            oder <literal>false</literal>)
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>Null</emphasis>
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Darüber hinaus werden zwei komplexe Datentypen unterstützt:
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            <emphasis>Objekt</emphasis>: Eine Sammlung von
            Schlüssel-Wert-Paaren ohne Reihenfolge, wobei der Schlüssel
            eine Zeichenkette sein muss und der Wert ein beliebiger
            Datentyp sein kann.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>Array</emphasis>: Eine geordnete Liste mit
            beliebigen Datentypen.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Beispiel eines Objekts in JSON-Notation:
      </para>
      <programlisting language="json">
{
    &quot;zeichenkette&quot;: &quot;Das ist eine Zeichenkette&quot;,
    &quot;zahl&quot;: 1.23456789,
    &quot;wahrheitswert&quot;: true,
    &quot;null&quot;: null,
    &quot;objekt&quot;: {
        &quot;foo&quot;: &quot;bar&quot;
    },
    &quot;array&quot;: [&quot;foo&quot;, &quot;bar&quot;]
}
</programlisting>
    </sect3>
    <sect3 id="jsonp">
      <title>JSONP</title>
      <para>
        Eine Einschränkung bei der Nutzung von JSON ist das
        Sicherheitsmodell von Web-Browsern. Die gängigen Browser
        erlauben es innerhalb von Webanwendungen nicht, JSON-Ressourcen
        von Domains auszulesen, die nicht der Domain entsprechen, von
        der die Webanwendung selbst geladen wurde.
        AnwendungsentwicklerInnen sind dadurch bei der Implementierung
        von Client-Anwendungen eingeschränkt.
      </para>
      <para>
        Diese Einschränkung gilt nicht für JSONP<footnote>
          <para>
            JSONP steht für &quot;JSON with padding&quot;. Eine formelle
            Spezifikation existiert nicht. Der Wikipedia-Artikel
            <ulink url="http://en.wikipedia.org/wiki/JSONP">http://en.wikipedia.org/wiki/JSONP</ulink>
            fasst viele Quellen zusammen.
          </para>
        </footnote>. Durch JSONP wird die JSON-Notation so erweitert,
        dass der ausgegebene Code ausführbarer JavaScript-Code wird.
        Damit wird erreicht, dass der JSON-Code über die Grenzen von
        Domains hinweg direkt von Webanwendungen eingebunden werden
        kann.
      </para>
      <para>
        Das folgende Beispiel verdeutlicht den Unterschied zwischen JSON
        und JSONP. Zunächst ein einfaches JSON-Beispiel:
      </para>
      <programlisting language="json">
{
    &quot;foo&quot;: &quot;bar&quot;
}
</programlisting>
      <para>
        Durch Einbettung in eine sogenannte Callback-Funktion wird
        daraus JSONP:
      </para>
      <programlisting>
mycallback({
    &quot;foo&quot;: &quot;bar&quot;
})
</programlisting>
      <para>
        Der Name der Callback-Funktion (im Beispiel
        <literal>mycallback</literal>) wird grundsätzlich bei der
        Anfrage vom Client bestimmt, und zwar mittels URL-Parameter.
      </para>
      <para>
        Für eine OParl-konforme Schnittstelle wird EMPFOHLEN, dass der
        Server die JSONP-Ausgabe unterstützt. Die JSONP-Ausgabe MUSS in
        diesem Fall für sämtliche Abfragen möglich sein. Eine
        JSONP-Unterstützung nur für bestimmte Anfragen ist nicht
        vorgesehen.
      </para>
      <para>
        Der URL-Parameter, den Clients zur Aktivierung der JSONP-Ausgabe
        verwenden, MUSS <literal>callback</literal> lauten. Der Wert des
        <literal>callback</literal>-URL-Parameters MUSS vom Server
        unverändert als Callback-Funktionsname verwendet werden.
      </para>
      <para>
        Aus Sicherheitsgründen MUSS der Client den Wert des
        <literal>callback</literal>-Parameters aus einem eingeschränkten
        Zeichenvorrat bilden, erlaubt sind ausschließlich die Klein- und
        Großbuchstaben von a bis z bzw. A bis Z sowie die Ziffern von 0
        bis 9. (FRAGE: Sind Umlaute erlaubt?)
      </para>
      <para>
        Hält sich der Client nicht an diese Einschränkung und wird ein
        <literal>callback</literal>-Parameter mit nicht erlaubten
        Zeichen verwendet, SOLL der Server die Anfrage mit einer HTTP
        400 (<emphasis>Bad Request</emphasis>) Antwort bedienen.
      </para>
    </sect3>
  </sect2>
  <sect2 id="objektlisten">
    <title>Objektlisten</title>
    <para>
      Generell kommt es beim Aufruf eines einzelnen Objekts in vielen
      Fällen vor, dass eine Reihe von Objekten referenziert wird, die
      mit dem aktuellen Objekt in Beziehung stehen. Für einzelne
      Eigenschaften ist es nur erlaubt, genau ein verbundenes Objekt zu
      referenziert (unter &quot;Schema&quot; gekennzeichnet mit einer
      &quot;Kardinalität&quot; von höchstens 1). Andere Eigenschaften
      erlauben die Verknüpfung einer beliebigen Anzahl von anderen
      Objekten. Ein Beispiel dafür liefert der Objekttyp
      <literal>oparl:System</literal>, der über die Eigenschaft
      <literal>body</literal> auf sämtliche Objekte vom Typ
      <literal>oparl:Body</literal> (Körperschaften) des Systems zeigt.
    </para>
    <para>
      Dieses Kapitel beschreibt, wie solche Listen von verknüpften
      Objekten ausgegeben werden und welche Möglichkeiten dabei Server
      und Clients haben, um diese Ausgabe zu beeinflussen. Dabei werden
      die folgenden Konzepte behandelt:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Interne und externe Ausgabe von Listen
        </para>
      </listitem>
      <listitem>
        <para>
          Kompakte und vollständige Form
        </para>
      </listitem>
      <listitem>
        <para>
          Paginierung
        </para>
      </listitem>
      <listitem>
        <para>
          Sortierung
        </para>
      </listitem>
      <listitem>
        <para>
          Filter
        </para>
      </listitem>
    </itemizedlist>
    <sect3 id="objektlisten_internextern">
      <title>Interne und externe Ausgabe von Listen</title>
      <para>
        Das folgende Beispiel zeigt eine Möglichkeit, wie die
        Eigenschaft <literal>body</literal> ausgegeben werden kann.
        Dabei handelt es sich um eine <emphasis>interne</emphasis>, also
        die Ausgabe der Listenelemente direkt im eigentlich abgerufenen
        Objekt.
      </para>
      <programlisting language="json">
{
    &quot;id&quot;: &quot;https://oparl.example.org/&quot;,
    &quot;type&quot;: &quot;http://oparl.org/schema/1.0/System&quot;,
    &quot;body&quot;: [
        &quot;https://oparl.example.org/bodies/1&quot;,
        &quot;https://oparl.example.org/bodies/2&quot;,
        &quot;https://oparl.example.org/bodies/3&quot;
    ],
    ...
}
</programlisting>
      <para>
        Wie oben zu sehen ist, ist der Wert der Eigenschaft
        <literal>body</literal> in diesem Fall ein Array. Die Einträge
        des Arrays sind URLs. Es handelt sich dabei um die URLs aller
        Objekte vom Typ <literal>oparl:Body</literal>, die mit dem
        gezeigten <literal>oparl:System</literal> Objekt in Beziehung
        stehen.
      </para>
      <para>
        Eine alternative Möglichkeit für die Ausgabe der selben
        Information ist die <emphasis>externe</emphasis> Listenausgabe.
        Mit dieser Form der Ausgabe sieht das oben gezeigte Objekt nun
        so aus:
      </para>
      <programlisting language="json">
{
    &quot;id&quot;: &quot;https://oparl.example.org/&quot;,
    &quot;type&quot;: &quot;http://oparl.org/schema/1.0/System&quot;,
    &quot;body&quot;: &quot;https://oparl.example.org/bodies/&quot;,
    ...
}
</programlisting>
      <para>
        In diesem Fall ist der Wert der Eigenschaft
        <literal>body</literal> kein Array, sondern eine URL. Diese URL
        kann vom Client genutzt werden, um die entsprechende Liste mit
        Objekten aufzurufen. Wie die entsprechende Ausgabe des Servers
        aussieht, wird weiter unten unter beschrieben.
      </para>
      <para>
        Diese beiden Mechanismen sind grundsätzlich immer anwendbar,
        wenn eine Mehrzahl von Objekten mit einem Objekt verknüpft ist,
        unabhängig von der Art des verknüpfenden oder des verknüpften
        Objekts.
      </para>
      <para>
        Die Entscheidung, ob eine Liste intern, also im Kontext eines
        einzelnen Objekts, oder extern, also über eine eigene URL
        ausgegeben wird, obliegt allein dem Server. Bei der Abwägung
        durch den Server sollte dieser berücksichtigen:
      </para>
      <orderedlist numeration="arabic">
        <listitem>
          <para>
            Die interne Listenausgabe eignet sich für kleine Listen mit
            wenigen Elementen.
          </para>
        </listitem>
        <listitem>
          <para>
            Die externe Listenausgabe eignet sich für längere Listen, da
            hier auch Paginierung und Filterung möglich sind.
          </para>
        </listitem>
        <listitem>
          <para>
            Die externe Listenausgabe ermöglicht über die Ausgabe einer
            URL hinaus auch die Ausgabe vollständiger Objekte.
          </para>
        </listitem>
      </orderedlist>
      <para>
        Mehr zu 2. und 3. ist den folgenden Abschnitten zu entnehmen.
      </para>
      <para>
        Die externe Listenausgabe wird explizit EMPFOHLEN in den
        folgenden Fällen:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Eine Liste wächst mit der Zeit, wie z.B. die Liste aller
            Drucksachen einer Körperschaft.
          </para>
        </listitem>
        <listitem>
          <para>
            Es handelt sich um Listen von Objekten des Typs
            <literal>oparl:Paper</literal> (Drucksache) oder
            <literal>oparl:Meeting</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            Es handelt sich bei der Liste um einen
            <link linkend="feeds">Feed</link>.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Server DÜRFEN in den URLs für die externe Ausgabe von Listen
        NICHT den reservierten URL-Parameter
        <literal>listformat</literal> verwenden. Server MÜSSEN in den
        URLs für den Listenaufruf stets die URL zum Abruf der
        <emphasis>kompakten Form</emphasis> ausgeben. Die Unterscheidung
        zwischen <emphasis>kompakter</emphasis> und
        <emphasis>vollständiger</emphasis> Form wird nachfolgend
        beschrieben.
      </para>
    </sect3>
    <sect3 id="objektlisten_listformat">
      <title>Kompakte und vollständige Form
      (<literal>listformat</literal>)</title>
      <para>
        Wie im vorangehenden Abschnitt beschrieben, gibt es die
        Möglichkeit, Listen von Objekten über eine eigene URL zugänglich
        zu machen (<emphasis>externe Listenausgabe</emphasis>). Bei
        dieser externen Ausgabe gibt es zwei verschiedene
        Ausgabeformate, die sich durch den Umfang der Informationen
        unterscheiden, die je Objekt ausgegeben werden:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="strong">Kompakte Form</emphasis>: Hier wird
            je Eintrag nur die URL des Objekts ausgegeben.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">Vollständige Form</emphasis>: Hier
            wird jedes Objekt in der Liste vollständig ausgegeben. Was
            genau &quot;vollständig&quot; bedeutet, wird nachstehend
            näher beschrieben.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Die Entscheidung, ob die kompakte oder die vollständige Form
        ausgegeben wird, obliegt dem Client. Dieser aktiviert die
        vollständige Ausgabe über den URL-Parameter
        <literal>listformat</literal>. Ist dieser Parameter nicht
        gesetzt, MUSS der Server die kompakte Form ausgeben. Ist der
        Parameter auf den Wert <literal>complete</literal> gesetzt, MUSS
        der Server die vollständige Form ausgeben.
      </para>
      <para>
        Hat beispielsweise der Server zum externen Aufruf der Liste die
        URL
      </para>
      <programlisting>
https://oparl.example.org/bodies/1/papers/
</programlisting>
      <para>
        ausgegeben, ist unter dieser grundsätzlich die kompakte Form zu
        erwarten. Der Client kann diese URL so erweitern, um die
        vollständige Form anzufordern:
      </para>
      <programlisting>
https://oparl.example.org/bodies/1/papers/?listformat=complete
</programlisting>
      <para>
        Das folgende Beispiel zeigt, wie die Ausgabe der kompakten Form
        in einem einfachen Fall aussehen kann:
      </para>
      <programlisting language="json">
{
    &quot;items&quot;: [
        &quot;https://oparl.example.org/bodies/0/papers/2&quot;,
        &quot;https://oparl.example.org/bodies/0/papers/5&quot;,
        &quot;https://oparl.example.org/bodies/0/papers/7&quot;
    ]
}
</programlisting>
      <para>
        Die grundlegende Syntax ist für die externe Listenausgabe
        identisch, unabhängig davon, ob die kompakte oder vollständige
        Form ausgegeben wird: Der Server gibt ein JSON-Objekt aus, das
        eine Eigenschaft <literal>items</literal> enthält. Diese
        Eigenschaft hat den Typ <literal>Array</literal>.
      </para>
      <para>
        Die vollständige Form ist so definiert, dass darin jedes Objekt
        mit allen von OParl für diesen Typ definierten Eigenschaften
        ausgegeben werden MUSS, die auch beim individuellen Aufruf des
        jeweiligen Objekts ausgegeben werden.
      </para>
      <para>
        Das nachfolgende Beispiel zeigt dies verkürzt, analog zur oben
        gezeigten Liste:
      </para>
      <programlisting language="json">
{
    &quot;items&quot;: [
        {
            &quot;id&quot;: &quot;https://oparl.example.org/bodies/0/papers/2&quot;,
            &quot;type&quot;: &quot;http://oparl.org/schema/1.0/Paper&quot;,
            &quot;body&quot;: &quot;https://oparl.example.org/bodies/0&quot;,
            &quot;name&quot;: &quot;Antwort auf Anfrage 1200/2014&quot;,
            &quot;publishedDate&quot;: &quot;2014-04-04T16:42:02+02:00&quot;,
            &quot;paperType&quot;: &quot;https://oparl.example.org/vocab/answer&quot;,
            &quot;mainDocument&quot;: &quot;https://oparl.example.org/documents/925&quot;,
            &quot;originator&quot;: [
                &quot;https://oparl.example.org/organization/2000&quot;
            ]
        },
        {
            &quot;id&quot;: &quot;https://oparl.example.org/bodies/0/papers/5&quot;,
            &quot;type&quot;: &quot;http://oparl.org/schema/1.0/Paper&quot;,
            &quot;body&quot;: &quot;https://oparl.example.org/bodies/0&quot;,
            &quot;name&quot;: &quot;Mitteilung der Verwaltung&quot;,
            &quot;publishedDate&quot;: &quot;2014-06-01T12:24:18+02:00&quot;,
            &quot;paperType&quot;: &quot;https://oparl.example.org/vocab/message&quot;,
            &quot;mainDocument&quot;: &quot;https://oparl.example.org/documents/2758&quot;,
            &quot;originator&quot;: [
                &quot;https://oparl.example.org/people/1000&quot;
            ]
        },
        ...
    ]
}
</programlisting>
      <para>
        Wie zu sehen ist, hat die Eigenschaft <literal>items</literal>
        als Wert nun ein Array mit JSON-Objekten.
      </para>
      <para>
        Die Anforderung der vollständigen Form wirkt sich
        <emphasis>nicht rekursiv</emphasis> aus. Die einzelnen
        JSON-Objekte können ihrerseits wieder Eigenschaften haben, die
        auf mehrere Objekte verweisen. Diese Eigenschaften sind von der
        Anforderung der vollständigen Listenausgabe durch den Client
        nicht betroffen. Hier obliegt es wieder dem Server, zwischen der
        internen und der externen Listenausgabe (siehe oben) zu wählen.
        Bei der internen Listenausgabe ist ohnehin nur die kompakte Form
        (Ausgabe von URLs), wie oben im Beispiel gezeigt, erlaubt.
      </para>
      <para>
        Die Sortierreihenfolge der ausgegebenen Einträge SOLL unabhängig
        von der Ausgabe der kompakten oder volläständigen Form identisch
        sein.
      </para>
      <para>
        Die vollständige Listenausgabe SOLL nur für Listen verwendet
        werden, die bis zu 100 Einträge umfassen. Links zu solch kurzen
        Listen wir jedoch in OParl-Objekten in der Regel nicht
        enthalten.
      </para>
    </sect3>
    <sect3 id="paginierung">
      <title>Paginierung</title>
      <para>
        Für die externe Listenausgabe von Listen mit vielen Elementen
        ist eine Blätterfunktion (Paginierung) vorgesehen. Damit ist die
        Aufteilung einer Liste in kleinere Teilstücke gemeint, die wir
        als <emphasis>Listenseiten</emphasis> bezeichnen. Jede
        Listenseite wird vom Client jeweils mit einer eigenen
        API-Anfrage abgerufen. Das dient dazu, die bei der jeweiligen
        Anfrage übertragenen Datenmengen und Antwortzeiten zu begrenzen
        und Systemressourcen sowohl beim Server als auch beim Client zu
        schonen.
      </para>
      <para>
        Die Entscheidung, ob eine Seite teilweise und daher mit
        Paginierung ausgegeben wird, liegt allein beim Server. Bei
        Listen mit mehr als 100 Einträgen ist dies EMPFOHLEN.
      </para>
      <para>
        Der Server gibt für eine Liste, bei der die Paginierung aktiv
        ist, d. h. nicht alle Listenelemente ausgegeben wurde,
        zusätzliche Eigenschaften aus. Das nachfolgende Beispiel zeigt
        dies für den Anfang einer paginierten Liste:
      </para>
      <programlisting language="json">
{
    &quot;items&quot;: [
        &quot;https://oparl.example.org/bodies/0/papers/2&quot;,
        &quot;https://oparl.example.org/bodies/0/papers/5&quot;,
        &quot;https://oparl.example.org/bodies/0/papers/7&quot;,
        ...
    ],
    &quot;itemsPerPage&quot;: 100,
    &quot;nextPage&quot;: &quot;https://oparl.example.org/bodies/0/papers/?skip_id=495&quot;
}
</programlisting>
      <para>
        Über die ZWINGEND bei Paginierung ausgegebene Eigenschaft
        <literal>itemsPerPage</literal> kommuniziert der Server, wie
        viele Einträge pro Listenseite ausgegeben werden. Die Zahl der
        Einträge, die der Server dabei je Listenseite ausliefert, SOLL
        dabei mindestens 10 und maximal 100 betragen. Der Wert von
        <literal>itemsPerPage</literal> MUSS auf allen Listenseiten der
        selben Liste einheitlich sein. Nur bei Ausgabe der letzten
        Listenseite DARF der Server weniger Einträge ausgeben, als von
        <literal>itemsPerPage</literal> angegeben.
      </para>
      <para>
        Weiterhin wird bei Paginierung über eine Eigenschaft
        <literal>nextPage</literal> eine URL zum Abruf der jeweils
        nächsten Listenseite ausgegeben. Die Beschaffenheit der URL
        bestimmt der Server frei, das obige Beispiel ist in keiner Form
        bindend.
      </para>
      <para>
        Es ergibt sich eine typische Abfolge, wie Clients bei Bedarf mit
        mehreren Anfragen ganze Objektlisten vom Server abrufen:
      </para>
      <orderedlist numeration="arabic">
        <listitem>
          <para>
            Der Server stellt eine URL für eine Liste zur Verfügung.
          </para>
        </listitem>
        <listitem>
          <para>
            Der Client ruft diese URL der Liste auf.
          </para>
        </listitem>
        <listitem>
          <para>
            Der Server antwortet mit einer verkürzten Listenausgabe und
            gibt mittels <literal>nextPage</literal>-Eigenschaft die URL
            für den Abruf der nächsten Listenseite an.
          </para>
        </listitem>
        <listitem>
          <para>
            Der Client ruft die URL für die nächste Listenseite auf.
          </para>
        </listitem>
      </orderedlist>
      <para>
        Die Punkte 3 und 4 können sich nun so oft wiederholen, bis die
        letzte Listenseite erreicht ist.
      </para>
      <orderedlist numeration="arabic" spacing="compact">
        <listitem override="5">
          <para>
            Der Server liefert die letzte Listenseite ohne
            <literal>nextPage</literal>-Eigenschaft aus.
          </para>
        </listitem>
      </orderedlist>
      <para>
        Zusätzlich zur dem für die Paginierung ZWINGENDEN Eigenschaft
        <literal>nextPage</literal>, die lediglich auf der letzten
        Listenseite entfällt, können Server OPTIONAL weitere URLs zum
        Abruf bestimmter Listenseiten anbieten:
      </para>
      <variablelist>
        <varlistentry>
          <term>
            Erste Listenseite (Eigenschaft
            <literal>firstPage</literal>):
          </term>
          <listitem>
            <para>
              Sofern die aktuell abgerufene Listenseite nicht den Anfang
              der Liste wiedergibt, KANN der Server diese Eigenschaft
              ausgeben, deren Wert die URL zum Abruf der
              <emphasis>ersten</emphasis> Listenseite ist.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            Letzte Listenseite (Eigenschaft
            <literal>lastPage</literal>):
          </term>
          <listitem>
            <para>
              Sofern die aktuell abgerufene Listenseite nicht das Ende
              der Liste wiedergibt, KANN der Server diese Eigenschaft
              ausgeben, deren Wert die URL zum Abruf der
              <emphasis>letzten</emphasis> Listenseite ist.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            Vorherige Listenseite (Eigenschaft
            <literal>prevPage</literal>):
          </term>
          <listitem>
            <para>
              Sofern die aktuell abgerufene Listenseite nicht den Anfang
              der Liste wiedergibt, KANN der Server diese Eigenschaft
              ausgeben, deren Wert die URL zum Abruf der
              <emphasis>vorigen</emphasis> Listenseite ist.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        Damit eröffnet der Server dem Client zusätzliche Möglichkeiten,
        die einzelnen Listenseiten abzurufen.
      </para>
      <figure>
        <title>Paginierung: Schematische Darstellung</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/pagination01.png" />
          </imageobject>
          <textobject><phrase>Paginierung: Schematische
          Darstellung</phrase></textobject>
        </mediaobject>
      </figure>
      <para>
        Server-Implementierer entscheiden selbst, wie die URLs zum Abruf
        einzelner Listenseiten aufgebaut sind und tragen damit selbst
        Verantwortung für die Funktionsweise der Paginierung. Bei der
        Entscheidung für eine Form der Implementierung sollten die
        folgenden Anforderungen von Clients berücksichtigt werden:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Es ist davon auszugehen, dass Clients für den gesamten Abruf
            aller Seiten einer Liste längere Zeit benötigen. In der
            Zwischenzeit kann sich der Inhalt der Liste bereits ändern,
            etwa durch das Hinzukommen neuer Einträge. Die Paginierung
            ist idealerweise so zu implementieren, dass sich das
            Hinzukommen oder Entfernen von Einträgen möglichst nicht auf
            einen Client auswirkt, der aktuell die Liste paginiert, um
            alle Einträge abzurufen. Wir bezeichnen dies als
            <emphasis role="strong">stabile Paginierung</emphasis>.
          </para>
        </listitem>
        <listitem>
          <para>
            Eine wesentliche Anforderung an Listen mit Paginierung ist,
            dass alle Einträge der Liste in einer konsistenten
            Reihenfolge sortiert ausgegeben werden MÜSSEN. Das bedeutet,
            dass die Sortierung beim Server im Idealfall anhand einer
            eindeutigen und unveränderlichen Objekteigenschaft
            vorgenommen wird. Hierfür eignen sich die Objekt-URLs, da
            sie genau diese beiden Anforderungen erfüllen sollten.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Über die Sortierung hinaus können bei der Implementierung einer
        stabilen Paginierung auf Server-Seite weitere Überlegungen
        einbezogen werden. Zur Verdeutlichung soll hier eine ungünstige
        (unstabile) Form der Implementierung mit Hilfe einer SQL-Abfrage
        illustriert werden. Gegeben sei eine Tabelle
        <literal>example</literal>, die einen numerischen
        Primärschlüssel <literal>id</literal> enthält. Nehmen wir an,
        die erste Seite der Liste wird mit der Abfrage
      </para>
      <programlisting language="sql">
SELECT * FROM example ORDER BY id LIMIT 10 OFFSET 0
</programlisting>
      <para>
        abgerufen und würde 10 Datensätze mit den <literal>id</literal>s
        1 bis 10 zurückliefern. Dann wird die zweite Seite mit der
        Abfrage
      </para>
      <programlisting language="sql">
SELECT * FROM example ORDER BY id LIMIT 10 OFFSET 10
</programlisting>
      <para>
        abgerufen. Sollte nach der ersten, aber vor der zweiten Abfrage
        beispielsweise der Datensatz mit der <literal>id=1</literal>
        gelöscht worden sein, liefert die zweite Abfrage Datensätze mit
        <literal>id</literal> &gt; 9. In diesem Fall würde dies nur dazu
        führen, dass ein Datensatz (<literal>id=10</literal>) zweimal
        ausgegeben wird. Bei ungünstigeren Konstellationen wäre auch
        denkbar, dass eine unstabile Paginierung bewirkt, dass einzelne
        Datensätze beim Paginieren übergangen werden. Je nach Bedeutung
        der fehlenden Datensätze können splche Inkonsistenzen erhebliche
        Auswirkungen haben.
      </para>
      <para>
        Besser wäre es, bei der Paginierung die Eintragsgrenze, bei der
        eine Listenseite beginnen soll, explizit zu benennen. Wurden auf
        der ersten Listenseite die Datensätze mit den IDs 1 bis 10
        ausgegeben, so könnte der Folgeaufruf, um beim SQL-Beispiel zu
        bleiben, so aussehen:
      </para>
      <programlisting language="sql">
SELECT * FROM example WHERE id &gt; 10 ORDER BY id LIMIT 10
</programlisting>
      <para>
        Die zuvor beschriebenen Anforderungen für die Paginierung von
        Listen gelten auch unverändert, wenn der Umfang der Liste durch
        Abfrageparameter vom Client eingeschränkt wurde.
      </para>
    </sect3>
    <sect3 id="sortierung">
      <title>Sortierung</title>
      <para>
        OParl definiert keine Möglichkeit für Clients, auf die
        Reihenfolge von Listeneinträgen Einfluss zu nehmen. Von Servern
        wird die Einhaltung einiger grundlegender Anforderungen
        erwartet, die teilweise bereits erwähnt wurden.
      </para>
      <para>
        Server SOLLEN generell für eine <emphasis role="strong">stabile
        Sortierung</emphasis> von Listeneinrägen sorgen. Das heißt, die
        Sortierung von Einträgen folgt einem konstanten Prinzip und
        ändert sich nicht von Abfrage zu Abfrage. Eine Einfache
        Möglichkeit, dies Umzusetzen, wäre in vielen Fällen die
        Sortierung von Objekten nach ihrer eindeutigen und
        unveränderlichen ID.
      </para>
    </sect3>
    <sect3 id="filter">
      <title>Filter</title>
      <para>
        Bei der <emphasis>externen Listenausgabe</emphasis> (siehe
        weiter oben) werden in Abhängigkeit vom ausgegebenen Objekttyp
        bestimmte Möglichkeiten geboten, die Ausgabe von Listen auf eine
        Teilmenge einzuschränken.
      </para>
      <para>
        Hierfür sind die URL-Paramter <literal>startdate</literal> und
        <literal>enddate</literal> vorgesehen. Beide können vom Client
        unabhängig von einander gesetzt werden. Sie schränken die
        Objektmenge anhand auf einen Zeitraum ein, der entweder
        einseitig oder beidseitig begrenzt ist. Die Einschränkung
        bezieht sich auf ein Bezugsdatum, das vom Objekttyp abhängt.
      </para>
      <para>
        Der Filter mittels <literal>startdate</literal> und
        <literal>enddate</literal> ist nur auf Listen mit den folgenden
        Objekttypen anwendbar:
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            <literal>oparl:File</literal>: Bezugsdatum ist hier die
            Eigenschaft <literal>date</literal> (Erstellungsdatum)
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>oparl:Meeting</literal>: Bezugsdatum ist hier die
            Eigenschaft <literal>start</literal> (Startzeitpunkt der
            Sitzung)
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>oparl:Paper</literal>: Bezugsdatum ist hier die
            Eigenschaft <literal>publishedDate</literal>
            (Veröffentlichungsdatum)
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Für die genannten Objekttypen MUSS der Server bei externer
        Litenausgabe die beschriebenen Filter untertützen.
      </para>
      <para>
        Die Filter werden vom Client aktiviert, indem der oder die
        gewünschte(n) URL-Parameter der vom Server angegebenen URL für
        die Listenausgabe hinzugefügt werden. Lautet diese URL für eine
        Liste von Drucksachen so,
      </para>
      <programlisting>
https://oparl.example.org/papers/
</programlisting>
      <para>
        dann kann der Client die folgende URL bilden, um die Ausgabe der
        Liste auf Drucksachen einzuschränken, die nach dem 1.1.2014
        veröffentlicht wurden:
      </para>
      <programlisting>
https://oparl.example.org/papers/?startdate=2014-01-01T00%3A00%3A00%2B01%3A00
</programlisting>
      <para>
        Der Server interpretiert die Angabe eines
        <literal>startdate</literal> so, dass das Bezugsdatum aller
        ausgegebenen Objekte gleich oder größer dem im Parameter
        angegebenen Datum sein muss. Der Parameter
        <literal>enddate</literal> ist entsprechend so zu
        interpretieren, dass alle Bezugsdaten der ausgelieferten Objekte
        kleiner oder gleich dem angegebenen Wert sein müssen.
      </para>
      <para>
        Sind beide Parameter gesetzt, handelt es sich um eine Boolsche
        UND-Verknüpfung. Der Server liefert entsprechend nur Objekte
        aus, deren Bezugsdatum größer/gleich dem Wert von
        <literal>startdate</literal> und kleiner/gleich dem Wert von
        <literal>enddate</literal> ist.
      </para>
      <para>
        Clients MÜSSEN die Werte von <literal>startdate</literal> und
        <literal>enddate</literal> im Format xsd:dateTime, also mit
        Uhrzeit und Zeitzone, angeben (siehe dazu auch
        <link linkend="datum_zeit">Datums- und Zeitangaben</link>) und
        für eine entsprechende URL-Kodierung sorgen.
      </para>
    </sect3>
  </sect2>
  <sect2 id="feeds">
    <title>Feeds</title>
    <para>
      Feeds sind spezielle Arten von
      <link linkend="objektlisten">Objektlisten</link>, für die
      besondere Anforderungen gelten. Es werden drei verschiedene Feeds
      spezifiziert:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Der Feed <emphasis>Neue Objekte</emphasis>
        </para>
      </listitem>
      <listitem>
        <para>
          Der Feed <emphasis>Geänderte Objekte</emphasis>
        </para>
      </listitem>
      <listitem>
        <para>
          Der Feed <emphasis>Entfernte Objekte</emphasis>
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Der Begriff &quot;Feed&quot; ist eine Anlehnung an die weit
      verbreiteten RSS-<footnote>
        <para>
          RSS 2.0 Specification:
          <ulink url="http://cyber.law.harvard.edu/rss/rss.html">http://cyber.law.harvard.edu/rss/rss.html</ulink>
        </para>
      </footnote> oder Atom-Feeds<footnote>
        <para>
          Atom ist in RFC4287 spezifiziert:
          <ulink url="http://www.ietf.org/rfc/rfc4287.txt">http://www.ietf.org/rfc/rfc4287.txt</ulink>
        </para>
      </footnote>, deren Publikationslogik im Wesentlichen auf der
      chronologischen Sortierung beruht. Im Unterschied zu Atom oder RSS
      ist hier jedoch keine XML-Ausgabe beabsichtigt.
    </para>
    <para>
      Die Feeds sollen es Clients ermöglichen, schnell und
      ressourcenschonend abzufragen, welche Objekte auf dem Server neu
      hinzugefügt, geändert oder entfernt wurden. Damit können Clients
      beispielsweise schnell und einfach neue Dokumente auffinden und
      verarbeiten oder entfernte Objekte aus ihren Caches entfernen und
      dabei nur ein Mindestmaß an Anfragen ausführen. Die Feeds
      unterstützen oder ermöglichen also die Synchronisation.
    </para>
    <para>
      Ein OParl-Server SOLL jeden der nachfolgend beschriebenen Feeds
      anbieten.
    </para>
    <para>
      Für alle drei Feeds wird EMPFOHLEN, dass mindestens ein Zeitraum
      von 365 Tagen abgedeckt wird.
    </para>
    <para>
      Da Feeds üblicherweise eine große und stetig steigende Anzahl von
      Objekten beinhalten können, ist hier die
      <link linkend="paginierung">Paginierung</link> anzuwenden, wie sie
      im vorigen Abschnitt über
      <link linkend="objektlisten">Objektlisten</link> beschrieben wird.
    </para>
    <sect3 id="feed_neue_objekte">
      <title>Der Feed &quot;Neue Objekte&quot;</title>
      <para>
        Der Feed für neue Objekte listet die URLs neu hinzugekommener
        Objekte in der Reihenfolge des Datums ihrer Erstellung, wobei
        die jüngsten Objekte zuerst ausgegeben werden.
      </para>
      <para>
        Die Definition, was ein &quot;neues&quot; Objekt bzw. die
        &quot;Erstellung&quot; bedeutet, kann zwischen Systemen und
        Objekttypen variieren. So werden bestimmte Objekte in einigen
        Systemen zunächst erstellt und erst dann für die Öffentlichkeit
        freigegeben. In diesem Fall ist im Sinne dieses Feeds die
        Freigabe als Zeitpunkt der Erstellung zu verwenden.
      </para>
      <para>
        Der Feed SOLL sämtliche Objekttypen umfassen, die in einem
        System geführt werden.
      </para>
      <para>
        Das nachstehende Beispiel zeigt die mögliche Ausgabe des Feeds:
      </para>
      <programlisting language="json">
{
    &quot;items&quot;: [
        {
            &quot;id&quot;: &quot;https://oparl.example.org/files/3&quot;,
            &quot;type&quot;: &quot;http://oparl.org/schema/1.0/File&quot;,
            &quot;created&quot;: &quot;2014-01-07T12:59:01+01:00&quot;
        },
        {
            &quot;id&quot;: &quot;https://oparl.example.org/papers/21&quot;,
            &quot;type&quot;: &quot;http://oparl.org/schema/1.0/Paper&quot;,
            &quot;created&quot;: &quot;2014-01-05T18:29:37+01:00&quot;
        },
        {
            &quot;id&quot;: &quot;https://oparl.example.org/files/5&quot;,
            &quot;type&quot;: &quot;http://oparl.org/schema/1.0/File&quot;,
            &quot;created&quot;: &quot;2014-01-04T11:26:48+01:00&quot;
        },
        ...
    ],
    &quot;itemsPerPage&quot;: ...,
    &quot;nextPage&quot;: ...
}
</programlisting>
      <para>
        Die Funktionsweise entspricht grundsätzlich der von gewöhnlichen
        Listen mit Paginierung, wie im Kapitel
        <link linkend="objektlisten">Objektlisten</link> beschrieben.
      </para>
      <para>
        Davon abweichend gibt der Feed zu jedem neuen Objekt in der
        Liste unter <literal>items</literal> ein JSON-Objekt mit drei
        Eigenschaften aus:
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            <literal>id</literal>: Die URL des neuen Objekts
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>type</literal>: Die URL des Typs des neuen Objekts
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>created</literal>: Der Zeitpunkt der Erzeugung des
            Objekts
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Der jeweils in der Eigenschaft <literal>created</literal>
        ausgegebene Zeitpunkt SOLL vom Server als Sortierkriterium des
        Feeds genutzt werden.
      </para>
    </sect3>
    <sect3 id="feed_geaenderte_objekte">
      <title>Der Feed &quot;Geänderte Objekte&quot;</title>
      <para>
        Der Feed für geänderte Objekte listet die URLs geänderter
        Objekte in der Reihenfolge des Datums ihrer Änderung, wobei das
        zuletzt geänderte Objekt zuerst ausgegeben wird.
      </para>
      <para>
        Die Definition einer &quot;Änderung&quot; kann sich zwischen den
        Objekttypen unterscheiden. Tendenziell soll die Definition eher
        weiter ausgelegt werden, als enger. Als Änderung einer
        Gruppierung (oparl:Organization) könnte es beispielsweise
        verstanden werden, wenn eine neue Mitgliedschaft zur
        Organisation hinzukommt. Das Erstellen eines Objekts (im Sinne
        des Feeds &quot;Neue Objekte&quot;) sollte hingegen nicht als
        Änderung gewertet werden, um das redundante Erscheinen eines
        neuen Objekts sowohl im Feed &quot;Neue Objekte&quot; als auch
        im Feed &quot;Geänderte Objekte&quot; zu vermeiden.
      </para>
      <para>
        Auch hier SOLL der Feed sämtliche Objekttypen umfassen, die in
        einem System geführt werden.
      </para>
      <programlisting language="json">
{
    &quot;items&quot;: [
        {
            &quot;id&quot;: &quot;https://oparl.example.org/files/2&quot;,
            &quot;type&quot;: &quot;http://oparl.org/schema/1.0/File&quot;,
            &quot;modified&quot;: &quot;2014-01-08T14:28:31+01:00&quot;
        },
        {
            &quot;id&quot;: &quot;https://oparl.example.org/papers/0&quot;,
            &quot;type&quot;: &quot;http://oparl.org/schema/1.0/Paper&quot;,
            &quot;modified&quot;: &quot;2014-01-08T12:14:27+01:00&quot;
        },
        {
            &quot;id&quot;: &quot;https://oparl.example.org/files/1&quot;,
            &quot;type&quot;: &quot;http://oparl.org/schema/1.0/File&quot;,
            &quot;modified&quot;: &quot;2014-01-06T17:01:00+01:00&quot;
        },
    ],
    &quot;itemsPerPage&quot;: ...,
    &quot;nextPage&quot;: ...
}
</programlisting>
      <para>
        Das Ausgabeformat entspricht weitgehend dem des Feeds &quot;Neue
        Objekte&quot;, jedoch heißt hier die Eigenschaft für den
        Zeitpunkt der letzten Änderung <literal>modified</literal>.
        Entsprechend gilt, dass der als <literal>modified</literal>
        ausgegebene Zeitpunkt als Sortierkriterium der Liste gelten
        SOLL.
      </para>
    </sect3>
    <sect3 id="feed_entfernte_objekte">
      <title>Der Feed &quot;Entfernte Objekte&quot;</title>
      <para>
        Der Feed für entferne Objekte listet die URLs entfernter Objekte
        in der Reihenfolge des Datums ihrer Entfernung auf, wobei die
        zuletzt entfernten Objekte zuerst ausgegeben werden.
      </para>
      <para>
        Mit &quot;Entfernung&quot; ist im Sinne dieses Feeds die
        Löschung eines Objekts, aber auch die Depublikation oder das
        Beenden der öffentlichen Verfügbarkeit gemeint.
      </para>
      <para>
        Client-Implementierer sind angehalten, diesen Feed zu nutzen, um
        beispielsweise depublizierte Dokumente aus ihren lokalen Caches
        zu entfernen.
      </para>
      <programlisting language="json">
{
    &quot;items&quot;: [
        {
            &quot;id&quot;: &quot;https://oparl.example.org/people/22&quot;,
            &quot;removed&quot;: &quot;2013-11-11T11:11:00+01:00&quot;
        },
        ...
    ],
    &quot;itemsPerPage&quot;: ...,
    &quot;nextPage&quot;: ...
]
</programlisting>
      <para>
        Die Eigenschaft zur Angabe des Entfernungszeitpunkts heißt hier
        <literal>removed</literal> und SOLL, analog zu den beiden
        anderen Feeds, als Sortierkriterium der Liste verwendet werden.
      </para>
      <para>
        Im Unterschied zu den beiden zuvor beschriebenen Feeds wird im
        Feed &quot;Gelöschte Objekte&quot; keine Eigenschaft
        <literal>type</literal> am jeweiligen Objekt ausgegeben.
      </para>
      <para>
        Clients SOLLEN vermeiden, die URLs der jeweiligen Einträge
        erneut aufzurufen.
      </para>
    </sect3>
  </sect2>
  <sect2 id="daten-dump-bulk-download">
    <title>Daten Dump / bulk download</title>
    <para>
      Als Alternative zu dem eher fein-granularen Zugriff auf einzelne
      OParl-Objekte kann es sinnvoll sein, wenn alle Objekte in einem
      Vorgang abgerufen werden können. Gründe dafür können sein:
    </para>
    <itemizedlist>
      <listitem>
        <orderedlist numeration="loweralpha" spacing="compact">
          <listitem override="26">
            <para>
              B. für Auswertungen wird ein großer Teil aller Objekte
              benötigt
            </para>
          </listitem>
        </orderedlist>
      </listitem>
      <listitem>
        <para>
          Anzahl erforderlicher http-Zugriffe sinkt drastisch
        </para>
      </listitem>
      <listitem>
        <para>
          die Last auf dem Server (z. B. für Datenbank) kann reduziert
          werden
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Für die Implementierung gibt es mehrere Anforderungen: *
      weitgehende Nutzung ohnehin bereits in OParl genutzter Techniken *
      Verwendung etablierter Vokabulare
    </para>
    <para>
      Bei Betrachtung der OParl-Daten als Tripel geht es hier um eine
      Abfrage nach allen Objekten, deren Subjekt, Prädikat und Objekt
      nicht eingeschränkt ist.
      <subscript><subscript><subscript><subscript><subscript>
      https://oparl.example.org/ldf?subject=&amp;predicate=&amp;object=
      </subscript></subscript></subscript></subscript></subscript>
    </para>
    <para>
      Zum Vergleich: Bei einer Abfrage von
      <link linkend="objektlisten">Objektlisten</link> sind Subjekt und
      Prädikat durch die Abfrage festgelegt, nur das Objekt ist
      variabel.
    </para>
    <para>
      Für die Spezifikation des Formats der downloadbaren Dateien wird
      also auf das Objektlisten-Format zurückgegriffen.
    </para>
    <para>
      Wenn das Ergebnis dieser Abfrage in eine Datei geschrieben und als
      solche zum Download angeboten wird, dann kann und soll auf
      <link linkend="paginierung">Paginierung</link> in dieser Datei
      jedoch verzichtet werden, da diesei Daten nur stören würden.
    </para>
    <para>
      TODO: Beispiel und Besonderheiten TODO: SOLL-Anforderung
    </para>
    <para>
      In dieser Version von OParl werden keine Festlegungen getroffen,
      wie ein Client über die URLs der downloadbaren Dateien informiert
      wird. In Frage kommen aber z. B. Links, die auf HTML-Seiten
      plaziert werden.
    </para>
  </sect2>
  <sect2 id="dateizugriff">
    <title>Dateizugriff</title>
    <para>
      Mit dem Begriff &quot;Datei&quot; sind im Sinne dieser
      Spezifikation alle Ressourcen gemeint, die von einem OParl-Server
      zur Verfügung gestellt werden und deren Metadaten über die
      JSON-API als
      <link linkend="oparl_document"><literal>oparl:File</literal></link>
      abgerufen werden können. Es handelt sich dabei beispielsweise um
      Textdokumente im PDF-Format, Abbildungen im JPEG- oder PNG-Format
      etc., die wesentliche Inhalte der parlamentarischen Informationen
      im OParl-System ausmachen.
    </para>
    <para>
      In Bezug auf die Datenvolumen, die der Verkehr zwischen
      OParl-Servern und -Clients ausmacht, kommt dem Dateizugriff eine
      besondere Bedeutung zu. Daher formuliert OParl diesbezüglich
      einige Anforderungen, die helfen sollen, unnötigen Datentransfer
      zu vermeiden.
    </para>
    <para>
      Detail zu sämtlichen angesprochenen Mechanismen sind in den
      verschiedenen Teilen der HTTP-1.1-Spezifikation<footnote>
        <para>
          vgl.
          <ulink url="http://tools.ietf.org/html/rfc7230">http://tools.ietf.org/html/rfc7230</ulink>,
          <ulink url="http://tools.ietf.org/html/rfc7231">http://tools.ietf.org/html/rfc7231</ulink>,
          <ulink url="http://tools.ietf.org/html/rfc7232">http://tools.ietf.org/html/rfc7232</ulink>
        </para>
      </footnote> zu finden.
    </para>
    <sect3 id="get-und-head-anfragen">
      <title>GET und HEAD Anfragen</title>
      <para>
        Grundsätzlich gilt, dass jede Datei mittels HTTP-Anfrage unter
        Verwendung der HTTP-Methode <literal>GET</literal> abrufbar sein
        MUSS. Um Clients zusätzlich die Überprüfung einer Datei zu
        ermöglichen, MUSS vom Server außerdem die HTTP-Methode
        <literal>HEAD</literal> unterstützt werden. Gemäß
        HTTP-Spezifikation gibt der Server in diesem Fall nur die
        Antwort-Header, nicht aber den eigentlichen Inhalt der
        angefragten Ressource, aus.
      </para>
      <para>
        Die URLs zum Abruf der einzelnen Datei (wahlweise mittels GET
        oder HEAD) stellt der Server dem Client in den Daten des
        Metadaten-Objekts zur Verfügung. Details finden sich in der
        Schema-Beschreibung zu
        <link linkend="oparl_document"><literal>oparl:File</literal></link>.
      </para>
    </sect3>
    <sect3 id="allgemeiner-zugriff-und-expliziter-download">
      <title>Allgemeiner Zugriff und expliziter Download</title>
      <para>
        Mit der im <literal>oparl:File</literal> ZWINGEND anzugebenden
        Eigenschaft <literal>accessUrl</literal> liefert der Server dem
        Client eine URL, die wir hier nachfolgend als
        <emphasis>Zugriffs-URL</emphasis> bezeichnen. Diese URL dient
        dem allgemeinen Zugriff auf die Datei. Wie der Client dem
        Endnutzer diesen Zugriff genau ermöglicht, ist nicht Sache der
        OParl-Spezifikation.
      </para>
      <para>
        Im Unterschied dazu KANN der Server dem Client in der
        Eigenschaft <literal>downloadUrl</literal> eine weitere URL
        anbieten, hier <emphasis>Download-URL</emphasis> genannt. Diese
        dient im Gegensatz zur Zugriffs-URL speziell zum Herunterladen
        und Speichern der Datei in einem Dateisystem des Endnutzers. Bei
        Zugriff auf die Download-URL MUSS der Server in der HTTP-Antwort
        einen <literal>Content-Disposition</literal> Header
        senden.<footnote>
          <para>
            vgl. RFC2138
            <ulink url="http://www.ietf.org/rfc/rfc2183">http://www.ietf.org/rfc/rfc2183</ulink>
          </para>
        </footnote> Dieser Header MUSS als ersten Parameter den Typ
        <literal>attachment</literal> sowie den
        <literal>filename</literal>-Parameter mit dem Namen der Datei
        enthalten.
      </para>
      <para>
        Beispiel:
      </para>
      <programlisting>
Content-Disposition: attachment; filename=&quot;2014-08-22 Rat Wortprotokoll.pdf&quot;
</programlisting>
      <para>
        FRAGE: Sind in Dateinamen sinnvoll?
      </para>
      <para>
        Der in diesem Header kommunizierte Dateiname ist als Vorschlag
        an die Nutzerin zu verstehen, die Datei unter diesem Namen zu
        speichern. Entsprechend sind Abwägungen bezüglich der
        Verständlichkeit, Leserlichkeit und Einzigartigkeit des
        Dateinamens, aber auch in Hinblick auf den verwendeten
        Zeichenumfang zu berücksichtigen. Es wird EMPFOHLEN, den
        Dateinamen ausschließlich aus dem ASCII-Zeichenvorrat zu bilden.
        FRAGE: Ist die Beschränkung auf ASCII und damit der Verzicht
        z.B. auf Umlaute erforderlich?
      </para>
      <para>
        Im Unterschied zum Zugriff auf die Download-URL DARF der Server
        beim Zugriff auf die Zugriffs-URL KEINEN
        <literal>Content-Disposition</literal> Header mit Parameter
        <literal>attachment</literal> senden.
      </para>
    </sect3>
    <sect3 id="obligatorische-und-empfohlene-header">
      <title>Obligatorische und empfohlene Header</title>
      <para>
        Ziel ist, dem Client möglichst flexible Möglichkeiten zu geben,
        einen Cache zu überprüfen bzw. zu aktualisieren und vermeidbare
        Anfragen einer Ressource zu vermeiden. Um dies zu unterstützen,
        können laut HTTP-Spezifikationen unterschiedliche Header zum
        Einsatz kommen.
      </para>
      <para>
        Die Auslieferung eines <literal>Last-Modified</literal>-Headers
        gilt für alle OParl-Server beim Zugriff auf eine Datei-URL, sei
        es Download- oder Zugriffs-URL, als ZWINGEND.
      </para>
      <para>
        Darüber hinaus EMPFEHLEN wir, bei Anfrage einer Datei die
        folgenden Header auszuliefern:
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            <literal>Content-Length</literal>: Die Größe des
            Dateiinhalts
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>ETag</literal>: Entity Tag
          </para>
        </listitem>
      </itemizedlist>
    </sect3>
    <sect3 id="conditional-get">
      <title>Conditional GET</title>
      <para>
        Unter einem &quot;Conditional GET&quot; versteht man im
        HTTP-Kontext die Möglichkeit des Clients, die Anfrage einer
        Ressource mit einer Bedingung zu verknüpfen. Der Server
        beantwortet die Anfrage nur dann mit einer vollständigen
        HTTP-Antwort, wenn die Bedingung erfüllt ist. Andernfalls
        enthält die Anfrage lediglich den Header; der HTTP Status-Code
        SOLL in diesem Fall &quot;304&quot; lauten (für &quot;nicht
        geändert&quot;). Dies dient der Schonung von Ressourcen.
      </para>
      <para>
        Für einen OParl-Server wird EMPFOHLEN, die nachstehenden
        Varianten des Conditional GET zu unterstützen:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <literal>If-Modified-Since</literal>: Der Client sendet mit
            der Anfrage als Bedingung ein Datum. Nur wenn die angefragte
            Datei zuletzt <emphasis>nach</emphasis> diesem Datum
            geändert wurde, wird der Dateiinhalt mit der Antwort
            ausgeliefert.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>If-None-Match</literal>: Erlaubt die Formulierung
            der Bedingung anhand eines Entity-Tags.
          </para>
        </listitem>
      </itemizedlist>
    </sect3>
    <sect3 id="zustandsloser-dateizugriff">
      <title>Zustandsloser Dateizugriff</title>
      <para>
        Die Anforderung, dass die OParl-API zustandslos arbeitet (vgl.
        <link linkend="restful">RESTful</link>{#restful}), hat ZWINGEND
        auch für den Abruf von Dateien zu gelten. Es DÜRFEN daher keine
        Session-spezifischen URLs oder Ähnliches für den Dateizugriff
        gebildet werden.
      </para>
      <para>
        Damit wird erreicht, dass Clients die Zugriffs-URLs aus dem
        <literal>oparl:File</literal> für längere Zeit speichern bzw.
        cachen können.
      </para>
    </sect3>
    <sect3 id="weiterleitungen">
      <title>Weiterleitungen</title>
      <para>
        Es ist im Rahmen dieser Spezifikation problemlos möglich, die
        Anfrage an eine Datei-URL mit einer HTTP-Weiterleitung zu
        beantworten, um dem Client eine andere URL zum Zugriff
        mitzuteilen.
      </para>
      <para>
        In diesem Fall wird dringend EMPFOHLEN, die Unterscheidung der
        Bedeutung der HTTP-Status-Codes <literal>301</literal> und
        <literal>307</literal> zu beachten.
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <literal>301</literal> SOLL verwendet werden, wenn die vom
            Client angefragte URL auch zukünftig nicht mehr gültig sein
            wird. Clients erhalten damit das Signal, die bisherige URL
            zu verwerfen und zukünftig die neue, vom Server in der
            Antwort mitgeteilte zu verwenden.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>307</literal> SOLL verwendet werden, wenn die vom
            Client genutzte URL nur temporär auf eine bestimmte andere
            URL weiter leitet. Clients werden so aufgefordert, die
            vorhandene URL auch bei zukünftigen Anfragen zu nutzen.
          </para>
        </listitem>
      </itemizedlist>
    </sect3>
    <sect3 id="entfernte-dateien">
      <title>Entfernte Dateien</title>
      <para>
        Beim Zugriff auf eine Datei, die zuvor einmal abrufbar war, es
        inzwischen jedoch nicht mehr ist, SOLL die HTTP-Antwort des
        Servers den spezifischen Status-Code <literal>410</literal>
        tragen.
      </para>
    </sect3>
  </sect2>
  <sect2 id="content_negotiation">
    <title>Content Negotiation</title>
    <para>
      Das Prinzip <emphasis>Content Negotiation</emphasis> wurde bereits
      in RFC2295<footnote>
        <para>
          RFC2295:
          <ulink url="http://tools.ietf.org/html/rfc2295">http://tools.ietf.org/html/rfc2295</ulink>
        </para>
      </footnote> beschrieben und bedeutet, dass WWW-Server eine
      Ressource in verschiedenen Formaten bereithalten können und
      Clients die Möglichkeit haben, eine Vorliebe für ein bestimmtes
      Format zu übermitteln. Auch die HTTP-1.1-Spezifikation<footnote>
        <para>
          RFC7231:
          <ulink url="http://tools.ietf.org/html/rfc7231#section-3.4">http://tools.ietf.org/html/rfc7231#section-3.4</ulink>
        </para>
      </footnote> schließt Content Negotiation ein.
    </para>
    <para>
      Die Idee hinter Content Negotiation ist, dass ein Client die von
      ihm akzeptierten Repräsentationen im
      <literal>Accept</literal>-Header der HTTP-Anfrage mitsendet, damit
      der Server gemäß Spezifikation die am besten passende und von ihm
      unterstützte Repräsentation an den Client ausliefert.
    </para>
    <para>
      Grundanforderung der vorliegenden Spezifikation an OParl-Clients
      ist, dass sie bei jeder Anfrage an einen OParl-Server einen
      Accept-Header mit dem Mime-Type
      <literal>application/ld+json</literal> senden MÜSSEN, es sei denn,
      es handelt sich um einen
      <link linkend="dateizugriff">Dateizugriff</link>.
    </para>
    <para>
      Im Kontext von OParl soll durch Unterstützung von Content
      Negotiation ermöglicht werden, dass die URLs von OParl-Objekten
      auch von WWW-Clients aufgerufen werden können, die nicht
      unmittelbar in Kenntnis der OParl-Spezifikation entwickelt wurden.
    </para>
    <para>
      Ein Beispiel für einen solchen Client wäre ein üblicher Browser.
      Ruft dieser die URL einer Drucksache (OParl-Objekttyp
      <literal>oparl:Paper</literal>) auf, sendet er entweder keinen
      <literal>Accept</literal>-Header oder aber einen solchen, der eine
      Bevorzugung von Inhaltstypen wie HTML angibt.
    </para>
    <para>
      Der Server DARF nun, da kein Accept-Header mit dem Typ
      <literal>application/ld+json</literal> gesendet wurde, dem Client
      eine alternative Version der Information über die Drucksache
      ausliefern, beispielsweise eine HTML-Ansicht.
    </para>
    <para>
      Ein Server DARF eine alternative Inhaltsform auch in Form einer
      HTTP-Weiterleitung anbieten.
    </para>
  </sect2>
  <sect2 id="http-kompression">
    <title>HTTP-Kompression</title>
    <para>
      Die zwischen Servern und Clients übertragenen Datenvolumen SOLLEN
      mit Hilfe von Kompressionsverfahren reduziert werden, wenn sowohl
      der Client als auch der Server dies unterstützen. Dabei kommt das
      in HTTP 1.1<footnote>
        <para>
          RFC7231 Section 5.3.4:
          <ulink url="http://tools.ietf.org/html/rfc7231#section-5.3.4">http://tools.ietf.org/html/rfc7231#section-5.3.4</ulink>
        </para>
      </footnote> beschriebene Verfahren zum Einsatz.
    </para>
    <para>
      HTTP 1.1 stellt drei komprimierte Kodierungen vor, wobei die Liste
      durch Registrierung neuer Verfahren bei der IANA erweitert werden
      kann. Diese sind:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          gzip
        </para>
      </listitem>
      <listitem>
        <para>
          compress
        </para>
      </listitem>
      <listitem>
        <para>
          deflate
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Server-Implementierer SOLLEN mindestens eines dieser drei
      Verfahren unterstützen, wenn Clients dies mittels
      Accept-Encoding-Header anfragen.
    </para>
    <para>
      Die Verwendung von HTTP-Kompression ist grundsätzlich sowohl bei
      JSON-Daten als auch bei Dateizugriffen möglich. Bei Dateizugriffen
      sind die zu erwartenden Einsparungen beim Datenvolumen stark
      abhängig vom jeweiligen Dateifomat. Bei bereits komprimierten
      Dateien wie beispielsweise OpenOffice oder PDF lassen sich oft nur
      geringe oder gar keine weiteren Ersparnisse erzielen. Daher DARF
      grundsätzlich der Server in solchen Fällen eine unkomprimierte
      HTTP-Antwort senden, auch wenn der Client ein unterstütztes
      Kompressionsverfahren angefragt hat.
    </para>
  </sect2>
  <sect2 id="ausnahmebehandlung">
    <title>Ausnahmebehandlung</title>
    <para>
      Nicht immer kann ein Server die Anfrage eines Clients erfolgreich,
      also im Sinne der Anfrage, behandeln und eine entsprechende
      Antwort liefern. Beispiele für solche Ausnahmefälle könnten sein
      (ohne Anspruch auf Vollständigkeit):
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Eine angefragte Ressource existiert nicht
        </para>
      </listitem>
      <listitem>
        <para>
          Eine angefragte Ressource existiert nicht mehr
        </para>
      </listitem>
      <listitem>
        <para>
          Der Client nutzt eine nicht unterstützte HTTP-Methode, z. B.
          <literal>POST</literal>
        </para>
      </listitem>
      <listitem>
        <para>
          Der Client nutzt einen nicht interpretierbaren URL-Parameter
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Die HTTP-1.1-Spezifikation sieht für derartige und weitere
      Ausnahmefälle zahlreiche spezifische Status-Codes vor, die hier
      nicht wiederholt werden sollen. Verallgemeinernd lautet die
      Anforderung an jeden OParl-Server, dass diese Ausnahmen mit den
      entsprechenden HTTP-Status-Codes beantworten SOLLEN. Damit wird
      Client-Entwicklern die Möglichkeit gegeben, diese Fälle
      entsprechend zu behandeln.
    </para>
    <para>
      Clients DÜRFEN darüber hinaus nicht davon ausgehen, dass mit der
      HTTP-Antwort im Fall einer Ausnahme noch weitere verwertbare
      Informationen wie z. B. eine Fehlermeldung gesendet werden.
    </para>
  </sect2>
  <sect2 id="liste-reservierter-url-parameter">
    <title>Liste reservierter URL-Parameter</title>
    <para>
      Die in dieser Liste enthaltenen Zeichenketten haben eine
      reservierte Bedeutung und stehen bei Implementierungen eines
      OParl-Servers nicht mehr für die freie Verwendung in URLs zur
      Verfügung.
    </para>
    <variablelist spacing="compact">
      <varlistentry>
        <term>
          <literal>callback</literal>:
        </term>
        <listitem>
          <para>
            Mit diesem Parameter wird die JSONP-Ausgabe aktiviert. Mehr
            dazu im Abschnitt <link linkend="jsonp">JSONP</link>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>startdate</literal>:
        </term>
        <listitem>
          <para>
            Parameter für die Einschränkung einer Abfrage anhand eines
            Datums bzw. einer Zeitangabe.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>enddate</literal>:
        </term>
        <listitem>
          <para>
            Parameter für die Einschränkung einer Abfrage anhand eines
            Datums bzw. einer Zeitangabe.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>listformat</literal>:
        </term>
        <listitem>
          <para>
            Parameter zur Steuerung der Listenausgabe. Siehe dazu:
            <link linkend="objektlisten_listformat">Objektlisten:
            Kompakte und vollständige Form</link>
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>subject</literal>:
        </term>
        <listitem>
          <para>
            Eventuelle Verwendung für Linked Data Fragments
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>predicate</literal>:
        </term>
        <listitem>
          <para>
            Eventuelle Verwendung für Linked Data Fragments
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>object</literal>:
        </term>
        <listitem>
          <para>
            Eventuelle Verwendung für Linked Data Fragments
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect2>
</sect1>
<sect1 id="schema">
  <title>Schema</title>
  <para>
    Dieses Kapitel beschreibt das Schema von OParl. Das Schema bildet
    das Datenmodell der OParl-Architektur ab. Es definiert, welche
    Objekttypen über eine OParl-API abgerufen werden können und welche
    Eigenschaften diese Objekttypen haben dürfen und müssen. Darüber
    hinaus ist im Schema auch festgelegt, in welcher Beziehung
    verschiedene Objekttypen zu einander stehen.
  </para>
  <figure>
    <title>OParl Objekttypen: Ein Überblick</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/objekttypen_graph.png" />
      </imageobject>
      <textobject><phrase>OParl Objekttypen: Ein
      Überblick</phrase></textobject>
    </mediaobject>
  </figure>
  <sect2 id="übergreifende-aspekte">
    <title>Übergreifende Aspekte</title>
    <sect3 id="unicode_zeichenketten">
      <title>Unicode-Zeichenketten als Standard</title>
      <para>
        Die Schema-Beschreibung gibt zu jeder Eigenschaft eines
        Objekttypen an, welchen Typ der Wert dieser Eigenschaft haben
        muss.
      </para>
      <para>
        Sofern keine Typ-Angabe zu einer Eigenschaft vorhanden ist, oder
        die Typ-Angabe <literal>String</literal> oder
        <literal>xsd:string</literal> lautet, werden
        Unicode-Zeichenketten als Datentyp erwartet.
      </para>
    </sect3>
    <sect3 id="null-werte-und-leere-werte">
      <title><literal>null</literal>-Werte und &quot;leere&quot;
      Werte</title>
      <para>
        JSON erlaubt es grundsätzlich, Eigenschaften mit dem Wert
        <literal>null</literal> zu versehen. Ein
        <emphasis>Client</emphasis> MUSS <literal>null</literal>-Werte
        tolerieren und SOLL diese Eigenschaften nicht anders anzeigen,
        als nicht vorhandene Eigenschaften.
      </para>
      <para>
        Entsprechendes gilt für leere Wertemengen oder -listen, also
        <literal>[]</literal>, und leere Objekte, also
        <literal>{}</literal>.
      </para>
      <para>
        Dafür gibt es zwei Gründe. Einerseits wird dadurch die Umgehung
        des Zwangs zur Angabe von Werten bei ZWINGENDEN Eigenschaften
        ausgeschlossen. Andererseits enthalten solche Leerkonstruktionen
        keine verwendbare Information.
      </para>
    </sect3>
    <sect3 id="urls-der-eigenschaften">
      <title>URLs der Eigenschaften</title>
      <para>
        Jede Eigenschaft ist unter einer URL identifizierbar.
      </para>
    </sect3>
    <sect3 id="verwendung-externer-eigenschaften-abgeleitete-eigenschaften">
      <title>Verwendung externer Eigenschaften / abgeleitete
      Eigenschaften</title>
      <para>
        Verschiedene Eigenschaften sind nicht in OParl selbst definiert,
        sondern in anderen externen Vokabularen. Dabei legt die
        Oparl-Spezifikation jeweils fest, ob die Original-Eigenschaft
        verwendet wird oder ob für OParl eine abgeleitete Eigenschaft
        verwendet wird.
      </para>
      <para>
        So ist für eine Eigenschaft
        <literal>classification&quot; von Gruppierungen eine Verwendung von</literal>org:classification<literal>ebenso denkbar wir die Verwendung von</literal>oparl:classification`.
        Im zweiten Fall wird die Eigenschaft als Untereigenschaft der
        Ausgangseigenschaft definiert. Die Ausgangseigenschaft wird dann
        jeweils hinter &quot;Abgeleitet von:&quot; angeben.
      </para>
      <para>
        Auf die Bedeutung dieses Unterschiedes und der
        Untereigenschafts-Beziehung wird an dieser Stelle nicht weiter
        eingegangen Stichwort: <literal>owl:subPropertyOf</literal>).
        Unterschiede kann es z.B. bei den Wertebereichen geben.
      </para>
      <para>
        Der Name der Ausdgangseigenschaft muss nicht übernommen werden.
        In OParl wird aber in der Regel der jeweilige Ausgangsname
        verwendet.
      </para>
    </sect3>
    <sect3 id="kardinalität">
      <title>Kardinalität</title>
      <para>
        Viele Eigenschaften erlauben es, entweder einen einzelnen Wert
        (z. B. eine Zeichenkette, eine URL, eine Zahl) oder alternativ
        eine Liste mit mehreren Elementen des jeweils erlaubten Typs
        auszugeben. Die entsprechende Regel ist in der
        Schema-Beschreibung unter dem Stichwort
        <emphasis>Kardinalität</emphasis> angegeben. Dabei sind
        verschiedene Angaben zur Eigenschaft möglich:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            0 bis 1: OPTIONAL und MUSS NICHT gesetzt sein. Wenn sie
            gesetzt ist, DARF sie genau einen Wert haben.
          </para>
        </listitem>
        <listitem>
          <para>
            1: MUSS gesetzt sein und genau einen Wert haben.
          </para>
        </listitem>
        <listitem>
          <para>
            0 bis *: OPTIONAL und MUSS NICHT gesetzt sein. Wenn sie
            gesetzt ist, DARF sie beliebig viele Werte haben.
          </para>
        </listitem>
        <listitem>
          <para>
            1 bis *: MUSS vorhanden sein, es MUSS mindestens ein Wert
            gesetzt sein. Es DÜRFEN auch mehrere Werte vorhanden sein.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Zur Ausgabe von Listen innerhalb eines Objekts sowie über eigene
        URLs finden sich ausführlichere Erläuterungen im Abschnitt
        <link linkend="objektlisten">Objektlisten</link>.
      </para>
    </sect3>
    <sect3 id="datum_zeit">
      <title>Datums- und Zeitangaben</title>
      <para>
        Für Datum und Zeit werden die in XML-Schema festgelegten Typen
        verwendet (was nicht bedeutet, dass in OParl XML verwendet
        wird).
      </para>
      <para>
        Für ein Datum wird http://www.w3.org/TR/xmlschema-2/#date
        verwendet und für eine Zeit
        http://www.w3.org/TR/xmlschema-2/#dateTime. Dabei wird ein Datum
        (ein Tag ohne Uhrzeit) ohne Zeitzone und ein Datum mit Zeit mit
        Zeitzone angegeben, denn nur damit ist die Uhrzeit weltweit
        eindeutig ohne zusätzlich auf den Ort einer Sitzung o. ä. Bezug
        nehmen zu müssen.
      </para>
      <para>
        Diese Spezifikationen stützen sich auf RFC 3339<footnote>
          <para>
            RFC3339:
            <ulink url="http://www.ietf.org/rfc/rfc3339.txt">http://www.ietf.org/rfc/rfc3339.txt</ulink>
          </para>
        </footnote>) und RFC 3339 wiederum auf ISO 8601.
      </para>
      <para>
        In der vorliegenden Spezifikation verwenden wir den Präfix
        <literal>xsd</literal>, um Eigenschaften aus der
        XMLSchema-Spezifikation zu referenzieren.<footnote>
          <para>
            Der Präfix &quot;xsd&quot; steht somit für die URL
            <ulink url="http://www.w3.org/2001/XMLSchema#">http://www.w3.org/2001/XMLSchema#</ulink>
          </para>
        </footnote>. Datums- und Zeittyp werden entsprechend in diesem
        Dokument als <literal>xsd:date</literal> bzw.
        <literal>xsd:dateTime</literal> bezeichnet.
      </para>
    </sect3>
    <sect3 id="vokabulare_klassifizierung">
      <title>Vokabulare zur Klassifizierung</title>
      <para>
        Einige Objekttypen besitzen Eigenschaften zum Zweck der
        Klassifizierung von Objekten. Im Einzelnen sind dies:
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            <literal>classification</literal> des Objekttyps
            <link linkend="oparl_organization"><literal>oparl:Organization</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>documentRole</literal> des Objekttyps
            <link linkend="oparl_document"><literal>oparl:File</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>formOfAddress</literal> des Objekttyps
            <link linkend="oparl_person"><literal>oparl:Person</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>keyword</literal> in mehreren Objekttypen
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>paperType</literal> des Objekttyps
            <link linkend="oparl_paper"><literal>oparl:Paper</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>post</literal> des Objekttyps
            <link linkend="oparl_organization"><literal>oparl:Organization</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>result</literal> des Objekttyps
            <link linkend="oparl_agendaitem"><literal>oparl:AgendaItem</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>role</literal> des Objekttyps
            <link linkend="oparl_consultation"><literal>oparl:Consultation</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>role</literal> des Objekttyps
            <link linkend="oparl_membership"><literal>oparl:Membership</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>role</literal> des Objekttyps
            <link linkend="oparl_person"><literal>oparl:Person</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>status</literal> des Objekttyps
            <link linkend="oparl_person"><literal>oparl:Person</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>title</literal> des Objekttyps
            <link linkend="oparl_person"><literal>oparl:Person</literal></link>
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Diese Eigenschaften können als Wert wahlweise einfache
        Zeichenketten (Strings) haben, z. B.
        <literal>&quot;Beantwortung einer Anfrage&quot;</literal> oder
        aber URLs. Wenn eine URL verwendet wird, MUSS diese auf ein
        JSON-LD-Objekt<footnote>
          <para>
            JSON-LD 1.0:
            <ulink url="http://www.w3.org/TR/json-ld/">http://www.w3.org/TR/json-ld/</ulink>
          </para>
        </footnote> vom Typ <literal>skos:Concept</literal> zeigen.
        Dieses Objekt MUSS eine Eigenschaft <literal>prefLabel</literal>
        besitzen, in dem die benutzerfreundliche Benennung des Konzepts
        wiedergegeben wird.<footnote>
          <para>
            Diese Konstrukte entstammen dem <emphasis>Simple Knowledge
            Organization System</emphasis> (SKOS):
            <ulink url="http://www.w3.org/2009/08/skos-reference/skos.html">http://www.w3.org/2009/08/skos-reference/skos.html</ulink>
          </para>
        </footnote>
      </para>
      <para>
        Ein Beispiel für ein <literal>skos:Concept</literal> Objekt, wie
        es für die Eigenschaft <literal>status</literal> eines Objekts
        vom Typ <literal>oparl:Person</literal> genutzt werden kann:
      </para>
      <programlisting language="json">
{
    &quot;@context&quot;: {
        &quot;prefLabel&quot;: {
            &quot;@id&quot;: &quot;http://www.w3.org/2004/02/skos/core#prefLabel&quot;
        }
    },
    &quot;@type&quot;: &quot;http://www.w3.org/2004/02/skos/core#Concept&quot;,
    &quot;prefLabel&quot;: &quot;Ratsherr | Ratsfrau&quot;
}
</programlisting>
      <para>
        Das Objekt darf unter einer beliebigen URL abgelegt werden.
        Diese kann, muss aber nicht Teil des jeweiligen OParl-Systems
        sein.
      </para>
      <para>
        Sinnvoll wird die Verwendung von URLs zur Klasifizierung, wenn
        mehrere Systeme auf die selben URLs verweisen, damit also ein
        gemeinsames Vokabular zur Klassifizierung nutzen. Die Verwendung
        eines übergreifenden Vokabulars soll dazu beitragen, dass die
        automatisierte Auswertung von parlamentarischen Informationen
        über die Grenzen einzelner Systeme hinweg deutlich erleichtert
        wird. So könnte beispielsweise eine bestimmte Art von Drucksache
        über Systemgrenzen hinweg als solche erkannt werden, wenn die
        Systeme auf das selbe <literal>skos:Concept</literal> Objekt
        verweisen.
      </para>
      <para>
        Für die Zukunft ist geplant, dass OParl hierzu Vokabulare mit
        entsprechenden SKOS-Objekten zur Verfügung stellt, die dann von
        Datenanbietern per URL referenziert werden können.
      </para>
      <para>
        Da die <literal>skos:Concept</literal> Objekte, die über eine
        URL verlinkt werden, praktisch keinen Änderungen unterliegen,
        SOLLEN Clients diese Ressourcen nur selten abrufen und das
        Ergebnis der Anfragen in ihrem eigenen Cache speichern. Server
        SOLLEN das Caching unterstützen, indem Sie die üblichen
        Mechanismen von HTTP-Headern wie <literal>Expires</literal> und
        <literal>Max-age</literal> nutzen.
      </para>
    </sect3>
    <sect3 id="herstellerspezifische-erweiterungen">
      <title>Herstellerspezifische Erweiterungen</title>
      <para>
        Diese sind – falls tatsächlich erforderlich – mit den
        JSON-LD-Mitteln einfach möglich. Z. B.
      </para>
      <programlisting>
&quot;herstellera:newWonderProperty&quot;: &quot;Dies ist ein Feature,
    welches noch kein anderer Hersteller bietet!&quot;
</programlisting>
    </sect3>
    <sect3 id="url-pfade-in-den-beispielen">
      <title>URL-Pfade in den Beispielen</title>
      <para>
        OParl-Clients wissen <emphasis>nichts</emphasis> vom Aufbau von
        Pfaden innerhalb von URLs, müssen dies nicht wissen, und es gibt
        deshalb in der OParl-Spezifikation <emphasis>keine</emphasis>
        Festlegungen dazu.
      </para>
      <para>
        Wenn der Betreiber eines OParl-Systems beispielsweise meint,
        dass eine Person eine eigene Domain verdient, dann ist dies aus
        Sicht der OParl-Spezifikation völlig in Ordnung:
      </para>
      <programlisting>
https://ratsmitglied-max-mustermann.example.org/mein-oparl-datensatz
</programlisting>
      <para>
        Noch etwas extremer: selbst eine eigene Domain für jedes
        einzelne OParl-Objekt würde der OParl-Spezifikation nicht
        widersprechen.
      </para>
      <para>
        Wenn also in einer Beispiel-URL so etwas wie
      </para>
      <programlisting>
bodies/0/peoples/
</programlisting>
      <para>
        auftaucht, dann bedeutet das nicht, dass genau solche Pfade
        durch die OParl-Spezifikation vorgeschrieben sind.
      </para>
      <para>
        Auch dies wäre als absoluter Link z. B. für eine Person
        verwendbar:
      </para>
      <programlisting>
https://www.ratsinfomanagement.net/personen/?__=LfyIfvCWq8SpBQj0MiyHaxDZwGJ
</programlisting>
      <para>
        Dies käme dann als relativer Link für die Person in Frage:
      </para>
      <programlisting>
personen/?__=LfyIfvCWq8SpBQj0MiyHaxDZwGJ
</programlisting>
      <para>
        oder auch z. B. dies
        <subscript><subscript>~</subscript>~</subscript>~~
        LfyIfvCWq8SpBQj0MiyHaxDZwGJ
        <subscript><subscript>~</subscript>~</subscript>~~
      </para>
      <para>
        Gleichzeitig ist aber aus verschiedenen Gründen ein
        strukturierter Aufbau der Pfade durchaus sinnvoll, der sich an
        der Hierarchie der Objekte orientiert (nicht zuletzt, weil dies
        Softwareentwicklern während der Entwicklung helfen kann).
        Dennoch wird eine solche Struktur bewusst nicht in OParl
        festgelegt.
      </para>
    </sect3>
  </sect2>
  <sect2 id="eigenschaften-mit-verwendung-in-mehreren-objekttypen">
    <title>Eigenschaften mit Verwendung in mehreren Objekttypen</title>
    <sect3 id="id">
      <title><literal>@id</literal></title>
      <para>
        Die Eigenschaft <literal>@id</literal> ist durch die
        JSON-LD-Spezifikation vorgegeben und enthält einen eindeutigen
        Bezeichner des Objekts, nämlich seine URL. Siehe dazu auch
        <link linkend="benannte_objekte">Benannte Objekte</link>. Dies
        ist ein ZWINGENDES Merkmal für jedes Objekt.
      </para>
    </sect3>
    <sect3 id="type">
      <title><literal>@type</literal></title>
      <para>
        Objekttypenangabe des Objekts im Sinne von JSON-LD. ZWINGEND für
        jedes Objekt. Der Wert ist (in Verbindung mit dem
        JSON-LD-Kontext eines Objekts) eine URL, unter der weitere
        Informationen über den Objekttyp angeboten werden KÖNNEN.
      </para>
    </sect3>
    <sect3 id="name-und-shortname">
      <title><literal>name</literal> und
      <literal>shortName</literal></title>
      <para>
        Beide Eigenschaften können bei vielen Objekttypen genutzt
        werden, um den Namen des Objekts anzugeben. Üblicherweise ist
        <literal>name</literal> eine Pflichteigenschaft für den
        ausgeschriebenen offiziellen Namen, während
        <literal>shortName</literal> optional angegeben werden kann.
        Dies ist dann zu empfehlen, wenn zu einem Namen eine kurze bzw.
        kompakte und eine längere, aber weniger nutzerfreundliche
        Variante existieren. Ein Beispiel wäre die offizielle Kurzform
        &quot;CDU&quot; für den offiziellen Parteinamen &quot;Christlich
        Demokratische Union Deutschlands&quot;.
      </para>
      <para>
        Die Werte von <literal>name</literal> und
        <literal>shortName</literal> SOLLEN nicht identisch sein.
      </para>
    </sect3>
    <sect3 id="license">
      <title><literal>license</literal></title>
      <para>
        Die Eigenschaft <literal>license</literal> erlaubt es, am
        jeweiligen Objekt die URL einer Lizenz anzugeben. Damit wird
        gekennzeichnet, welche Lizenz der Veröffentlicher der Daten für
        das jeweilige Objekt vergibt.<footnote>
          <para>
            Verzeichnisse für Lizenz-URLs sind unter anderem unter
            <ulink url="http://licenses.opendefinition.org/">http://licenses.opendefinition.org/</ulink>
            und
            <ulink url="https://github.com/fraunhoferfokus/ogd-metadata/blob/master/lizenzen/deutschland.json">https://github.com/fraunhoferfokus/ogd-metadata/blob/master/lizenzen/deutschland.json</ulink>
            zu finden.
          </para>
        </footnote>
      </para>
      <para>
        Eine besondere Bedeutung hat die Eigenschaft
        <literal>license</literal>, wenn sie am
        <literal>oparl:System</literal> Objekt oder am
        <literal>oparl:Body</literal> Objekt vergeben wird. Die hier
        angegebene Lizenzinformation sagt aus, dass alle Objekte dieses
        Systems bzw. der Körperschaft unter der angegebenen Lizenz
        veröffentlicht werden, sofern dies nicht am jeweiligen Objekt
        mit einer anders lautenden Lizenz-URL überschrieben wird. Daher
        wird dringend EMPFOHLEN, die Lizenzinformation global am
        <literal>oparl:System</literal> Objekt mitzuteilen und auf
        redundante Informationen zu verzichten.
      </para>
      <para>
        An Objekten vom Typ <literal>oparl:File</literal> auftretend,
        bezieht sich die Lizenzinformation nicht nur auf die
        strukturierten Metadaten, die über die API bezogen werden,
        sondern auch auf den eigentlichen Inhalt der Datei(en), die über
        die angebotene(n) URL(s) abgerufen werden können.
      </para>
      <para>
        Lesenswert zum Thema Lizensierung von Linked Data ist auch er
        Abschnitt &quot;Licenses, Waivers and Norms for Data&quot; im
        online zugänglichen Linked Data Book.<footnote>
          <para>
            Tom Heath, Christian Bizer: Linked Data: Evolving the Web
            into a Global Data Space (1st edition),
            <ulink url="http://linkeddatabook.com/editions/1.0/#htoc48">http://linkeddatabook.com/editions/1.0/#htoc48</ulink>
          </para>
        </footnote>
      </para>
    </sect3>
    <sect3 id="created">
      <title><literal>created</literal></title>
      <para>
        Datum und Uhrzeit der Erstellung des jeweiligen Objekts.
      </para>
      <para>
        Datentyp: <literal>xsd:dateTime</literal>.
      </para>
    </sect3>
    <sect3 id="modified">
      <title><literal>modified</literal></title>
      <para>
        Diese Eigenschaft kennzeichnet stets Datum und Uhrzeit der
        letzten Änderung des jeweiligen Objekts.
      </para>
      <para>
        In Einzelfällen unterliegt die Frage, was als Änderung eines
        Objekts bezeichnet werden kann, einem gewissen
        Interpretationsspielraum. Beispielsweise ist zu entscheiden, ob
        eine Gruppierung (<literal>oparl:Organization</literal>) als
        geändert gilt, wenn ein neues Mitglied hinzugefügt wurde.
      </para>
      <para>
        Diese Frage sollte aus Sicht des OParl-Clients beantwortet
        werden. Wenn beispielsweise eine Gruppierung vom Server
        grundsätzlich mit der Liste der URLs aller Mitglieder ausgegeben
        wird, umfasst das Objekt aus Sicht des Clients eben auch die
        Liste der Mitglieder. In diesem Fall wäre eine Veränderung der
        Liste der Mitglieder als Änderung des Objekts zu verstehen, die
        im <literal>modified</literal> Zeitstempel widerspiegeln sollte.
      </para>
      <para>
        Datentyp: <literal>xsd:dateTime</literal>.
      </para>
    </sect3>
    <sect3 id="keyword">
      <title><literal>keyword</literal></title>
      <para>
        Die Eigenschaft <literal>keyword</literal> dient der
        Kategorisierung von Objekten und ist in einer Vielzahl von
        Objekttypen zu diesem Zweck einsetzbar.
      </para>
      <para>
        Mehr zur Funktionsweise dieser Eigenschaft wird im Abschnitt
        <link linkend="vokabulare_klassifizierung">Vokabulare zur
        Klassifizierung</link> beschrieben.
      </para>
    </sect3>
  </sect2>
  <sect2 id="oparl_system">
    <title>oparl:System (System)</title>
    <para>
      Der Objekttyp <literal>oparl:System</literal> bildet grundlegende
      Informationen zum parlamentarischen Informationssystem ab. Das
      Objekt repräsentiert das technische System, unabhängig von der
      Frage, welche Körperschaften auf diesem System vertreten sind.
    </para>
    <para>
      Auf jedem OParl-Server MUSS ein Objekt vom Typ
      <literal>oparl:System</literal> vorgehalten werden. Es DARF nur
      ein einziges solches Objekt je Server existieren.
    </para>
    <para>
      Für Clients ist das <literal>oparl:System</literal> Objekt ein
      geeigneter Einstiegspunkt, um grundlegende Informationen über das
      System zu bekommen und die URLs zum Zugriff auf andere
      Informationen in Erfahrung zu bringen.
    </para>
    <para>
      Die URL des <literal>oparl:System</literal>-Objekts MUSS per
      Definition identisch mit der URL des API-Endpunkts des Servers
      sein.
    </para>
    <para>
      <emphasis role="strong">Beispiel</emphasis>
    </para>
    <programlisting language="json">
{
    &quot;id&quot;: &quot;https://oparl.example.org/&quot;,
    &quot;type&quot;: &quot;http://oparl.org/schema/1.0/System&quot;,
    &quot;oparlVersion&quot;: &quot;http://oparl.org/specs/1.0/&quot;,
    &quot;name&quot;: &quot;Beispiel-System&quot;,
    &quot;website&quot;: &quot;http://www.example.org/&quot;,
    &quot;contactEmail&quot;: &quot;mailto:info@example.org&quot;,
    &quot;contactName&quot;: &quot;Allgemeiner OParl Kontakt&quot;,
    &quot;vendor&quot;: &quot;http://example-software.com/&quot;,
    &quot;product&quot;: &quot;http://example-software.com/oparl-server/&quot;,
    &quot;body&quot;: &quot;https://oparl.example.org/bodies/&quot;,
    &quot;newObjects&quot;: &quot;https://oparl.example.org/new_objects/&quot;,
    &quot;updatedObjects&quot;: &quot;https://oparl.example.org/updated_objects/&quot;,
    &quot;removedObjects&quot;: &quot;https://oparl.example.org/removed_objects&quot;
}
</programlisting>
    <sect3 id="eigenschaften">
      <title>Eigenschaften</title>
      <variablelist>
        <varlistentry>
          <term>
            <literal>oparlVersion</literal>
          </term>
          <listitem>
            <para>
              Die URL der OParl-Spezifikation, die von diesem Server
              unterstützt wird. Der Wert MUSS die URL
              <literal>http://oparl.org/specs/1.0/</literal> sein. Typ:
              URL. Kardinalität: 1. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>body</literal>
          </term>
          <listitem>
            <para>
              Liste der URLs der
              <link linkend="oparl_body"><literal>oparl:Body</literal></link>-Objekte,
              also der Körperschaften, die auf dem System vorliegen.
              Alternativ kann statt einer Liste eine einzelne URL zum
              Abruf der Liste angeboten werden. Typ: URL des
              <literal>oparl:Body</literal> Objekts Kardinalität: 1.
              ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>name</literal>
          </term>
          <listitem>
            <para>
              Nutzerfreundlicher Name für das System, mit dessen Hilfe
              Nutzer das System erkennen und von anderen unterscheiden
              können. Typ: String. Kardinalität: 0 bis 1. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>contactEmail</literal>
          </term>
          <listitem>
            <para>
              E-Mail-Adresse für Anfragen zur OParl-API. Die Angabe
              einer E-Mail-Adresse dient sowohl Nutzerinnen wie auch
              Entwicklerinnen von Clients zur Kontaktaufnahme mit dem
              Betreiber. Typ: E-Mail-Adresse inklusive
              &quot;mailto:&quot; Kardinalität: 0 bis 1. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>contactName</literal>
          </term>
          <listitem>
            <para>
              Name des Ansprechpartners oder der Abteilung, die über die
              <literal>contactEmail</literal> erreicht werden kann. Typ:
              String. Kardinalität: 0 bis 1. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>newObjects</literal>
          </term>
          <listitem>
            <para>
              URL des Feeds <link linkend="feed_neue_objekte">&quot;Neue
              Objekte&quot;</link>. Typ: URL. Kardinalität: 0 bis 1.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>updatedObjects</literal>
          </term>
          <listitem>
            <para>
              URL des Feeds
              <link linkend="feed_geaenderte_objekte">&quot;Geänderte
              Objekte&quot;</link>. Typ: URL. Kardinalität: 0 bis 1.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>removedObjects</literal>
          </term>
          <listitem>
            <para>
              URL des Feeds
              <link linkend="feed_entfernte_objekte">&quot;Entfernte
              Objekte&quot;</link>. Typ: URL. Kardinalität: 0 bis 1.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>website</literal>
          </term>
          <listitem>
            <para>
              URL zur WWW-Oberfläche des parlamentarischen
              Informationssystems. Typ: URL. Kardinalität: 0 bis 1.
              OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>vendor</literal>
          </term>
          <listitem>
            <para>
              Software-Anbieter, von dem die OParl-Server-Software
              stammt. Typ: URL. Kardinalität: 0 bis 1. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>product</literal>
          </term>
          <listitem>
            <para>
              Informationen zu der auf dem System genutzten
              OParl-Server-Software. Typ: URL. Kardinalität: 0 bis 1.
              OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect3>
  </sect2>
  <sect2 id="oparl_body">
    <title>oparl:Body (Körperschaft)</title>
    <para>
      Der Objekttyp <literal>oparl:Body</literal> dient dazu, eine
      Körperschaft und damit ein Parlament zu repräsentieren, zu dem der
      Server Informationen bereithält. Eine Körperschaft kann
      beispielsweise eine Gemeinde, ein Landkreis oder ein kommunaler
      Zweckverband sein.
    </para>
    <para>
      Hätte das System beispielsweise den Zweck, Informationen über das
      kommunale Parlament der Stadt Köln, namentlich den Rat der Stadt
      Köln, abzubilden, dann müsste dieses System dazu ein Objekt vom
      Typ <literal>oparl:Body</literal> führen, welches die Stadt Köln
      repräsentiert.
    </para>
    <para>
      Vom OParl-Server wird erwartet, dass er mindestens ein Objekt vom
      Typ <literal>oparl:Body</literal> bereit hält. Teilen sich mehrere
      Körperschaften das selbe technische System, können auf demselben
      Server auch mehrere Objekte vom Typ <literal>oparl:Body</literal>
      beherbergt werden.
    </para>
    <para>
      Über die Zuordnung zu einem bestimmten
      <literal>oparl:Body</literal>-Objekt zeigen andere Objekte, wie
      beispielsweise Gremien oder Drucksachen, ihre Zugehörigkeit zu
      einer bestimmten Körperschaft und damit implizit zu einem
      bestimmten Parlament an.
    </para>
    <para>
      <emphasis role="strong">Beispiel</emphasis>
    </para>
    <programlisting language="json">
{
    &quot;id&quot;: &quot;https://oparl.example.org/body/0&quot;,
    &quot;type&quot;: &quot;http://oparl.org/schema/1.0/Body&quot;,
    &quot;system&quot;: &quot;https://oparl.example.org/&quot;,
    &quot;contactEmail&quot;: &quot;mailto:ris@beispielstadt.de&quot;,
    &quot;contactName&quot;: &quot;RIS-Betreuung&quot;,
    &quot;rgs&quot;: &quot;053150000000&quot;,
    &quot;equivalentBody&quot;: [
        &quot;http://d-nb.info/gnd/2015732-0&quot;,
        &quot;http://dbpedia.org/resource/Cologne&quot;
    ],
    &quot;shortName&quot;: &quot;Stadt Köln&quot;,
    &quot;name&quot;: {
        &quot;de&quot;: &quot;Stadt Köln, kreisfreie Stadt&quot;,
        &quot;en&quot;: &quot;City of Cologne&quot;
    },
    &quot;website&quot;: &quot;http://www.beispielstadt.de/&quot;,
    &quot;license&quot;: &quot;http://creativecommons.org/licenses/by/4.0/&quot;,
    &quot;licenseValidSince&quot;: &quot;2014-01-01&quot;,
    &quot;organization&quot;: &quot;https://oparl.example.org/body/0/organizations/&quot;,
    &quot;meeting&quot;: &quot;https://oparl.example.org/body/0/meetings/&quot;,
    &quot;paper&quot;: &quot;https://oparl.example.org/body/0/papers/&quot;,
    &quot;member&quot;: &quot;https://oparl.example.org/body/0/people/&quot;,
    &quot;legislativeTerm&quot;: &quot;https://oparl.example.org/body/0/terms/&quot;,
    &quot;classification&quot;: &quot;https://oparl.example.org/vocab/landkreis&quot;,
    &quot;created&quot;: &quot;2014-01-08T14:28:31.568+0100&quot;,
    &quot;modified&quot;: &quot;2014-01-08T14:28:31.568+0100&quot;
}
</programlisting>
    <sect3 id="eigenschaften-1">
      <title>Eigenschaften</title>
      <variablelist>
        <varlistentry>
          <term>
            <literal>system</literal>
          </term>
          <listitem>
            <para>
              System, zu dem dieses Objekt gehört. Typ: URL des
              <literal>oparl:System</literal> Objekts. Kardinalität: 1.
              ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>shortName</literal>
          </term>
          <listitem>
            <para>
              Kurzer Name der Körperschaft. Typ: Datentyp
              <literal>xsd:string</literal>. Kardinalität: 0 bis 1.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>name</literal>
          </term>
          <listitem>
            <para>
              Der offizielle lange Name der Körperschaft. Typ: Datentyp
              <literal>xsd:string</literal>. Kardinalität: 1. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>website</literal>
          </term>
          <listitem>
            <para>
              Allgemeine Website der Körperschaft. Typ: URL.
              Kardinalität: 0 bis 1. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>license</literal>
          </term>
          <listitem>
            <para>
              Lizenz, die für die Daten, die über diese API abgerufen
              werden können, gilt, sofern nicht am einzelnen Objekt
              anders angegeben. Siehe dazu auch die übergreifende
              Beschreibung zur Eigenschaft
              <link linkend="eigenschaft_license"><literal>license</literal></link>.
              Typ: URL. Kardinalität: 0 bis 1. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>licenseValidSince</literal>
          </term>
          <listitem>
            <para>
              Zeitpunkt, seit dem die unter <literal>license</literal>
              angegebene Lizenz gilt. Vorsicht bei Änderungen der Lizenz
              die zu restriktiveren Bedingungen führen. Typ:
              <literal>xsd:Date</literal>. Kardinalität: 0 bis 1.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>rgs</literal>
          </term>
          <listitem>
            <para>
              Regionalschlüssel der Körperschaft als zwölfstellige
              Zeichenkette<footnote>
                <para>
                  Regionalschlüssel können im
                  <ulink url="https://www.destatis.de/DE/ZahlenFakten/LaenderRegionen/Regionales/Gemeindeverzeichnis/Gemeindeverzeichnis.html">Gemeindeverzeichnis
                  (GV-ISys) des Statistischen Bundesamtes</ulink>
                  eingesehen werden
                </para>
              </footnote>. Typ: String. Kardinalität: 0 bis 1.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>equivalentBody</literal>
          </term>
          <listitem>
            <para>
              Dient der Angabe beliebig vieler zusätzlicher URLs, die
              die selbe Körperschaft repräsentieren. Hier können
              beispielsweise, sofern vorhanden, der entsprechende
              Eintrag der Gemeinsamen Normdatei der Deutschen
              Nationalbibliothek<footnote>
                <para>
                  Gemeinsame Normdatei
                  <ulink url="http://www.dnb.de/gnd">http://www.dnb.de/gnd</ulink>
                </para>
              </footnote>, der DBPedia<footnote>
                <para>
                  DBPedia
                  <ulink url="http://www.dbpedia.org/">http://www.dbpedia.org/</ulink>
                </para>
              </footnote> oder der Wikipedia<footnote>
                <para>
                  Wikipedia
                  <ulink url="http://de.wikipedia.org/">http://de.wikipedia.org/</ulink>
                </para>
              </footnote> angegeben werden. Typ: Array mit URLs.
              Kardinalität: 0 bis *. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>contactEmail</literal>
          </term>
          <listitem>
            <para>
              Dient der Angabe einer Kontakt-E-Mail-Adresse mit
              &quot;mailto:&quot;-Schema. Die Adresse soll die
              Kontaktaufnahme zu einer für die Körperschaft und
              idealerweise das parlamentarische Informationssystem
              zuständigen Stelle ermöglichen. Typ: E-Mail-Adresse
              inklusive &quot;mailto:&quot;. Kardinalität: 0 bis 1.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>contactName</literal>
          </term>
          <listitem>
            <para>
              Name oder Bezeichnung der mit
              <literal>contactEmail</literal> erreichbaren Stelle. Typ:
              String. Kardinalität: 0 bis 1. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>paper</literal>
          </term>
          <listitem>
            <para>
              Drucksacheen unter dieser Körperschaft. Vgl.
              <link linkend="objektlisten">Objektlisten</link>. Typ:
              Liste von <literal>oparl:Paper</literal> Objekten.
              Kardinalität: 0 bis *. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>member</literal>
          </term>
          <listitem>
            <para>
              Personen in dieser Körperschaft. Vgl.
              <link linkend="objektlisten">Objektlisten</link>. Typ:
              Liste von <literal>oparl:Person</literal> Objekten.
              Kardinalität: 0 bis *. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>meeting</literal>
          </term>
          <listitem>
            <para>
              Sitzungen dieser Körperschaft. Vgl.
              <link linkend="objektlisten">Objektlisten</link>. Typ:
              Liste von <literal>oparl:Meeting</literal> Objekten.
              Kardinalität: 0 bis *. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>organization</literal>
          </term>
          <listitem>
            <para>
              Gruppierungen in dieser Körperschaft. Vgl.
              <link linkend="objektlisten">Objektlisten</link>. Typ:
              Liste von <literal>oparl:Organization</literal> Objekten.
              Kardinalität: 0 bis *. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>legislativeTerm</literal>
          </term>
          <listitem>
            <para>
              Wahlperioden in dieser Körperschaft. Vgl.
              <link linkend="objektlisten">Objektlisten</link>. Typ:
              Liste von <literal>oparl:LegislativeTerm</literal>
              Objekten. Kardinalität: 0 bis *. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>keyword</literal>
          </term>
          <listitem>
            <para>
              Schlagwort(e). Vgl.
              <link linkend="vokabulare_klassifizierung">Vokabulare zur
              Klassifizierung</link>. Typ: Array mit Strings oder URLs
              zu <literal>skos:Concept</literal> Objekten. Kardinalität:
              0 bis *. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>created</literal>
          </term>
          <listitem>
            <para>
              Datum/Uhrzeit der Erzeugung des Objekts. Typ:
              <literal>xsd:dateTime</literal>. Kardinalität: 0 bis 1.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>modified</literal>
          </term>
          <listitem>
            <para>
              Datum/Uhrzeit der letzten Bearbeitung des Objekts. Typ:
              <literal>xsd:dateTime</literal>. Kardinalität: 0 bis 1.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect3>
  </sect2>
  <sect2 id="oparl_organization">
    <title>oparl:Organization (Gruppierung)</title>
    <para>
      Dieser Objekttyp dient dazu, Gruppierungen von Personen
      abzubilden, die in der parlamentarischen Arbeit eine Rolle
      spielen. Dazu zählen in der Praxis insbesondere Fraktionen und
      Gremien.<footnote>
        <para>
          Ein Teil der Eigenschaften ist der &quot;Organization&quot;
          Ontologie (kurz: <literal>org:Organization</literal>) des W3C
          entnommen. Quelle: The Organization Ontology, W3C
          Recommendation 16 January 2014,
          <ulink url="http://www.w3.org/TR/vocab-org/">http://www.w3.org/TR/vocab-org/</ulink>.
          Deren Bezeichnungen wurden deshalb beibehalten. Das betrifft
          z.B. die Verwendung von <literal>classification</literal>.
        </para>
      </footnote>
    </para>
    <para>
      <emphasis role="strong">Beispiel 1</emphasis>
    </para>
    <programlisting language="json">
{
    &quot;id&quot;: &quot;https://oparl.example.org/organization/34&quot;,
    &quot;type&quot;: &quot;http://oparl.org/schema/1.0/Organization&quot;,
    &quot;body&quot;: &quot;https://oparl.example.org/bodies/1&quot;,
    &quot;name&quot;: &quot;Ausschuss für Haushalt und Finanzen&quot;,
    &quot;shortName&quot;: &quot;Finanzausschuss&quot;,
    &quot;post&quot;: [
        &quot;https://oparl.example.org/post/chairperson&quot;,
        &quot;https://oparl.example.org/post/deputychairperson&quot;
    ],
    &quot;meeting&quot;: &quot;https://oparl.example.org/meetings_for_org/34&quot;,
    &quot;membership&quot;: [
        &quot;https://oparl.example.org/memberships/27&quot;,
        &quot;https://oparl.example.org/memberships/48&quot;,
        &quot;https://oparl.example.org/memberships/57&quot;
    ],
    &quot;classification&quot;: &quot;https://oparl.example.org/vocab/finance&quot;,
    &quot;keyword&quot;: [
        &quot;finanzen&quot;,
        &quot;haushalt&quot;
    ]
    &quot;created&quot;: &quot;2012-07-16T16:01:44+02:00&quot;,
    &quot;startDate&quot;: &quot;2012-07-17T00:00:00+02:00&quot;,
    &quot;modified&quot;: &quot;2012-08-16T14:05:27+02:00&quot;
}
</programlisting>
    <para>
      <emphasis role="strong">Beispiel 2</emphasis>
    </para>
    <programlisting language="json">
{
    &quot;id&quot;: &quot;https://oparl.example.org/organization/34&quot;,
    &quot;type&quot;: &quot;http://oparl.org/schema/1.0/Organization&quot;,
    &quot;body&quot;: &quot;https://oparl.example.org/bodies/1&quot;,
    &quot;name&quot;: &quot;Ausschuss für Haushalt und Finanzen&quot;,
    &quot;meeting&quot;: &quot;https://oparl.example.org/meetings_for_org/34&quot;,
    &quot;membership&quot;: &quot;https://oparl.example.org/meetings_for_org/34&quot;,
    &quot;modified&quot;: &quot;2012-08-16T14:05:27+02:00&quot;
}
</programlisting>
    <sect3 id="eigenschaften-2">
      <title>Eigenschaften</title>
      <variablelist>
        <varlistentry>
          <term>
            <literal>body</literal>
          </term>
          <listitem>
            <para>
              Körperschaft, zu der diese Gruppierung gehört. Typ: URL
              eines <literal>oparl:Body</literal> Objekts. Kardinalität:
              1. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>name</literal>
          </term>
          <listitem>
            <para>
              Offizielle (lange) Form des Namens der Gruppierung. Typ:
              Datentyp <literal>xsd:string</literal>. Kardinalität: 1.
              ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>membership</literal>
          </term>
          <listitem>
            <para>
              Mitgliedschaften dieser Gruppierung. Typ: Liste der URLs
              von <literal>oparl:Membership</literal> Objekten.
              Kardinalität: 0 bis *. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>meeting</literal>
          </term>
          <listitem>
            <para>
              Sitzungen dieser Gruppierung. Invers zur Eigenschaft
              <literal>organization</literal> der Klasse
              <literal>oparl:Meeting</literal>. Da die Anzahl der
              Sitzungen stetig wachsen kann, wird EMPFOHLEN, die Liste
              über eine eigene URL verfügbar zu machen und damit
              Paginierung sowie die Filterung mittels startDate und
              endDate Parametern zu ermöglichen. Siehe dazu auch
              <link linkend="objektlisten">Objektlisten</link>. Typ:
              Liste mit URLs von Objekten des Typs
              <literal>oparl:Meeting</literal>. Kardinalität: 0 bis *.
              ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>shortName</literal>
          </term>
          <listitem>
            <para>
              Der Name der Gruppierung als Kurzform. Typ: Datentyp
              <literal>xsd:string</literal>. Kardinalität: 0 bis 1.
              OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>post</literal>
          </term>
          <listitem>
            <para>
              Position oder Positionen, die für diese Gruppierung
              vorgesehen sind. Diese Eigenschaft funktioniert wie in
              <link linkend="vokabulare_klassifizierung">Vokabulare zur
              Klassifizierung</link> beschrieben entweder als URL zu
              einem <literal>skos:Concept</literal> oder als String. Die
              Strings bzw. <literal>prefLabel</literal>-Eigenschaften
              der Objekte SOLLEN sowohl die männliche als auch die
              weibliche Form enthalten, und zwar in dem Muster
              &quot;männliche Form | weibliche Form&quot; (genau in der
              Reihenfolge mit einem Leerzeichen vor und nach dem
              &quot;|&quot;). Wenn sich beide Formen nicht
              unterscheiden, dann DARF die Form nur einmal verwendet
              werden: &quot;Mitglied&quot; und nicht &quot;Mitglied |
              Mitglied&quot;. Weitere Beispiele: &quot;Vorsitzender |
              Vorsitzende&quot;, &quot;1. Stellvertreter | 1.
              Stellvertreterin&quot;, &quot;2. Stellvertreter | 2.
              Stellvertreterin&quot;, &quot;Schriftführer |
              Schriftführerin&quot;, &quot;Stellvertretender
              Schriftführer | Stellvertretende Schriftführerin&quot;,
              &quot;Ordentliches Mitglied&quot;, &quot;Stellvertretendes
              Mitglied&quot;. TODO: &quot;Ordentliches Mitglied&quot;,
              &quot;Stellvertretendes Mitglied&quot; müssen anders
              behandelt werden! Typ: String oder URL zu
              <literal>skos:Concept</literal> Objekt. Kardinalität: 0
              bis *. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>subOrganizationOf</literal>
          </term>
          <listitem>
            <para>
              Ggf. URL der übergeordneten Gruppierung. Typ:
              <literal>oparl:Organization</literal>. Kardinalität: 0 bis
              1. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>classification</literal>
          </term>
          <listitem>
            <para>
              Die Art der Gruppierung. In Frage kommen z.B.
              &quot;Rat&quot;, &quot;Hauptausschuss&quot;,
              &quot;Ausschuss&quot;, &quot;Beirat&quot;,
              &quot;Projektbeirat&quot;, &quot;Kommission&quot;,
              &quot;AG&quot;, &quot;Verwaltungsrat&quot;. Die Angabe
              soll möglichst präzise erfolgen. So ist die Angabe
              &quot;Hauptausschuss&quot; präziser als
              &quot;Ausschuss&quot;. Im Vokabular SOLL dann dieses
              Verhältnis zwischen &quot;Ausschuss&quot; und
              &quot;Hauptausschuss&quot; kodiert sein
              (&quot;https://oparl.example.org/hauptausschuss
              skos:broader https://oparl.example.org/ausschuss&quot;).
              Vgl. <link linkend="vokabulare_klassifizierung">Vokabulare
              zur Klassifizierung</link>. Typ:
              <literal>skos:Concept</literal>. Kardinalität: 0 bis 1.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>keyword</literal>
          </term>
          <listitem>
            <para>
              Schlagworte. Vgl.
              <link linkend="vokabulare_klassifizierung">Vokabulare zur
              Klassifizierung</link>. Typ:
              <literal>skos:Concept</literal>. Kardinalität: 0 bis *.
              OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>startDate</literal>
          </term>
          <listitem>
            <para>
              Gründungsdatum der Gruppierung. Kann z. B. das Datum der
              konstituierenden Sitzung sein. Typ:
              <literal>xsd:date</literal> oder
              <literal>xsd:dateTime</literal>. Kardinalität: 0 bis 1.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>endDate</literal>
          </term>
          <listitem>
            <para>
              Datum des letzten Tages der Existenz der Gruppierung. Typ:
              <literal>xsd:date</literal> oder
              <literal>xsd:dateTime</literal>. Kardinalität: 0 bis 1.
              OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>created</literal>
          </term>
          <listitem>
            <para>
              Datum/Uhrzeit der Erzeugung des Objekts. Typ:
              <literal>xsd:dateTime</literal>. Kardinalität: 0 bis 1.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>modified</literal>
          </term>
          <listitem>
            <para>
              Datum/Uhrzeit der letzten Bearbeitung des Objekts. Typ:
              <literal>xsd:dateTime</literal>. Kardinalität: 0 bis 1.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect3>
  </sect2>
  <sect2 id="oparl_person">
    <title>oparl:Person (Person)</title>
    <para>
      Jede natürliche Person, die in der parlamentarischen Arbeit tätig
      und insbesondere Mitglied in einer Gruppierung
      (<link linkend="oparl_organization">oparl:Organization</link>)
      ist, wird mit einem Objekt vom Typ <literal>oparl:Person</literal>
      abgebildet.
    </para>
    <para>
      <emphasis role="strong">Beispiel</emphasis>
    </para>
    <programlisting language="json">
{
    &quot;id&quot;: &quot;https://oparl.example.org/person/29&quot;,
    &quot;type&quot;: &quot;http://oparl.org/schema/1.0/Person&quot;,
    &quot;name&quot;: &quot;Prof. Dr. Max Mustermann&quot;,
    &quot;familyName&quot;: &quot;Mustermann&quot;,
    &quot;givenName&quot;: &quot;Max&quot;,
    &quot;title&quot;: [
        &quot;https://oparl.example.org/vocab/person/title/prof&quot;,
        &quot;https://oparl.example.org/vocab/person/title/dr&quot;
    ],
    &quot;formOfAddress&quot;: &quot;https://oparl.example.org/vocab/foa/ratsmitglied&quot;,
    &quot;gender&quot;: &quot;https://oparl.example.org/vocab/person/gender/male&quot;,
    &quot;email&quot;: &quot;mailto:max@mustermann.de&quot;,
    &quot;phone&quot;: &quot;tel:+493012345678&quot;,
    &quot;streetAddress&quot;: &quot;Musterstraße 5&quot;,
    &quot;postalCode&quot;: &quot;11111&quot;,
    &quot;locality&quot;: &quot;Musterort&quot;,
    &quot;status&quot;: &quot;https://oparl.example.org/status/buergermeister&quot;,
    &quot;hasMembership&quot;: [
        &quot;https://oparl.example.org/membership/11&quot;,
        &quot;https://oparl.example.org/membership/34&quot;
    ],
    &quot;created&quot;: &quot;2011-11-11T11:11:00+01:00&quot;,
    &quot;modified&quot;: &quot;2012-08-16T14:05:27+02:00&quot;
}
</programlisting>
    <sect3 id="eigenschaften-3">
      <title>Eigenschaften</title>
      <variablelist>
        <varlistentry>
          <term>
            <literal>name</literal>
          </term>
          <listitem>
            <para>
              Der vollständige Name der Person mit akademischem Grad und
              dem gebräuchlichen Vornamen, wie er zur Anzeige durch den
              Client genutzt werden kann. Typ: String. Kardinalität: 1.
              ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>familyName</literal>
          </term>
          <listitem>
            <para>
              Familienname bzw. Nachname. Typ: String. Kardinalität: 0
              bis 1. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>givenName</literal>
          </term>
          <listitem>
            <para>
              Vorname bzw. Taufname. Typ: String. Kardinalität: 0 bis 1.
              OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>formOfAddress</literal>
          </term>
          <listitem>
            <para>
              Anrede. Diese Eigenschaft funktioniert wie in
              <link linkend="vokabulare_klassifizierung">Vokabulare zur
              Klassifizierung</link> beschrieben entweder als URL zu
              einem <literal>skos:Concept</literal> oder als String. Der
              String bzw. <literal>prefLabel</literal> SOLL sowohl die
              männliche als auch die weibliche Bezeichnung enthalten.
              Beispiele: &quot;Herr | Frau&quot;, &quot;Ratsherr |
              Ratsfrau&quot;. Typ: URL eines
              <literal>skos:Concept</literal> Objekts oder String.
              Kardinalität: 0 bis 1. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>title</literal>
          </term>
          <listitem>
            <para>
              Akademische(r) Titel. Vgl.
              <link linkend="vokabulare_klassifizierung">Vokabulare zur
              Klassifizierung</link>. Typ: URL eines
              <literal>skos:Concept</literal> Objekts oder String.
              Kardinalität: 0 bis *. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>gender</literal>
          </term>
          <listitem>
            <para>
              Geschlecht. Zulässige Werte sind
              <literal>vcard:Female</literal>,
              <literal>vcard:Male</literal>,
              <literal>vcard:None</literal>,
              <literal>vcard:Other</literal> und
              <literal>vcard:Unknown</literal>. Typ: String (TODO:
              Entsprechende <literal>vcard:</literal>-Eigenschaft
              angeben). Kardinalität: 0 bis 1. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>phone</literal>
          </term>
          <listitem>
            <para>
              Telefonnummer mit <literal>tel:</literal> Schema. Typ:
              String mit &quot;tel:&quot; am Anfang, keine Leerzeichen.
              Kardinalität: 0 bis 1. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>email</literal>
          </term>
          <listitem>
            <para>
              E-Mail-Adresse mit <literal>mailto:</literal> Schema. Typ:
              <literal>foaf:mbox</literal>. Kardinalität: 0 bis 1.
              OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>streetAddress</literal>
          </term>
          <listitem>
            <para>
              Straße und Hausnummer der Kontakt-Anschrift der Person.
              Typ: String. Kardinalität: 0 bis 1. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>postalCode</literal>
          </term>
          <listitem>
            <para>
              Postleitzahl der Kontakt-Anschrift der Person. Typ:
              String. Kardinalität: 0 bis 1. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>locality</literal>
          </term>
          <listitem>
            <para>
              Ortsangabe der Kontakt-Anschrift der Person. Typ:
              <literal>vcard:locality</literal> Kardinalität: 0 bis 1.
              OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>status</literal>
          </term>
          <listitem>
            <para>
              Status. Diese Eigenschaft funktioniert wie in
              <link linkend="vokabulare_klassifizierung">Vokabulare zur
              Klassifizierung</link> beschrieben entweder als URL zu
              einem <literal>skos:Concept</literal> oder als String. Die
              Strings bzw. <literal>prefLabel</literal> SOLLEN sowohl
              die männliche als auch die weibliche Form enthalten, und
              zwar in dem Muster &quot;männliche Form | weibliche
              Form&quot; (genau in der Reihenfolge mit einem Leerzeichen
              vor und nach dem &quot;|&quot;). Wenn sich beide Formen
              nicht unterscheiden, dann DARF die Form nur einmal
              verwendet werden: &quot;Ratsmitglied&quot; und nicht
              &quot;Ratsmitglied | Ratsmitglied&quot;. Dadurch kann auch
              solche Software einen sinnvollen Text anzeigen, die keine
              Fall-Unterscheidung nach Geschlecht der Personen vornimmt.
              Weitere Beispiele: &quot;Bürgermeister |
              Bürgermeisterin&quot;, &quot;Bezirksbürgermeister |
              Bezirksbürgermeisterin&quot;, &quot;Stadtverordneter |
              Stadtverordnete&quot;, &quot;Bezirksverordneter |
              Bezirksverordnete&quot;, &quot;Sachkundiger Bürger |
              Sachkundige Bürgerin&quot;, &quot;Einzelstadtverordneter |
              Einzelstadtverordnete&quot; (Mitglieder des Rates die
              keiner Fraktion/Organisation angehören). Vgl.
              <link linkend="vokabulare_klassifizierung">Vokabulare zur
              Klassifizierung</link>. Typ: URL eines
              <literal>skos:Concept</literal> Objekts oder String.
              Kardinalität: 0 bis *. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>hasMembership</literal>
          </term>
          <listitem>
            <para>
              Mitgliedschaft(en) der Person in Gruppierungen
              (oparl:Organization), z. B. Gremien und Fraktionen. Typ:
              URL eines <literal>org:Membership</literal> Objekts.
              Kardinalität: 0 bis *. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>keyword</literal>
          </term>
          <listitem>
            <para>
              Diese Eigenschaft funktioniert wie in
              <link linkend="vokabulare_klassifizierung">Vokabulare zur
              Klassifizierung</link> beschrieben entweder als URL zu
              einem <literal>skos:Concept</literal> oder als String.
              Typ: URL eines <literal>skos:Concept</literal> Objekts
              oder String. Kardinalität: 0 bis *. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>created</literal>
          </term>
          <listitem>
            <para>
              Datum/Uhrzeit der Erzeugung des Objekts. Typ:
              <literal>xsd:dateTime</literal> Kardinalität: 0 bis 1.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>modified</literal>
          </term>
          <listitem>
            <para>
              Datum/Uhrzeit der letzten Bearbeitung des Objekts. Typ:
              <literal>xsd:dateTime</literal>. Kardinalität: 0 bis 1.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect3>
  </sect2>
  <sect2 id="oparl_meeting">
    <title>oparl:Meeting (Sitzung)</title>
    <para>
      Eine Sitzung ist die Versammlung einer oder mehrerer Gruppierungen
      (oparl:Organization) zu einem bestimmten Zeitpunkt an einem
      bestimmten Ort.
    </para>
    <para>
      Die geladenen Teilnehmer der Sitzung sind jeweils als Objekte vom
      Typ oparl:Person in entsprechender Form referenziert. Verschiedene
      Dokumente (Einladung, Ergebnis- und Wortprotokoll, sonstige
      Anlagen) können referenziert werden.
    </para>
    <para>
      Die Inhalte einer Sitzung werden durch Tagesordnungspunkte
      (oparl:AgendaItem) abgebildet.
    </para>
    <para>
      <emphasis role="strong">Beispiel</emphasis>
    </para>
    <programlisting language="json">
{
    &quot;id&quot;: &quot;https://oparl.example.org/meeting/281&quot;,
    &quot;type&quot;: &quot;http://oparl.org/schema/1.0/Meeting&quot;,
    &quot;name&quot;: &quot;4. Sitzung des Finanzausschusses&quot;,
    &quot;start&quot;: &quot;2013-01-04T08:00:00+01:00&quot;,
    &quot;end&quot;: &quot;2013-01-04T12:00:00+01:00&quot;,
    &quot;location&quot;: {
        &quot;description&quot;: &quot;Rathaus, Raum 136&quot;
    },
    &quot;organization&quot;: &quot;https://oparl.example.org/organization/34&quot;,
    &quot;invitation&quot;: [
        &quot;https://oparl.example.org/document/586&quot;
    ],
    &quot;resultsProtocol&quot;: &quot;https://oparl.example.org/document/628&quot;,
    &quot;verbatimProtocol&quot;: &quot;https://oparl.example.org/document/691&quot;,
    &quot;auxiliaryDocument&quot;: [
        &quot;https://oparl.example.org/document/588&quot;,
        &quot;https://oparl.example.org/document/589&quot;
    ],
    &quot;agendaItem&quot;: [
        &quot;https://oparl.example.org/agendaitem/1045&quot;,
        &quot;https://oparl.example.org/agendaitem/1046&quot;,
        &quot;https://oparl.example.org/agendaitem/1047&quot;,
        &quot;https://oparl.example.org/agendaitem/1048&quot;
    ],
    &quot;created&quot;: &quot;2012-01-06T12:01:00+01:00&quot;,
    &quot;modified&quot;: &quot;2012-01-08T14:05:27+01:00&quot;
}
</programlisting>
    <sect3 id="eigenschaften-4">
      <title>Eigenschaften</title>
      <variablelist>
        <varlistentry>
          <term>
            <literal>start</literal>
          </term>
          <listitem>
            <para>
              Datum und Uhrzeit des Anfangszeitpunkts der Sitzung. Bei
              einer zukünftigen Sitzung ist dies der geplante Zeitpunkt,
              bei einer stattgefundenen KANN es der tatsächliche
              Startzeitpunkt sein. Typ: Datentyp
              <literal>xsd:dateTime</literal>. Kardinalität: 1.
              ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>end</literal>
          </term>
          <listitem>
            <para>
              Endzeitpunkt der Sitzung als Datum/Uhrzeit. Bei einer
              zukünftigen Sitzung ist dies der geplante Zeitpunkt, bei
              einer stattgefundenen KANN es der tatsächliche
              Endzeitpunkt sein. Typ: Datentyp
              <literal>xsd:dateTime</literal>. Kardinalität: 0 bis 1.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>location</literal>
          </term>
          <listitem>
            <para>
              Sitzungsort. Typ: Objekt vom Typ
              <literal>oparl:Location</literal>. Kardinalität: 0 bis 1.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>organization</literal>
          </term>
          <listitem>
            <para>
              Gruppierung der die Sitzung zugeordnet ist. Wenn eine
              Liste angegeben wird, dann ist diese geordnet. Das erste
              Element ist dann das federführende Gremium. TODO:
              Eigenschaft für federführendes Gremium ergänzen und dann
              Ordnung entfernen. invers zur Eigenschaft
              <literal>meeting</literal> der Klasse
              <literal>oparl:Organization</literal>. Typ:
              <literal>oparl:Organization</literal>. Kardinalität: 1 bis
              *. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>chairPerson</literal>
          </term>
          <listitem>
            <para>
              Vorsitz der Sitzung Typ: <literal>oparl:Person</literal>.
              FRAGE: Was ist bei Wechsel des Vorsitzes während der
              Sitzung? Kardinalität: 0 bis 1. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>scribe</literal>
          </term>
          <listitem>
            <para>
              Schriftführer, Protokollant. Typ:
              <literal>oparl:Person</literal>. FRAGE: Können mehrere
              Personen vorkommen? Was ist bei Wechsel während der
              Sitzung? Kardinalität: 0 bis 1. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>participant</literal>
          </term>
          <listitem>
            <para>
              Teilnehmer der Sitzung. Bei einer Sitzung in der Zukunft
              sind dies die geladenen Teilnehmer, bei einer
              stattgefundenen Sitzung SOLL die Liste nur diejenigen
              Teilnehmer umfassen, die tatsächlich an der Sitzung
              teilgenommen haben. FRAGE: besser zwei separate
              Eigenschaften <literal>attendant</literal> und
              <literal>ìnvited</literal> ? Typ: Liste von Objekten des
              Typs <literal>oparl:Person</literal>. Vgl.
              <link linkend="objektlisten">Objektlisten</link>.
              Kardinalität: 0 bis *. DEPRECATED.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>invitation</literal>
          </term>
          <listitem>
            <para>
              Einladungsdokument zur Sitzung. FRAGE: Kann es mehr als
              ein solches Dokument geben? Typ: Liste von Objekten des
              Typs <literal>oparl:File</literal>. Vgl.
              <link linkend="objektlisten">Objektlisten</link>.
              Kardinalität: 0 bis *. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>resultsProtocol</literal>
          </term>
          <listitem>
            <para>
              Ergebnisprotokoll zur Sitzung. Diese Eigenschaft kann
              selbstverständlich erst nach dem Stattfinden der Sitzung
              vorkommen. Typ: URL eines Objekts vom Typ
              <literal>oparl:File</literal>. Kardinalität: 0 bis 1.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>verbatimProtocol</literal>
          </term>
          <listitem>
            <para>
              Wortprotokoll zur Sitzung. Diese Eigenschaft kann
              selbstverständlich erst nach dem Stattfinden der Sitzung
              vorkommen. Typ: URL eines Objekts vom Typ
              <literal>oparl:File</literal>. Kardinalität: 0 bis 1.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>auxiliaryDocument</literal>
          </term>
          <listitem>
            <para>
              Dokumentenanhang zur Sitzung. Hiermit sind Dokumente
              gemeint, die üblicherweise mit der Einladung zu einer
              Sitzung verteilt werden, und die nicht bereits über
              einzelne Tagesordnungspunkte referenziert sind. Typ: Liste
              von Objekten des Typs <literal>oparl:File</literal>. Vgl.
              <link linkend="objektlisten">Objektlisten</link>.
              Kardinalität: 0 bis *. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>agendaItem</literal>
          </term>
          <listitem>
            <para>
              Tagesordnungspunkte der Sitzung. Die Reihenfolge ist
              relevant. Es kann Sitzungen ohne TOPs geben. Typ: Liste
              von Objekten des Typs <literal>oparl:AgendaItem</literal>.
              Vgl. <link linkend="objektlisten">Objektlisten</link>.
              Kardinalität: 0 bis *. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>keyword</literal>
          </term>
          <listitem>
            <para>
              Schlagworte. Diese Eigenschaft funktioniert wie in
              <link linkend="vokabulare_klassifizierung">Vokabulare zur
              Klassifizierung</link> beschrieben entweder als URL zu
              einem <literal>skos:Concept</literal> oder als String.
              Typ: Liste von Strings oder URLs zu
              <literal>skos:Concept</literal> Objekten. Kardinalität: 0
              bis *. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>created</literal>
          </term>
          <listitem>
            <para>
              Datum und Uhrzeit der Erzeugung des Objekts. Typ: Datentyp
              <literal>xsd:dateTime</literal>. Kardinalität: 0 bis 1.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>modified</literal>
          </term>
          <listitem>
            <para>
              Datum und Uhrzeit der letzten Änderung des Objekts. Typ:
              Datentyp <literal>xsd:dateTime</literal>. Kardinalität: 0
              bis 1. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect3>
  </sect2>
  <sect2 id="oparl_agendaitem">
    <title>oparl:AgendaItem (Tagesordnungspunkt)</title>
    <para>
      Tagesordnungspunkte sind die Bestandteile von Sitzungen
      (<literal>oparl:Meeting</literal>). Jeder Tagesordnungspunkt
      widmet sich inhaltlich einem bestimmten Thema, wozu in der Regel
      auch die Beratung bestimmter Drucksachen gehört.
    </para>
    <para>
      Die Beziehung zwischen einem Tagesordnungspunkt und einer
      Drucksache wird über ein Objekt vom Typ
      <literal>oparl:Consultation</literal> hergestellt, das über die
      Eigenschaft <literal>consultation</literal> referenziert werden
      kann.
    </para>
    <para>
      <emphasis role="strong">Beispiel</emphasis>
    </para>
    <programlisting language="json">
{
    &quot;id&quot;: &quot;https://oparl.example.org/agendaitem/3271&quot;,
    &quot;type&quot;: &quot;http://oparl.org/schema/1.0/AgendaItem&quot;,
    &quot;meeting&quot;: &quot;https://oparl.example.org/meeting/281&quot;,
    &quot;number&quot;: &quot;10.1&quot;,
    &quot;name&quot;: &quot;Satzungsänderung für Ausschreibungen&quot;,
    &quot;public&quot;: true,
    &quot;consultation&quot;: &quot;https://oparl.example.org/consultation/1034&quot;,
    &quot;result&quot;: &quot;https://oparl.example.org/vocab/decided_modified&quot;,
    &quot;resolution&quot;: &quot;Der Beschluss weicht wie folgt vom Antrag ab: ...&quot;,
    &quot;modified&quot;: &quot;2012-08-16T14:05:27+02:00&quot;
}
</programlisting>
    <sect3 id="eigenschaften-5">
      <title>Eigenschaften</title>
      <variablelist>
        <varlistentry>
          <term>
            <literal>meeting</literal>
          </term>
          <listitem>
            <para>
              Sitzung, der der Tagesordnungspunkt zugeordnet ist. Typ:
              URL eines Objekts vom Typ
              <literal>oparl:Meeting</literal>. Kardinalität: 1.
              ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>number</literal>
          </term>
          <listitem>
            <para>
              Gliederungs-&quot;Nummer&quot; des Tagesordnungspunktes.
              Eine beliebige Zeichenkette, wie z. B. &quot;10.&quot;,
              &quot;10.1&quot;, &quot;C&quot;, &quot;c)&quot; o. ä. Die
              Reihenfolge wird nicht dadurch, sondern durch die
              Reihenfolge der TOPs im
              <literal>agendaItem</literal>-Attribut von
              <literal>oparl:Meeting</literal> festgelegt. Typ: String.
              Kardinalität: 0 bis 1. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>name</literal>
          </term>
          <listitem>
            <para>
              Das Thema des Tagesordnungspunktes. Typ: String. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>public</literal>
          </term>
          <listitem>
            <para>
              Kennzeichnet, ob der Tagesordnungspunkt zur Behandlung in
              öffentlicher Sitzung vorgesehen ist/war. Es wird ein
              Wahrheitswert (<literal>true</literal> oder
              <literal>false</literal>) erwartet. Typ: Boolean.
              Kardinalität: 0 bis 1. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>consultation</literal>
          </term>
          <listitem>
            <para>
              Beratung, die diesem Tagesordnungspunkt zugewiesen ist.
              Typ: URL eines Objekts vom Typ
              <literal>oparl:Consultation</literal>. Kardinalität: 0 bis
              1. FRAGE: Wirklich immer nur maximal 1 ? EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>result</literal>
          </term>
          <listitem>
            <para>
              Kategorische Information darüber, welches Ergebnis die
              Beratung des Tagesordnungspunktes erbracht hat, in der
              Bedeutung etwa &quot;Unverändert beschlossen&quot; oder
              &quot;Geändert beschlossen&quot;. Diese Eigenschaft
              funktioniert wie in
              <link linkend="vokabulare_klassifizierung">Vokabulare zur
              Klassifizierung</link> beschrieben entweder als URL zu
              einem <literal>skos:Concept</literal> oder als String.
              Typ: String oder URL eines <literal>skos:Concept</literal>
              Objekts. Kardinalität: 0 bis 1. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>resolution</literal>
          </term>
          <listitem>
            <para>
              Falls in diesem Tagesordnungspunkt ein Beschluss gefasst
              wurde, kann hier ein Text oder Dokument angegeben werden.
              Das ist besonders dann in der Praxis relevant, wenn der
              gefasste Beschluss (z. B. durch Änderungsantrag) von der
              Beschlussvorlage abweicht. Typ: String oder URL eines
              Objekts vom Typ <literal>oparl:File</literal>.
              Kardinalität: 0 bis 1. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>auxiliaryDocument</literal>
          </term>
          <listitem>
            <para>
              Dateianhänge zum Tagesordnungspunkt. Typ: Liste von
              Objekten des Typs <literal>oparl:File</literal>. Vgl.
              <link linkend="objektlisten">Objektlisten</link>.
              Kardinalität: 0 bis *. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>keyword</literal>
          </term>
          <listitem>
            <para>
              Schlagwort. Diese Eigenschaft funktioniert wie in
              <link linkend="vokabulare_klassifizierung">Vokabulare zur
              Klassifizierung</link> beschrieben entweder als URL zu
              einem <literal>skos:Concept</literal> oder als String.
              Typ: Liste von Strings oder URLs zu
              <literal>skos:Concept</literal> Objekten. Kardinalität: 0
              bis *. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>created</literal>
          </term>
          <listitem>
            <para>
              Erzeugungsdatum und -zeit des Objekts. Typ:
              <literal>xsd:dateTime</literal>. Kardinalität: 0 bis 1.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>modified</literal>
          </term>
          <listitem>
            <para>
              Datum und Uhrzeit der letzten Änderung. Typ:
              <literal>xsd:dateTime</literal>. Kardinalität: 0 bis 1.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect3>
  </sect2>
  <sect2 id="oparl_paper">
    <title>oparl:Paper (Drucksache)</title>
    <para>
      Dieser Objekttyp dient der Abbildung von Drucksachen in der
      parlamentarischen Arbeit, wie zum Beispiel Anfragen, Anträgen und
      Beschlussvorlagen.
    </para>
    <para>
      Drucksachen werden in Form einer Beratung (oparl:Consultation) im
      Rahmen eines Tagesordnungspunkts (oparl:AgendaItem) einer Sitzung
      (oparl:Meeting) behandelt.
    </para>
    <para>
      Drucksachen spielen in der schriftlichen wie mündlichen
      Kommunikation eine besondere Rolle, da in vielen Texten auf
      bestimmte Drucksachen Bezug genommen wird. Hierbei kommen in
      parlamentarischen Informationssystemen unveränderliche Kennungen
      der Drucksachen zum Einsatz.
    </para>
    <para>
      <emphasis role="strong">Beispiel</emphasis>
    </para>
    <programlisting language="json">
{
    &quot;id&quot;: &quot;https://oparl.example.org/paper/749&quot;,
    &quot;type&quot;: &quot;http://oparl.org/schema/1.0/Paper&quot;,
    &quot;body&quot;: &quot;https://oparl.example.org/bodies/1&quot;,
    &quot;name&quot;: &quot;Antwort auf Anfrage 1200/2014&quot;,
    &quot;reference&quot;: &quot;1234/2014&quot;,
    &quot;publishedDate&quot;: &quot;2014-04-04T16:42:02+02:00&quot;,
    &quot;paperType&quot;: &quot;https://oparl.example.org/vocab/answer&quot;,
    &quot;relatedPaper&quot;: [
        &quot;https://oparl.example.org/paper/699&quot;
    ],
    &quot;mainDocument&quot;: &quot;https://oparl.example.org/document/925&quot;,
    &quot;auxiliaryDocument&quot;: [
        &quot;https://oparl.example.org/document/926&quot;
    ],
    &quot;location&quot;: [
        {
            &quot;description&quot;: &quot;Theodor-Heuss-Ring 1&quot;,
            &quot;geometry&quot;: &quot;POINT(7.148  50.023)&quot;
        }
    ],
    &quot;originator&quot;: [
        &quot;https://oparl.example.org/organization/2000&quot;,
        &quot;https://oparl.example.org/people/1000&quot;
    ],
    &quot;consultation&quot;: [
        &quot;https://oparl.example.org/consultation/5676&quot;,
        &quot;https://oparl.example.org/consultation/5689&quot;
    ],
    &quot;underDirectionOf&quot;: [
        &quot;https://oparl.example.org/organization/2000&quot;
    ],
    &quot;modified&quot;: &quot;2013-01-08T12:05:27+01:00&quot;
}
</programlisting>
    <sect3 id="eigenschaften-6">
      <title>Eigenschaften</title>
      <variablelist>
        <varlistentry>
          <term>
            <literal>body</literal>
          </term>
          <listitem>
            <para>
              Körperschaft, zu der die Drucksache gehört. Typ:
              <literal>oparl:Body</literal>. Kardinalität: 1. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>name</literal>
          </term>
          <listitem>
            <para>
              Titel der Drucksache. Typ: String. Kardinalität: 1.
              ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>reference</literal>
          </term>
          <listitem>
            <para>
              Kennung bzw. Aktenzeichen der Drucksache, mit der sie in
              der parlamentarischen Arbeit eindeutig referenziert werden
              kann. Typ: String. Kardinalität: 0 bis 1. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>publishedDate</literal>
          </term>
          <listitem>
            <para>
              Veröffentlichungsdatum der Drucksache. Typ:
              <literal>xsd:dateTime</literal> oder
              <literal>xsd:date</literal>. Kardinalität: 0 bis 1.
              ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>paperType</literal>
          </term>
          <listitem>
            <para>
              Art der Drucksache, z. B. &quot;Beantwortung einer
              Anfrage&quot;. Diese Eigenschaft funktioniert wie in
              <link linkend="vokabulare_klassifizierung">Vokabulare zur
              Klassifizierung</link> beschrieben entweder als URL zu
              einem <literal>skos:Concept</literal> oder als String.
              Kardinalität: 0 bis 1. Typ: String oder URL eines
              <literal>skos:Concept</literal> Objekts. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>relatedPaper</literal>
          </term>
          <listitem>
            <para>
              Inhaltlich verwandte Drucksachen. Typ: Liste von Objekten
              des Typs <literal>oparl:Paper</literal>. Vgl.
              <link linkend="objektlisten">Objektlisten</link>.
              Kardinalität: 0 bis *. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>mainDocument</literal>
          </term>
          <listitem>
            <para>
              Das Hauptdokument zu dieser Drucksache. Beispiel: Die
              Drucksache repräsentiert eine Beschlussvorlage und das
              Hauptdokument enthält den Text der Beschlussvorlage. Typ:
              URL eines Objekts vom Typ <literal>oparl:File</literal>.
              Kardinalität: 1. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>auxiliaryDocument</literal>
          </term>
          <listitem>
            <para>
              Anhänge zur Drucksache. Diese sind, in Abgrenzung zum
              Hauptdokument (<literal>mainDocument</literal>),
              untergeordnet und es kann beliebig viele davon geben. Typ:
              Liste von Objekten des Typs <literal>oparl:File</literal>.
              Vgl. <link linkend="objektlisten">Objektlisten</link>.
              Kardinalität: 0 bis *. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>location</literal>
          </term>
          <listitem>
            <para>
              Sofern die Drucksache einen inhaltlichen Ortsbezug hat,
              beschreibt diese Eigenschaft den Ort in Textform und/oder
              in Form von Geodaten. Typ: Liste von Objekten des Typs
              <literal>oparl:Location</literal>. Vgl.
              <link linkend="objektlisten">Objektlisten</link>.
              Kardinalität: 0 bis *. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>originator</literal>
          </term>
          <listitem>
            <para>
              Urheber der Drucksache, kann eine oder mehrere Person(en)
              bzw. Gruppierung(en) sein. Typ:
              <literal>oparl:Person</literal> |
              <literal>oparl:Organization</literal>. Kardinalität: 0 bis
              *. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>consultation</literal>
          </term>
          <listitem>
            <para>
              Beratungen der Drucksache. Typ:
              <literal>oparl:Consultation</literal>. Kardinalität: 0 bis
              *. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>modified</literal>
          </term>
          <listitem>
            <para>
              Letzter Änderungszeitpunkt des Objekts. Typ: Datentyp
              <literal>xsd:dateTime</literal>. Kardinalität: 1.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>keyword</literal>
          </term>
          <listitem>
            <para>
              Schlagworte. Diese Eigenschaft funktioniert wie in
              <link linkend="vokabulare_klassifizierung">Vokabulare zur
              Klassifizierung</link> beschrieben entweder als URL zu
              einem <literal>skos:Concept</literal> oder als String.
              Typ: Liste von Strings oder URLs zu
              <literal>skos:Concept</literal> Objekten. Kardinalität: 0
              bis *. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>underDirectionOf</literal>
          </term>
          <listitem>
            <para>
              Federführung. Amt oder Abteilung, für die Inhalte oder
              Beantwortung der Drucksache verantwortlich. Typ: Liste von
              Objekten des Typs <literal>oparl:Organization</literal>.
              Kardinalität: 0 bis *. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect3>
  </sect2>
  <sect2 id="oparl_document">
    <title>oparl:File (Datei)</title>
    <para>
      Ein Objekt vom Typ <literal>oparl:File</literal> repräsentiert
      eine Datei, beispielsweise eine PDF-Datei, ein RTF- oder
      ODF-Dokument, und hält Metadaten zu der Datei sowie URLs zum
      Zugriff auf die Datei bereit.
    </para>
    <sect3 id="beispiel">
      <title>Beispiel</title>
      <para>
        Ein Kontext:
      </para>
      <programlisting>
{
    &quot;name&quot;: &quot;rdfs:label&quot;,
    &quot;fileName&quot;: &quot;oparl:fileName&quot;,
    &quot;paper&quot;: {
        &quot;@id&quot;: &quot;oparl:paper&quot;,
        &quot;@type&quot;: &quot;@id&quot;
    },
    &quot;mimeType&quot;: &quot;oparl:mimeType&quot;,
    &quot;date&quot;: {
        &quot;@id&quot;: &quot;oparl:date&quot;,
        &quot;@type&quot;: &quot;xsd:dateTime&quot;
    },
    &quot;modified&quot;: {
        &quot;@id&quot;: &quot;dc:modified&quot;,
        &quot;@type&quot;: &quot;xsd:dateTime&quot;
    },
    &quot;sha1Checksum&quot;: &quot;oparl:sha1Checksum&quot;,
    &quot;size&quot;: {
        &quot;@type&quot;: &quot;xsd:integer&quot; TODO ausreichend?
    }
    &quot;accessUrl&quot;: {
        &quot;@id&quot;: &quot;oparl:accessUrl&quot;,
        &quot;@type&quot;: &quot;@id&quot;
    },
    &quot;downloadUrl&quot;: {
        &quot;@id&quot;: &quot;oparl:downloadUrl&quot;,
        &quot;@type&quot;: &quot;@id&quot;
    },
    &quot;text&quot;: &quot;oparl:text&quot;,
    &quot;masterDocument&quot;: {
        &quot;@id&quot;: &quot;prov:wasDerivedFrom&quot;,
        &quot;@type&quot;: &quot;@id&quot;
    },
    &quot;derivativeDocument&quot;: {
        &quot;@id&quot;: &quot;prov:hadDerivation&quot;,
            TODO: invers zu masterDocument, deshalb nicht verwenden
        &quot;@type&quot;: &quot;@id&quot;
    },  
    &quot;license&quot;: {
        &quot;@id&quot;: &quot;oparl:&quot;,
        &quot;@type&quot;: &quot;@id&quot;
    },
    &quot;documentRole&quot;: {
        &quot;@id&quot;: &quot;oparl:downloadRole&quot;,
        &quot;@type&quot;: &quot;@id&quot;
    }
}
</programlisting>
      <programlisting language="json">
{
    &quot;@type&quot;: &quot;oparl:File&quot;,
    &quot;@id&quot;: &quot;beispielris:document/57739&quot;,
    &quot;name&quot;: &quot;Anlage 1 zur Anfrage&quot;,
    &quot;fileName&quot;: &quot;57739.pdf&quot;,
    &quot;paper&quot;: &quot;https://oparl.example.org/paper/2396&quot;,
    &quot;mimeType&quot;: &quot;application/pdf&quot;,
    &quot;date&quot;: &quot;2013-01-04T07:54:13+01:00&quot;,
    &quot;modified&quot;: &quot;2013-01-04T07:54:13+01:00&quot;,
    &quot;sha1Checksum&quot;: &quot;da39a3ee5e6b4b0d3255bfef95601890afd80709&quot;,
    &quot;size&quot;: 82930,
    &quot;accessUrl&quot;: &quot;beispielris:document/57739.pdf&quot;,
    &quot;downloadUrl&quot;: &quot;beispielris:document/download/57739.pdf&quot;,
    &quot;text&quot;: &quot;Der Übersichtsplan zeigt alle Ebenen des ...&quot;,
    &quot;masterDocument&quot;: &quot;beispielris:document/57738&quot;,
    &quot;license&quot;: &quot;http://www.opendefinition.org/licenses/cc-by&quot;,
    &quot;documentRole&quot;: &quot;beispielris:document-role/evidence&quot;
}
</programlisting>
    </sect3>
    <sect3 id="anmerkungen">
      <title>Anmerkungen</title>
      <para>
        Objekte vom Typ <literal>oparl:File</literal> können mit
        Drucksachen (<literal>oparl:Paper</literal>) oder Sitzungen
        (<literal>oparl:Meeting</literal>) in Beziehung stehen. Dies
        wird durch die Eigenschaft <literal>paper</literal> bzw.
        <literal>meeting</literal> angezeigt.
      </para>
      <para>
        Mehrere Objekte vom Typ <literal>oparl:File</literal> können mit
        einander in direkter Beziehung stehen, wenn sie den selben
        Inhalt in unterschiedlichen technischen Formaten wiedergeben.
        Hierfür werden die Eigenschaften
        <literal>masterDocument</literal> bzw.
        <literal>derivativeDocument</literal> eingesetzt. Das oben
        angezeigte Beispiel-Objekt repräsentiert eine PDF-Datei (zu
        erkennen an der Eigenschaft <literal>mimeType</literal>) und
        zeigt außerdem über die Eigenschaft
        <literal>masterDocument</literal> an, von welcher anderen Datei
        es abgeleitet wurde. Umgekehrt KANN über die Eigenschaft
        <literal>derivativeDocument</literal> angezeigt werden, welche
        Ableitungen einer Datei existieren.
      </para>
    </sect3>
    <sect3 id="eigenschaften-7">
      <title>Eigenschaften</title>
      <variablelist>
        <varlistentry>
          <term>
            <literal>fileName</literal>
          </term>
          <listitem>
            <para>
              Dateiname, unter dem die Datei in einem Dateisystem
              gespeichert werden kann. Beispiel:
              &quot;einedatei.pdf&quot; Typ: ASCII-Zeichenkette, aber
              als Unicode-String Kardinalität: 1. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>name</literal>
          </term>
          <listitem>
            <para>
              Ein zur Anzeige für Endnutzer bestimmter Name für dieses
              Objekt. Leerzeichen DÜRFEN enthalten sein werden,
              Datei-Extension wie &quot;.pdf&quot; SOLLEN NICHT
              enthalten sein. Der Wert SOLL NICHT mit dem Wert der
              Eigenschaft <literal>fileName</literal> identisch sein.
              Typ: String. Kardinalität: 0 bis 1. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>mimeType</literal>
          </term>
          <listitem>
            <para>
              MIME-Type des Inhalts<footnote>
                <para>
                  vgl. RFC2046:
                  <ulink url="http://tools.ietf.org/html/rfc2046">http://tools.ietf.org/html/rfc2046</ulink>
                </para>
              </footnote>. Sollte das System einer Datei keinen
              spezifischen Typ zuweisen können, wird EMPFOHLEN, hier
              <literal>application/octet-stream</literal> zu verwenden.
              Typ: String. Kardinalität: 1. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>date</literal>
          </term>
          <listitem>
            <para>
              Datum und Zeit der Erstellung der Datei. Wahlweise, falls
              dies nicht vom System kommuniziert werden kann oder soll,
              KANN alternativ der Zeitpunkt der Veröffentlichung
              ausgegeben werden. Typ: xsd:dateTime. Kardinalität: 1.
              ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>modified</literal>
          </term>
          <listitem>
            <para>
              Datum und Zeit der letzten Änderung der Datei bzw. der
              Metadaten. Als Änderung der Datei gilt alles, was den
              Inhalt der Datei verändert und beispielsweise zu einer
              Veränderung der Prüfsumme führen würde, nicht aber die
              Änderung des Dateinamens (siehe Eigenschaft
              <literal>name</literal>). Als Änderung der Metadaten
              hingegen würde beispielsweise die Änderung des Dateinamens
              gelten. Hier soll immer das größere der beiden Daten
              ausgegeben werden, also der am wenigsten lang
              zurückliegende Änderungszeitpunkt. Typ: xsd:dateTime.
              Kardinalität: 1. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>size</literal>
          </term>
          <listitem>
            <para>
              Größe der Datei in Bytes. Typ: ganze Zahl. Kardinalität:
              1. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>sha1Checksum</literal>
          </term>
          <listitem>
            <para>
              SHA1-Prüfsumme des Dokumenteninhalts in
              Hexadezimal-Schreibweise. Typ: String. Kardinalität: 0 bis
              1. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>text</literal>
          </term>
          <listitem>
            <para>
              Reine Text-Wiedergabe des Dateiinhalts, sofern dieser in
              Textform wiedergegeben werden kann. Typ: String.
              Kardinalität: 0 bis 1. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>accessUrl</literal>
          </term>
          <listitem>
            <para>
              URL zum allgemeinen Zugriff auf die Datei. Näheres unter
              <link linkend="dateizugriff">Dateizugriff</link>. Typ:
              URL. Kardinalität: 1. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>downloadUrl</literal>
          </term>
          <listitem>
            <para>
              URL zum Download der Datei. Näheres unter
              <link linkend="dateizugriff">Dateizugriff</link>. Typ:
              URL. Kardinalität: 0 bis 1. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>paper</literal>
          </term>
          <listitem>
            <para>
              Falls die Datei zu einer Drucksache
              (<literal>oparl:Paper</literal>) gehört, MUSS über diese
              Eigenschaft die URL des Drucksache-Objekts ausgegeben
              werden. vorhanden sein. Typ:
              <literal>oparl:Paper</literal>. Kardinalität: 0 bis *.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>meeting</literal>
          </term>
          <listitem>
            <para>
              Falls die Datei zu einer Sitzung
              (<literal>oparl:Meeting</literal>) gehört, MUSS über diese
              Eigenschaft die URL des Sitzung-Objekts ausgegeben werden.
              Typ: <literal>oparl:Meeting</literal>. Kardinalität: 0 bis
              *. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>masterDocument</literal>
          </term>
          <listitem>
            <para>
              Datei, von der das aktuelle Objekt abgeleitet wurde.
              Details dazu in der allgemeinen Beschreibung weiter oben.
              Typ: <literal>oparl:File</literal>. Kardinalität: 0 bis 1.
              OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>derivativeDocument</literal>
          </term>
          <listitem>
            <para>
              Datei, die von dem aktuellen Objekt abgeleitet wurde.
              Details dazu in der allgemeinen Beschreibung weiter oben.
              TODO: invers zu <literal>masterDocument</literal>. Von der
              Verwendung wird deshalb in der
              <literal>prov</literal>-Spezifikation abgeraten<footnote>
                <para>
                  <ulink url="http://www.w3.org/TR/prov-o/#inverse-names">http://www.w3.org/TR/prov-o/#inverse-names</ulink>
                </para>
              </footnote>. Typ: <literal>oparl:File</literal>.
              Kardinalität: 0 bis *. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>license</literal>
          </term>
          <listitem>
            <para>
              Lizenz, unter der die Datei angeboten wird. Wenn diese
              Eigenschaft verwendet wird, dann ist sie anstelle einer
              globalen Angabe im übergeordneten
              <literal>oparl:Body</literal>- bzw.
              <literal>oparl:System</literal>-Objekt
              maßgeblich.<footnote>
                <para>
                  vgl.
                  <link linkend="eigenschaft_license">license</link>
                </para>
              </footnote> Typ: URL. Kardinalität: 0 bis 1. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>documentRole</literal>
          </term>
          <listitem>
            <para>
              Rolle, Funktion, Sorte des Dokuments in Bezug auf eine
              Sitzung. Die Eigenschaft SOLL entsprechend nur in
              Verbindung mit der Eigenschaft <literal>meeting</literal>
              gesetzt sein. Siehe dazu
              <link linkend="vokabulare_klassifizierung">Vokabulare zur
              Klassifizierung</link>. Typ:
              <literal>skos:Concept</literal>. Kardinalität: 0 bis 1.
              OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>keyword</literal>
          </term>
          <listitem>
            <para>
              Schlagworte. Diese Eigenschaft funktioniert wie in
              <link linkend="vokabulare_klassifizierung">Vokabulare zur
              Klassifizierung</link> beschrieben entweder als URL zu
              einem <literal>skos:Concept</literal> oder als String.
              Typ: Liste von Strings oder URLs zu
              <literal>skos:Concept</literal> Objekten. Kardinalität: 0
              bis *. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect3>
  </sect2>
  <sect2 id="oparl_consultation">
    <title>oparl:Consultation (Beratung)</title>
    <para>
      Der Objekttyp <literal>oparl:Consultation</literal> dient dazu,
      die Beratung einer Drucksache
      (<link linkend="oparl_paper"><literal>oparl:Paper</literal></link>)
      in einer Sitzung abzubilden. Dabei ist es nicht entscheidend, ob
      diese Beratung in der Vergangenheit stattgefunden hat oder diese
      für die Zukunft geplant ist.
    </para>
    <para>
      Die Gesamtheit aller Objekte des Typs
      <literal>oparl:Consultation</literal> zu einer bestimmten
      Drucksache bildet das ab, was in der Praxis als
      &quot;Beratungsfolge&quot; der Drucksache bezeichnet wird.
    </para>
    <para>
      <emphasis role="strong">Beispiel</emphasis>
    </para>
    <programlisting language="json">
{
    &quot;id&quot;: &quot;https://oparl.example.org/consultation/47594&quot;,
    &quot;type&quot;: &quot;http://oparl.org/schema/1.0/Consultation&quot;,
    &quot;paper&quot;: &quot;https://oparl.example.org/paper/2396&quot;,
    &quot;agendaItem&quot;: &quot;https://oparl.example.org/agendaitem/15569&quot;,
    &quot;organization&quot;: &quot;https://oparl.example.org/organization/96&quot;,
    &quot;authoritative&quot;: false,
    &quot;role&quot;: &quot;https://oparl.example.org/role/decision&quot;
}
</programlisting>
    <sect3 id="eigenschaften-8">
      <title>Eigenschaften</title>
      <variablelist>
        <varlistentry>
          <term>
            <literal>paper</literal>
          </term>
          <listitem>
            <para>
              Drucksache, die beraten wird. Typ: URL eines Objekts vom
              Typ <literal>oparl:Paper</literal>. Kardinalität: 1.
              ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>agendaItem</literal>
          </term>
          <listitem>
            <para>
              Tagesordnungspunkt, unter dem die Drucksache beraten wird.
              Typ: URL eines Objekts vom Typ
              <literal>oparl:AgendaItem</literal>. Kardinalität: 0 bis
              1. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>organization</literal>
          </term>
          <listitem>
            <para>
              Gremium, dem die Sitzung zugewiesen ist, zu welcher der
              zuvor genannte Tagesordnungspunkt gehört. Hier kann auch
              eine mit Liste von Gremien angegeben werden (die
              verschiedenen <literal>oparl:Body</literal> und
              <literal>oparl:System</literal> angehören können). Die
              Liste ist dann geordnet. Das erste Gremium der Liste ist
              federführend. Typ: <literal>oparl:Organization</literal>.
              Kardinalität: 1 bis *. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>authoritative</literal>
          </term>
          <listitem>
            <para>
              Drückt aus, ob bei dieser Beratung ein Beschluss zu der
              Drucksache gefasst wird (<literal>true</literal>) wird
              oder nicht (<literal>false</literal>). Typ: Boolean.
              Kardinalität: 0 bis 1. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>role</literal>
          </term>
          <listitem>
            <para>
              Rolle oder Funktion der Beratung. Zum Beispiel Anhörung,
              Entscheidung, Kenntnisnahme, Vorberatung usw. Diese
              Eigenschaft funktioniert wie in
              <link linkend="vokabulare_klassifizierung">Vokabulare zur
              Klassifizierung</link> beschrieben entweder als URL zu
              einem <literal>skos:Concept</literal> oder als String.
              Typ: String oder URL eines <literal>skos:Concept</literal>
              Objekts. Kardinalität: 0 bis 1. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>keyword</literal>
          </term>
          <listitem>
            <para>
              Schlagworte. Diese Eigenschaft funktioniert wie in
              <link linkend="vokabulare_klassifizierung">Vokabulare zur
              Klassifizierung</link> beschrieben entweder als URL zu
              einem <literal>skos:Concept</literal> oder als String.
              Typ: Liste von Strings oder URLs zu
              <literal>skos:Concept</literal> Objekten. Kardinalität: 0
              bis *. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect3>
  </sect2>
  <sect2 id="oparl_location">
    <title>oparl:Location (Ort)</title>
    <para>
      Dieser Objekttyp dient dazu, den Ortsbezug einer Drucksache formal
      abzubilden. Ortsangaben können sowohl aus Textinformationen
      bestehen (beispielsweise dem Namen einer Straße/eines Platzes oder
      eine genaue Adresse) als auch aus Geodaten. Ortsangaben sind auch
      nicht auf einzelne Positionen beschränkt, sondern können eine
      Vielzahl von Positionen, Flächen, Strecken etc. abdecken.
    </para>
    <para>
      In der Praxis soll dies dazu dienen, den geografischen Bezug eines
      politischen Vorgangs, wie zum Beispiel eines Bauvorhabens oder der
      Änderung eines Flächennutzungsplanes, maschinenlesbar
      nachvollziehbar zu machen.
    </para>
    <para>
      Dieser Objekttyp kann für Objekte im Kontext des Objekttyps
      <literal>oparl:Paper</literal> verwendet werden.
    </para>
    <sect3 id="beispiel-1">
      <title>Beispiel</title>
      <para>
        Der JSON-LD-Kontext für die Eigenschaft
        <literal>geometry</literal>:
      </para>
      <programlisting>
{
   &quot;geometry&quot;: {
     // TODO wird @id benötigt?
     &quot;@type&quot;: &quot;ogc:wktLiteral&quot;
   }
}
</programlisting>
      <para>
        Und ein Beispiel unter Verwendung des Kontextes:
      </para>
      <programlisting language="json">
{
    ...
    &quot;location&quot;: {
        &quot;description&quot;: &quot;Honschaftsstraße 312, Köln&quot;,
        &quot;geometry&quot;: &quot;POINT (7.03291 50.98249)&quot;
    },
    ...
}
</programlisting>
    </sect3>
    <sect3 id="anmerkungen-1">
      <title>Anmerkungen</title>
<literallayout>OParl sieht bei Angabe von Geodaten ZWINGEND die Verwendung des
Well-Known-Text-Formats (WKT) der Simple Feature Access Spezifikation<footnote>
<para>
Simple Feature Access Spezifikation:
<ulink url="http://www.opengeospatial.org/standards/sfa">http://www.opengeospatial.org/standards/sfa</ulink>
</para>
</footnote> vor. WKT erlaubt die Beschreibung von unterschiedlichen Geometrien wie Punkten (<literal>Point</literal>), Pfaden (<literal>LineString</literal>), Polygonen (<literal>Polygon</literal>) und viele andere mehr.</literallayout>
      <para>
        Zum Zeitpunkt der Erstellung der vorliegenden Spezifikation ist
        Version 1.2.1 der Simple-Feature-Access-Spezifikation aktuell.
        OParl stellt keine Anforderungen daran, welche Version von
        Simple-Feature-Access bei der Ausgabe von WKT zu unterstützen
        ist.
      </para>
      <para>
        Für die Ausgabe über eine OParl-API MÜSSEN sämtliche
        Koordinatenangaben solcher Geodaten im System WGS84<footnote>
          <para>
            WGS84 steht für &quot;World Geodetic System 1984&quot;, es
            wird unter anderem auch vom Global Positioning System (GPS)
            verwendet. In geografischen Informationssystemen ist für das
            System der EPSG-Code 4326 geläufig.
          </para>
        </footnote> angegeben werden, und zwar in Form von Zahlenwerten
        (Fließkommazahlen) für Längen- und Breitengrad.
      </para>
    </sect3>
    <sect3 id="eigenschaften-9">
      <title>Eigenschaften</title>
      <variablelist>
        <varlistentry>
          <term>
            <literal>description</literal>
          </term>
          <listitem>
            <para>
              Textliche Beschreibung eines Orts, z. B. in Form einer
              Adresse. Typ: String. Kardinalität: 0 bis 1. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>geometry</literal>
          </term>
          <listitem>
            <para>
              Geodaten-Repräsentation des Orts. Ist diese Eigenschaft
              gesetzt, MUSS ihr Wert der Spezifikation von Well-Known
              Text (WKT) entsprechen. Typ: String. Kardinalität: 0 bis
              1. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>keyword</literal>
          </term>
          <listitem>
            <para>
              Schlagwort mit <literal>skos:prefLabel</literal>. Vgl.
              dazu <link linkend="vokabulare_klassifizierung">Vokabulare
              zur Klassifizierung</link>. Typ:
              <literal>skos:Concept</literal>. Kardinalität: 0 bis *.
              OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect3>
    <sect3 id="weitere-beispiele">
      <title>Weitere Beispiele</title>
      <para>
        Ortsangabe mit Polygon-Objekt:
      </para>
      <programlisting language="json">
{
    &quot;description&quot;: &quot;Rechtes Rheinufer zwischen Deutzer
        Brücke und Hohenzollernbrücke&quot;,
    &quot;geometry&quot;: &quot;POLYGON ((
                6.9681106 50.9412137,
                6.9690940 50.9412137,
                6.9692169 50.9368270,
                6.9681218 50.9368270,
                6.9681106 50.9412137))&quot;
}
</programlisting>
    </sect3>
  </sect2>
  <sect2 id="oparl_membership">
    <title>oparl:Membership</title>
    <para>
      Über Objekte diesen Typs wird die Mitgliedschaft von Personen in
      Gruppierungen dargestellt. Diese Mitgliedschaften können zeitlich
      begrenzt sein. Zudem kann abgebildet werden, dass eine Person eine
      bestimmte Rolle bzw. Position innerhalb der Gruppierung inne hat,
      beispielsweise den Vorsitz einer Fraktion.
    </para>
    <para>
      <emphasis role="strong">Beispiel 1</emphasis>
    </para>
    <programlisting language="json">
{
    &quot;id&quot;: &quot;https://oparl.example.org/memberships/385&quot;,
    &quot;type&quot;: &quot;http://oparl.org/schema/1.0/Membership&quot;,
    &quot;person&quot;: &quot;https://oparl.example.org/people/862&quot;,
    &quot;organization&quot;: &quot;https://oparl.example.org/organizations/5&quot;,
    &quot;role&quot;: &quot;https://oparl.example.org/vocab/membership/role/chair&quot;,
    &quot;votingRight&quot;: true,
    &quot;startDate&quot;: &quot;2013-12-03T16:30:00+01:00&quot;
}
</programlisting>
    <para>
      <emphasis role="strong">Beispiel 2</emphasis>
    </para>
    <programlisting language="json">
{
    &quot;id&quot;: &quot;https://oparl.example.org/memberships/693&quot;,
    &quot;person&quot;: &quot;https://oparl.example.org/people/284&quot;,
    &quot;organization&quot;: &quot;https://oparl.example.org/organizations/9&quot;,
    &quot;role&quot;: &quot;Sachkundiger Bürger | Sachkundige Bürgerin&quot;,
    &quot;votingRight&quot;: false,
    &quot;startDate&quot;: &quot;2013-12-03T16:30:00+01:00&quot;,
    &quot;endDate&quot;: &quot;2014-07-28T00:00:00+02:00&quot;
}
</programlisting>
    <sect3 id="eigenschaften-10">
      <title>Eigenschaften</title>
      <variablelist>
        <varlistentry>
          <term>
            <literal>person</literal>
          </term>
          <listitem>
            <para>
              Die betreffende Person, die Mitglied einer Gruppierung ist
              oder war. Typ: URL eines <literal>oparl:Person</literal>
              Objekts. Kardinalität: 1. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>organization</literal>
          </term>
          <listitem>
            <para>
              Die Gruppierung, in der die Person Mitglied ist oder war.
              Typ: URL eines <literal>oparl:Organization</literal>
              Objekts. Kardinalität: 1. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>role</literal>
          </term>
          <listitem>
            <para>
              Rolle der Person für die Gruppierung. Kann genutzt werden,
              um verschiedene Arten von Mitgliedschaften zum Beispiel in
              Gremien zu unterscheiden. Diese Eigenschaft funktioniert
              wie in
              <link linkend="vokabulare_klassifizierung">Vokabulare zur
              Klassifizierung</link> beschrieben entweder als URL zu
              einem skos:Concept oder als String. Der String (oder
              entsprechend das prefLabel des verlinkten Objekts) SOLL in
              dieser Form sowohl die männliche als auch die weibliche
              Rollenbezeichnung enthalten:
              <literal>&quot;Vorsitzender | Vorsitzende&quot;</literal>.
              Typ: URL eines <literal>skos:Concept</literal> Objekts
              oder String. Kardinalität: 0 bis 1. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>post</literal>
          </term>
          <listitem>
            <para>
              The post held by the person in the organization. Typ:
              <literal>org:Post</literal>. TODO: Prüfen, ob das ohne
              JSON-LD Sinn macht, oder ob hier zusätzliche Erkäuterungen
              notwendig sind. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>onBehalfOf</literal>
          </term>
          <listitem>
            <para>
              Entsendende Gruppierung, Fraktion, fraktionsloses oder
              externes Gremium. Es kann auch Mitglieder geben, die von
              keiner anderen Gruppierung entsendet wurden (z. B.
              fraktionslose Abgeordnete). Da eine solche Person sich
              gewissermaßen selbst &quot;entsendet&quot; hat, SOLL in
              dem Fall hier der selbe Wert angegeben werden wie bei der
              Eigenschaft <literal>person</literal>.<footnote>
                <para>
                  Dies entspricht <literal>opengov:onBehalfOf</literal>
                  in Popolo.
                  <ulink url="http://popoloproject.com/specs/membership.html">http://popoloproject.com/specs/membership.html</ulink>
                </para>
              </footnote> Typ: URL eines
              <literal>oparl:Organization</literal> oder
              <literal>oparl:Person</literal> Objekts. Kardinalität: 0
              bis 1. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>votingRight</literal>
          </term>
          <listitem>
            <para>
              Gibt an, ob die Person in der Gruppierung
              stimmberechtigtes Mitglied ist. Typ:
              <literal>boolean</literal>. Kardinalität: 0 bis 1.
              OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>startDate</literal>
          </term>
          <listitem>
            <para>
              Anfangszeitpunkt der Mitgliedschaft.<footnote>
                <para>
                  Abgeleitet von: <literal>schema:validFrom</literal> in
                  Popolo.
                  <ulink url="http://popoloproject.com/specs/membership.html">http://popoloproject.com/specs/membership.html</ulink>
                </para>
              </footnote> Typ: <literal>xsd:dateTime</literal>.
              Kardinalität: 0 bis 1. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>endDate</literal>
          </term>
          <listitem>
            <para>
              Der Endzeitpunkt der Mitgliedschaft.<footnote>
                <para>
                  Abgeleitet von: <literal>schema:validThrough</literal>
                  in Popolo.
                  <ulink url="http://popoloproject.com/specs/membership.html">http://popoloproject.com/specs/membership.html</ulink>
                </para>
              </footnote> Typ: <literal>xsd:dateTime</literal>.
              Kardinalität: 0 bis 1. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect3>
  </sect2>
  <sect2 id="oparl_legislative_term">
    <title>oparl:LegislativeTerm</title>
    <para>
      Dieser Objekttyp dient der Beschreibung einer Wahlperiode.
    </para>
    <para>
      <emphasis role="strong">Beispiel</emphasis>
    </para>
    <programlisting language="json">
{
    &quot;id&quot;: &quot;https://oparl.example.org/term/21&quot;,
    &quot;type&quot;: &quot;http://oparl.org/schema/1.0/LegislativeTerm&quot;,
    &quot;name&quot;: &quot;21. Wahlperiode&quot;,
    &quot;startDate&quot;: &quot;2010-12-03&quot;,
    &quot;endDate&quot;:  &quot;2013-12-03&quot;
}
</programlisting>
    <sect3 id="eigenschaften-11">
      <title>Eigenschaften</title>
      <variablelist>
        <varlistentry>
          <term>
            <literal>name</literal>
          </term>
          <listitem>
            <para>
              Nutzerfreundliche Bezeichnung der Wahlperiode. Typ:
              <literal>xsd:string</literal>. Kardinalität: 1. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>startDate</literal>
          </term>
          <listitem>
            <para>
              Der erste Tag der Wahlperiode. Typ:
              <literal>xsd:date</literal>. Kardinalität: 0 bis 1.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>endDate</literal>
          </term>
          <listitem>
            <para>
              Der letzte Tag der Wahlperiode. Typ:
              <literal>xsd:date</literal>. Kardinalität: 0 bis 1.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect3>
  </sect2>
</sect1>
<sect1 id="jsonld_ressourcen_oparlorg">
  <title>JSON-LD-Ressourcen auf oparl.org</title>
  <para>
    TODO: Beschreiben, wo weitere Informationen über
    JSON-LD-Kontextdokumente zu finden sein werden.
  </para>
</sect1>
